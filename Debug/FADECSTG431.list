
FADECSTG431.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f48  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08006120  08006120  00007120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061bc  080061bc  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  080061bc  080061bc  000071bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061c4  080061c4  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061c4  080061c4  000071c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080061c8  080061c8  000071c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080061cc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  2000000c  080061d8  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  080061d8  000083b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014885  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a59  00000000  00000000  0001c8c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  0001f320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d1f  00000000  00000000  00020410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eb7c  00000000  00000000  0002112f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016281  00000000  00000000  0003fcab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c25f5  00000000  00000000  00055f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118521  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004820  00000000  00000000  00118564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0011cd84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006108 	.word	0x08006108

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006108 	.word	0x08006108

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b96a 	b.w	8000d40 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	460c      	mov	r4, r1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d14e      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a90:	4694      	mov	ip, r2
 8000a92:	458c      	cmp	ip, r1
 8000a94:	4686      	mov	lr, r0
 8000a96:	fab2 f282 	clz	r2, r2
 8000a9a:	d962      	bls.n	8000b62 <__udivmoddi4+0xde>
 8000a9c:	b14a      	cbz	r2, 8000ab2 <__udivmoddi4+0x2e>
 8000a9e:	f1c2 0320 	rsb	r3, r2, #32
 8000aa2:	4091      	lsls	r1, r2
 8000aa4:	fa20 f303 	lsr.w	r3, r0, r3
 8000aa8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aac:	4319      	orrs	r1, r3
 8000aae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ab2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ab6:	fa1f f68c 	uxth.w	r6, ip
 8000aba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000abe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ac2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ac6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aca:	fb04 f106 	mul.w	r1, r4, r6
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ada:	f080 8112 	bcs.w	8000d02 <__udivmoddi4+0x27e>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 810f 	bls.w	8000d02 <__udivmoddi4+0x27e>
 8000ae4:	3c02      	subs	r4, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a59      	subs	r1, r3, r1
 8000aea:	fa1f f38e 	uxth.w	r3, lr
 8000aee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000af2:	fb07 1110 	mls	r1, r7, r0, r1
 8000af6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afa:	fb00 f606 	mul.w	r6, r0, r6
 8000afe:	429e      	cmp	r6, r3
 8000b00:	d90a      	bls.n	8000b18 <__udivmoddi4+0x94>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b0a:	f080 80fc 	bcs.w	8000d06 <__udivmoddi4+0x282>
 8000b0e:	429e      	cmp	r6, r3
 8000b10:	f240 80f9 	bls.w	8000d06 <__udivmoddi4+0x282>
 8000b14:	4463      	add	r3, ip
 8000b16:	3802      	subs	r0, #2
 8000b18:	1b9b      	subs	r3, r3, r6
 8000b1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b1e:	2100      	movs	r1, #0
 8000b20:	b11d      	cbz	r5, 8000b2a <__udivmoddi4+0xa6>
 8000b22:	40d3      	lsrs	r3, r2
 8000b24:	2200      	movs	r2, #0
 8000b26:	e9c5 3200 	strd	r3, r2, [r5]
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d905      	bls.n	8000b3e <__udivmoddi4+0xba>
 8000b32:	b10d      	cbz	r5, 8000b38 <__udivmoddi4+0xb4>
 8000b34:	e9c5 0100 	strd	r0, r1, [r5]
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e7f5      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b3e:	fab3 f183 	clz	r1, r3
 8000b42:	2900      	cmp	r1, #0
 8000b44:	d146      	bne.n	8000bd4 <__udivmoddi4+0x150>
 8000b46:	42a3      	cmp	r3, r4
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xcc>
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	f0c0 80f0 	bcc.w	8000d30 <__udivmoddi4+0x2ac>
 8000b50:	1a86      	subs	r6, r0, r2
 8000b52:	eb64 0303 	sbc.w	r3, r4, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	2d00      	cmp	r5, #0
 8000b5a:	d0e6      	beq.n	8000b2a <__udivmoddi4+0xa6>
 8000b5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b60:	e7e3      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b62:	2a00      	cmp	r2, #0
 8000b64:	f040 8090 	bne.w	8000c88 <__udivmoddi4+0x204>
 8000b68:	eba1 040c 	sub.w	r4, r1, ip
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	fa1f f78c 	uxth.w	r7, ip
 8000b74:	2101      	movs	r1, #1
 8000b76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b86:	fb07 f006 	mul.w	r0, r7, r6
 8000b8a:	4298      	cmp	r0, r3
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x11c>
 8000b8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x11a>
 8000b98:	4298      	cmp	r0, r3
 8000b9a:	f200 80cd 	bhi.w	8000d38 <__udivmoddi4+0x2b4>
 8000b9e:	4626      	mov	r6, r4
 8000ba0:	1a1c      	subs	r4, r3, r0
 8000ba2:	fa1f f38e 	uxth.w	r3, lr
 8000ba6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000baa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bb2:	fb00 f707 	mul.w	r7, r0, r7
 8000bb6:	429f      	cmp	r7, r3
 8000bb8:	d908      	bls.n	8000bcc <__udivmoddi4+0x148>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bc2:	d202      	bcs.n	8000bca <__udivmoddi4+0x146>
 8000bc4:	429f      	cmp	r7, r3
 8000bc6:	f200 80b0 	bhi.w	8000d2a <__udivmoddi4+0x2a6>
 8000bca:	4620      	mov	r0, r4
 8000bcc:	1bdb      	subs	r3, r3, r7
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	e7a5      	b.n	8000b20 <__udivmoddi4+0x9c>
 8000bd4:	f1c1 0620 	rsb	r6, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 f706 	lsr.w	r7, r2, r6
 8000bde:	431f      	orrs	r7, r3
 8000be0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000be4:	fa04 f301 	lsl.w	r3, r4, r1
 8000be8:	ea43 030c 	orr.w	r3, r3, ip
 8000bec:	40f4      	lsrs	r4, r6
 8000bee:	fa00 f801 	lsl.w	r8, r0, r1
 8000bf2:	0c38      	lsrs	r0, r7, #16
 8000bf4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bf8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bfc:	fa1f fc87 	uxth.w	ip, r7
 8000c00:	fb00 441e 	mls	r4, r0, lr, r4
 8000c04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c08:	fb0e f90c 	mul.w	r9, lr, ip
 8000c0c:	45a1      	cmp	r9, r4
 8000c0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c12:	d90a      	bls.n	8000c2a <__udivmoddi4+0x1a6>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c1a:	f080 8084 	bcs.w	8000d26 <__udivmoddi4+0x2a2>
 8000c1e:	45a1      	cmp	r9, r4
 8000c20:	f240 8081 	bls.w	8000d26 <__udivmoddi4+0x2a2>
 8000c24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c28:	443c      	add	r4, r7
 8000c2a:	eba4 0409 	sub.w	r4, r4, r9
 8000c2e:	fa1f f983 	uxth.w	r9, r3
 8000c32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c36:	fb00 4413 	mls	r4, r0, r3, r4
 8000c3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	d907      	bls.n	8000c56 <__udivmoddi4+0x1d2>
 8000c46:	193c      	adds	r4, r7, r4
 8000c48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c4c:	d267      	bcs.n	8000d1e <__udivmoddi4+0x29a>
 8000c4e:	45a4      	cmp	ip, r4
 8000c50:	d965      	bls.n	8000d1e <__udivmoddi4+0x29a>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	443c      	add	r4, r7
 8000c56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c5e:	eba4 040c 	sub.w	r4, r4, ip
 8000c62:	429c      	cmp	r4, r3
 8000c64:	46ce      	mov	lr, r9
 8000c66:	469c      	mov	ip, r3
 8000c68:	d351      	bcc.n	8000d0e <__udivmoddi4+0x28a>
 8000c6a:	d04e      	beq.n	8000d0a <__udivmoddi4+0x286>
 8000c6c:	b155      	cbz	r5, 8000c84 <__udivmoddi4+0x200>
 8000c6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c72:	eb64 040c 	sbc.w	r4, r4, ip
 8000c76:	fa04 f606 	lsl.w	r6, r4, r6
 8000c7a:	40cb      	lsrs	r3, r1
 8000c7c:	431e      	orrs	r6, r3
 8000c7e:	40cc      	lsrs	r4, r1
 8000c80:	e9c5 6400 	strd	r6, r4, [r5]
 8000c84:	2100      	movs	r1, #0
 8000c86:	e750      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000c88:	f1c2 0320 	rsb	r3, r2, #32
 8000c8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c94:	fa24 f303 	lsr.w	r3, r4, r3
 8000c98:	4094      	lsls	r4, r2
 8000c9a:	430c      	orrs	r4, r1
 8000c9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca4:	fa1f f78c 	uxth.w	r7, ip
 8000ca8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cac:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb0:	0c23      	lsrs	r3, r4, #16
 8000cb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb6:	fb00 f107 	mul.w	r1, r0, r7
 8000cba:	4299      	cmp	r1, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x24c>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cc6:	d22c      	bcs.n	8000d22 <__udivmoddi4+0x29e>
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	d92a      	bls.n	8000d22 <__udivmoddi4+0x29e>
 8000ccc:	3802      	subs	r0, #2
 8000cce:	4463      	add	r3, ip
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000cdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce0:	fb01 f307 	mul.w	r3, r1, r7
 8000ce4:	42a3      	cmp	r3, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x276>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf0:	d213      	bcs.n	8000d1a <__udivmoddi4+0x296>
 8000cf2:	42a3      	cmp	r3, r4
 8000cf4:	d911      	bls.n	8000d1a <__udivmoddi4+0x296>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4464      	add	r4, ip
 8000cfa:	1ae4      	subs	r4, r4, r3
 8000cfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d00:	e739      	b.n	8000b76 <__udivmoddi4+0xf2>
 8000d02:	4604      	mov	r4, r0
 8000d04:	e6f0      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d06:	4608      	mov	r0, r1
 8000d08:	e706      	b.n	8000b18 <__udivmoddi4+0x94>
 8000d0a:	45c8      	cmp	r8, r9
 8000d0c:	d2ae      	bcs.n	8000c6c <__udivmoddi4+0x1e8>
 8000d0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d16:	3801      	subs	r0, #1
 8000d18:	e7a8      	b.n	8000c6c <__udivmoddi4+0x1e8>
 8000d1a:	4631      	mov	r1, r6
 8000d1c:	e7ed      	b.n	8000cfa <__udivmoddi4+0x276>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	e799      	b.n	8000c56 <__udivmoddi4+0x1d2>
 8000d22:	4630      	mov	r0, r6
 8000d24:	e7d4      	b.n	8000cd0 <__udivmoddi4+0x24c>
 8000d26:	46d6      	mov	lr, sl
 8000d28:	e77f      	b.n	8000c2a <__udivmoddi4+0x1a6>
 8000d2a:	4463      	add	r3, ip
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	e74d      	b.n	8000bcc <__udivmoddi4+0x148>
 8000d30:	4606      	mov	r6, r0
 8000d32:	4623      	mov	r3, r4
 8000d34:	4608      	mov	r0, r1
 8000d36:	e70f      	b.n	8000b58 <__udivmoddi4+0xd4>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	e730      	b.n	8000ba0 <__udivmoddi4+0x11c>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_idiv0>:
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <selectMuxPin>:
float temperatureArray[4];
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void selectMuxPin(uint8_t pin) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t j = 0; j < 3; j++) {
 8000d4e:	2300      	movs	r3, #0
 8000d50:	73fb      	strb	r3, [r7, #15]
 8000d52:	e03b      	b.n	8000dcc <selectMuxPin+0x88>
		if (pin & (1 << j)) {
 8000d54:	79fa      	ldrb	r2, [r7, #7]
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
 8000d58:	fa42 f303 	asr.w	r3, r2, r3
 8000d5c:	f003 0301 	and.w	r3, r3, #1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d018      	beq.n	8000d96 <selectMuxPin+0x52>
			if (j == 2) {
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d10a      	bne.n	8000d80 <selectMuxPin+0x3c>
				HAL_GPIO_WritePin(GPIOC, selectPins[j], GPIO_PIN_SET);
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
 8000d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ddc <selectMuxPin+0x98>)
 8000d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	2201      	movs	r2, #1
 8000d76:	4619      	mov	r1, r3
 8000d78:	4819      	ldr	r0, [pc, #100]	@ (8000de0 <selectMuxPin+0x9c>)
 8000d7a:	f002 f8c1 	bl	8002f00 <HAL_GPIO_WritePin>
 8000d7e:	e022      	b.n	8000dc6 <selectMuxPin+0x82>
			} else {
				HAL_GPIO_WritePin(GPIOC, selectPins[j], GPIO_PIN_SET);
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	4a16      	ldr	r2, [pc, #88]	@ (8000ddc <selectMuxPin+0x98>)
 8000d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4814      	ldr	r0, [pc, #80]	@ (8000de0 <selectMuxPin+0x9c>)
 8000d90:	f002 f8b6 	bl	8002f00 <HAL_GPIO_WritePin>
 8000d94:	e017      	b.n	8000dc6 <selectMuxPin+0x82>
			}
		} else {
			if (j == 2) {
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d10a      	bne.n	8000db2 <selectMuxPin+0x6e>
				HAL_GPIO_WritePin(GPIOC, selectPins[j], GPIO_PIN_RESET);
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	4a0f      	ldr	r2, [pc, #60]	@ (8000ddc <selectMuxPin+0x98>)
 8000da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	2200      	movs	r2, #0
 8000da8:	4619      	mov	r1, r3
 8000daa:	480d      	ldr	r0, [pc, #52]	@ (8000de0 <selectMuxPin+0x9c>)
 8000dac:	f002 f8a8 	bl	8002f00 <HAL_GPIO_WritePin>
 8000db0:	e009      	b.n	8000dc6 <selectMuxPin+0x82>
			} else {
				HAL_GPIO_WritePin(GPIOC, selectPins[j], GPIO_PIN_RESET);
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
 8000db4:	4a09      	ldr	r2, [pc, #36]	@ (8000ddc <selectMuxPin+0x98>)
 8000db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4807      	ldr	r0, [pc, #28]	@ (8000de0 <selectMuxPin+0x9c>)
 8000dc2:	f002 f89d 	bl	8002f00 <HAL_GPIO_WritePin>
	for (uint8_t j = 0; j < 3; j++) {
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	73fb      	strb	r3, [r7, #15]
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d9c0      	bls.n	8000d54 <selectMuxPin+0x10>
			}
		}
	}

}
 8000dd2:	bf00      	nop
 8000dd4:	bf00      	nop
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	08006170 	.word	0x08006170
 8000de0:	48000800 	.word	0x48000800

08000de4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000de8:	b0bc      	sub	sp, #240	@ 0xf0
 8000dea:	af02      	add	r7, sp, #8
		uint32_t rawPressureData;
		int32_t rawTemperatureData;
		float fpressureData;
		float fpressureData2;
		float truePressureData;
		float runningAveragePressure[NUM_OF_SENSORS][5];
 8000dec:	2304      	movs	r3, #4
 8000dee:	3b01      	subs	r3, #1
 8000df0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000df4:	2304      	movs	r3, #4
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	2200      	movs	r2, #0
 8000dfa:	623b      	str	r3, [r7, #32]
 8000dfc:	627a      	str	r2, [r7, #36]	@ 0x24
 8000dfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000e02:	f04f 0000 	mov.w	r0, #0
 8000e06:	f04f 0100 	mov.w	r1, #0
 8000e0a:	0099      	lsls	r1, r3, #2
 8000e0c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000e10:	0090      	lsls	r0, r2, #2
 8000e12:	4602      	mov	r2, r0
 8000e14:	460b      	mov	r3, r1
 8000e16:	6a39      	ldr	r1, [r7, #32]
 8000e18:	1854      	adds	r4, r2, r1
 8000e1a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000e1c:	eb43 0101 	adc.w	r1, r3, r1
 8000e20:	460d      	mov	r5, r1
 8000e22:	f04f 0200 	mov.w	r2, #0
 8000e26:	f04f 0300 	mov.w	r3, #0
 8000e2a:	016b      	lsls	r3, r5, #5
 8000e2c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000e30:	0162      	lsls	r2, r4, #5
 8000e32:	2304      	movs	r3, #4
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2200      	movs	r2, #0
 8000e38:	61bb      	str	r3, [r7, #24]
 8000e3a:	61fa      	str	r2, [r7, #28]
 8000e3c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8000e40:	4622      	mov	r2, r4
 8000e42:	462b      	mov	r3, r5
 8000e44:	f04f 0000 	mov.w	r0, #0
 8000e48:	f04f 0100 	mov.w	r1, #0
 8000e4c:	0099      	lsls	r1, r3, #2
 8000e4e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000e52:	0090      	lsls	r0, r2, #2
 8000e54:	4602      	mov	r2, r0
 8000e56:	460b      	mov	r3, r1
 8000e58:	4621      	mov	r1, r4
 8000e5a:	1851      	adds	r1, r2, r1
 8000e5c:	6039      	str	r1, [r7, #0]
 8000e5e:	4629      	mov	r1, r5
 8000e60:	eb43 0101 	adc.w	r1, r3, r1
 8000e64:	6079      	str	r1, [r7, #4]
 8000e66:	f04f 0200 	mov.w	r2, #0
 8000e6a:	f04f 0300 	mov.w	r3, #0
 8000e6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8000e72:	4629      	mov	r1, r5
 8000e74:	014b      	lsls	r3, r1, #5
 8000e76:	4621      	mov	r1, r4
 8000e78:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8000e7c:	4621      	mov	r1, r4
 8000e7e:	014a      	lsls	r2, r1, #5
 8000e80:	2304      	movs	r3, #4
 8000e82:	461a      	mov	r2, r3
 8000e84:	4613      	mov	r3, r2
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	4413      	add	r3, r2
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	3307      	adds	r3, #7
 8000e8e:	08db      	lsrs	r3, r3, #3
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	ebad 0d03 	sub.w	sp, sp, r3
 8000e96:	ab02      	add	r3, sp, #8
 8000e98:	3303      	adds	r3, #3
 8000e9a:	089b      	lsrs	r3, r3, #2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
		float ftemperatureData;
		float runningAverageTemperature[NUM_OF_SENSORS][5];
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000eaa:	2304      	movs	r3, #4
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2200      	movs	r2, #0
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	617a      	str	r2, [r7, #20]
 8000eb4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8000eb8:	4622      	mov	r2, r4
 8000eba:	462b      	mov	r3, r5
 8000ebc:	f04f 0000 	mov.w	r0, #0
 8000ec0:	f04f 0100 	mov.w	r1, #0
 8000ec4:	0099      	lsls	r1, r3, #2
 8000ec6:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000eca:	0090      	lsls	r0, r2, #2
 8000ecc:	4602      	mov	r2, r0
 8000ece:	460b      	mov	r3, r1
 8000ed0:	4621      	mov	r1, r4
 8000ed2:	eb12 0a01 	adds.w	sl, r2, r1
 8000ed6:	4629      	mov	r1, r5
 8000ed8:	eb43 0b01 	adc.w	fp, r3, r1
 8000edc:	f04f 0200 	mov.w	r2, #0
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8000ee8:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000eec:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	60fa      	str	r2, [r7, #12]
 8000efa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8000efe:	4622      	mov	r2, r4
 8000f00:	462b      	mov	r3, r5
 8000f02:	f04f 0000 	mov.w	r0, #0
 8000f06:	f04f 0100 	mov.w	r1, #0
 8000f0a:	0099      	lsls	r1, r3, #2
 8000f0c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000f10:	0090      	lsls	r0, r2, #2
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	4621      	mov	r1, r4
 8000f18:	eb12 0801 	adds.w	r8, r2, r1
 8000f1c:	4629      	mov	r1, r5
 8000f1e:	eb43 0901 	adc.w	r9, r3, r1
 8000f22:	f04f 0200 	mov.w	r2, #0
 8000f26:	f04f 0300 	mov.w	r3, #0
 8000f2a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000f2e:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000f32:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000f36:	2304      	movs	r3, #4
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	4413      	add	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	3307      	adds	r3, #7
 8000f44:	08db      	lsrs	r3, r3, #3
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	ebad 0d03 	sub.w	sp, sp, r3
 8000f4c:	ab02      	add	r3, sp, #8
 8000f4e:	3303      	adds	r3, #3
 8000f50:	089b      	lsrs	r3, r3, #2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
		float temperatureSum = 0;
 8000f58:	f04f 0300 	mov.w	r3, #0
 8000f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
		float temperatureAverage = 0;
 8000f60:	f04f 0300 	mov.w	r3, #0
 8000f64:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
		float trueTemparature;
		float Fullscale_P = 40000;
 8000f68:	4bcb      	ldr	r3, [pc, #812]	@ (8001298 <main+0x4b4>)
 8000f6a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
		float pressureSum = 0;
 8000f6e:	f04f 0300 	mov.w	r3, #0
 8000f72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		float pressureAverage = 0;
 8000f76:	f04f 0300 	mov.w	r3, #0
 8000f7a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		//Sensor calibration values
		float calibration[10] = { 1000 / 6 / 1.5 / 1.10, 300 / 1.40, 100, 120.0, 1, 1, 1, 1, 1, 1 };
 8000f7e:	4bc7      	ldr	r3, [pc, #796]	@ (800129c <main+0x4b8>)
 8000f80:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 8000f84:	461d      	mov	r5, r3
 8000f86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f8e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f92:	e884 0003 	stmia.w	r4, {r0, r1}
		float tempcal[10] = { 2.15, 2, 2.15, 2, 1, 1, 1, 1, 1, 1 };
 8000f96:	4bc2      	ldr	r3, [pc, #776]	@ (80012a0 <main+0x4bc>)
 8000f98:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000f9c:	461d      	mov	r5, r3
 8000f9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000faa:	e884 0003 	stmia.w	r4, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fae:	f001 f860 	bl	8002072 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb2:	f000 faf7 	bl	80015a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb6:	f000 fca3 	bl	8001900 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000fba:	f000 fb57 	bl	800166c <MX_FDCAN1_Init>
  MX_I2C1_Init();
 8000fbe:	f000 fb9b 	bl	80016f8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000fc2:	f000 fc05 	bl	80017d0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000fc6:	f000 fc4f 	bl	8001868 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000fca:	f000 fbd5 	bl	8001778 <MX_RTC_Init>
  MX_CRC_Init();
 8000fce:	f000 fb2b 	bl	8001628 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fdc:	f001 ff90 	bl	8002f00 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 3; i++) {
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
 8000fe6:	e01f      	b.n	8001028 <main+0x244>
		if (i == 2) {
 8000fe8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d10b      	bne.n	8001008 <main+0x224>
			HAL_GPIO_WritePin(GPIOC, selectPins[i], GPIO_PIN_SET);
 8000ff0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8000ff4:	4aab      	ldr	r2, [pc, #684]	@ (80012a4 <main+0x4c0>)
 8000ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	4619      	mov	r1, r3
 8001000:	48a9      	ldr	r0, [pc, #676]	@ (80012a8 <main+0x4c4>)
 8001002:	f001 ff7d 	bl	8002f00 <HAL_GPIO_WritePin>
 8001006:	e00a      	b.n	800101e <main+0x23a>
		} else {
			HAL_GPIO_WritePin(GPIOC, selectPins[i], GPIO_PIN_SET);
 8001008:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800100c:	4aa5      	ldr	r2, [pc, #660]	@ (80012a4 <main+0x4c0>)
 800100e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001012:	b29b      	uxth	r3, r3
 8001014:	2201      	movs	r2, #1
 8001016:	4619      	mov	r1, r3
 8001018:	48a3      	ldr	r0, [pc, #652]	@ (80012a8 <main+0x4c4>)
 800101a:	f001 ff71 	bl	8002f00 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 3; i++) {
 800101e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8001022:	3301      	adds	r3, #1
 8001024:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
 8001028:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800102c:	2b02      	cmp	r3, #2
 800102e:	d9db      	bls.n	8000fe8 <main+0x204>
		}
	}

	//status avr struct init
	struct Command nStat = {
 8001030:	2300      	movs	r3, #0
 8001032:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 8001036:	2300      	movs	r3, #0
 8001038:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (uint8_t i = 0; i < NUM_OF_SENSORS; i++) {
 800103c:	2300      	movs	r3, #0
 800103e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8001042:	e24d      	b.n	80014e0 <main+0x6fc>

		//select mux pin in regards to number if I2C sensors
		selectMuxPin(i);
 8001044:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fe7b 	bl	8000d44 <selectMuxPin>

		//Packet receive and interpret
		struct Packet p = *receive_packet(&huart1, &hcrc);
 800104e:	4997      	ldr	r1, [pc, #604]	@ (80012ac <main+0x4c8>)
 8001050:	4897      	ldr	r0, [pc, #604]	@ (80012b0 <main+0x4cc>)
 8001052:	f000 fcbf 	bl	80019d4 <receive_packet>
 8001056:	4602      	mov	r2, r0
 8001058:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800105c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001060:	e883 0003 	stmia.w	r3, {r0, r1}
		struct Command c = *(struct Command*) p.payload;
 8001064:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001066:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800106a:	8812      	ldrh	r2, [r2, #0]
 800106c:	801a      	strh	r2, [r3, #0]

		//Transmit command to avr in format: {type, cmd};
		HAL_UART_Transmit(&huart2, &c, 2, 100);
 800106e:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001072:	2364      	movs	r3, #100	@ 0x64
 8001074:	2202      	movs	r2, #2
 8001076:	488f      	ldr	r0, [pc, #572]	@ (80012b4 <main+0x4d0>)
 8001078:	f003 fe81 	bl	8004d7e <HAL_UART_Transmit>

		//Set main valve
		if (c.state & (1 << 0)) {
 800107c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	2b00      	cmp	r3, #0
 8001086:	d007      	beq.n	8001098 <main+0x2b4>
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800108e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001092:	f001 ff35 	bl	8002f00 <HAL_GPIO_WritePin>
 8001096:	e006      	b.n	80010a6 <main+0x2c2>
		}
		else {
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800109e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a2:	f001 ff2d 	bl	8002f00 <HAL_GPIO_WritePin>
		}

		//Receive from Avr in format: {type, cmd};
		HAL_UART_Receive(&huart2, (uint8_t *) &nStat, 2, 100);
 80010a6:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80010aa:	2364      	movs	r3, #100	@ 0x64
 80010ac:	2202      	movs	r2, #2
 80010ae:	4881      	ldr	r0, [pc, #516]	@ (80012b4 <main+0x4d0>)
 80010b0:	f003 fef3 	bl	8004e9a <HAL_UART_Receive>


		//Set instructions for temperature and pressure sensors
		instructionArray[0] = 0x30;
 80010b4:	2330      	movs	r3, #48	@ 0x30
 80010b6:	f887 309c 	strb.w	r3, [r7, #156]	@ 0x9c
		instructionArray[1] = 0x0A;
 80010ba:	230a      	movs	r3, #10
 80010bc:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
		addressArray[0] = 0x06;
 80010c0:	2306      	movs	r3, #6
 80010c2:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
		HAL_I2C_Master_Transmit(&hi2c1, 0x7f << 1, instructionArray, 2, 25);
 80010c6:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 80010ca:	2319      	movs	r3, #25
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	2302      	movs	r3, #2
 80010d0:	21fe      	movs	r1, #254	@ 0xfe
 80010d2:	4879      	ldr	r0, [pc, #484]	@ (80012b8 <main+0x4d4>)
 80010d4:	f001 ffc8 	bl	8003068 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, 0x7f << 1, addressArray, 1, 25);
 80010d8:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 80010dc:	2319      	movs	r3, #25
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2301      	movs	r3, #1
 80010e2:	21fe      	movs	r1, #254	@ 0xfe
 80010e4:	4874      	ldr	r0, [pc, #464]	@ (80012b8 <main+0x4d4>)
 80010e6:	f002 f8d7 	bl	8003298 <HAL_I2C_Master_Receive>
		HAL_I2C_Master_Receive(&hi2c1, 0x7f << 1, receiveArray, 5, 25);
 80010ea:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 80010ee:	2319      	movs	r3, #25
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2305      	movs	r3, #5
 80010f4:	21fe      	movs	r1, #254	@ 0xfe
 80010f6:	4870      	ldr	r0, [pc, #448]	@ (80012b8 <main+0x4d4>)
 80010f8:	f002 f8ce 	bl	8003298 <HAL_I2C_Master_Receive>


		//Pressure data interpretation
		rawPressureData = (receiveArray[0] << 16) | (receiveArray[1] << 8) | (receiveArray[2]);
 80010fc:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8001100:	041a      	lsls	r2, r3, #16
 8001102:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	4313      	orrs	r3, r2
 800110a:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800110e:	4313      	orrs	r3, r2
 8001110:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
		fpressureData = rawPressureData;
 8001114:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001118:	ee07 3a90 	vmov	s15, r3
 800111c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001120:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
		if (fpressureData >= 8388608) {
 8001124:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8001128:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 80012bc <main+0x4d8>
 800112c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001134:	db3f      	blt.n	80011b6 <main+0x3d2>
			fpressureData2 = (fpressureData - 16777216.0) * Fullscale_P * calibration[i] / 8388608.0;
 8001136:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 800113a:	f7ff f9d1 	bl	80004e0 <__aeabi_f2d>
 800113e:	f04f 0200 	mov.w	r2, #0
 8001142:	4b5f      	ldr	r3, [pc, #380]	@ (80012c0 <main+0x4dc>)
 8001144:	f7ff f86c 	bl	8000220 <__aeabi_dsub>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	4614      	mov	r4, r2
 800114e:	461d      	mov	r5, r3
 8001150:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8001154:	f7ff f9c4 	bl	80004e0 <__aeabi_f2d>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4620      	mov	r0, r4
 800115e:	4629      	mov	r1, r5
 8001160:	f7ff fa16 	bl	8000590 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4614      	mov	r4, r2
 800116a:	461d      	mov	r5, r3
 800116c:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	33c0      	adds	r3, #192	@ 0xc0
 8001174:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001178:	4413      	add	r3, r2
 800117a:	3b84      	subs	r3, #132	@ 0x84
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff f9ae 	bl	80004e0 <__aeabi_f2d>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4620      	mov	r0, r4
 800118a:	4629      	mov	r1, r5
 800118c:	f7ff fa00 	bl	8000590 <__aeabi_dmul>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4610      	mov	r0, r2
 8001196:	4619      	mov	r1, r3
 8001198:	f04f 0200 	mov.w	r2, #0
 800119c:	4b49      	ldr	r3, [pc, #292]	@ (80012c4 <main+0x4e0>)
 800119e:	f7ff fb21 	bl	80007e4 <__aeabi_ddiv>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4610      	mov	r0, r2
 80011a8:	4619      	mov	r1, r3
 80011aa:	f7ff fc03 	bl	80009b4 <__aeabi_d2f>
 80011ae:	4603      	mov	r3, r0
 80011b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80011b4:	e035      	b.n	8001222 <main+0x43e>
		} else {
			fpressureData2 = fpressureData / 8388608.0 * Fullscale_P * calibration[i]; //delis zaradi max vrednosti
 80011b6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 80011ba:	f7ff f991 	bl	80004e0 <__aeabi_f2d>
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	4b40      	ldr	r3, [pc, #256]	@ (80012c4 <main+0x4e0>)
 80011c4:	f7ff fb0e 	bl	80007e4 <__aeabi_ddiv>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4614      	mov	r4, r2
 80011ce:	461d      	mov	r5, r3
 80011d0:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 80011d4:	f7ff f984 	bl	80004e0 <__aeabi_f2d>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4620      	mov	r0, r4
 80011de:	4629      	mov	r1, r5
 80011e0:	f7ff f9d6 	bl	8000590 <__aeabi_dmul>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4614      	mov	r4, r2
 80011ea:	461d      	mov	r5, r3
 80011ec:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	33c0      	adds	r3, #192	@ 0xc0
 80011f4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80011f8:	4413      	add	r3, r2
 80011fa:	3b84      	subs	r3, #132	@ 0x84
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f96e 	bl	80004e0 <__aeabi_f2d>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4620      	mov	r0, r4
 800120a:	4629      	mov	r1, r5
 800120c:	f7ff f9c0 	bl	8000590 <__aeabi_dmul>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4610      	mov	r0, r2
 8001216:	4619      	mov	r1, r3
 8001218:	f7ff fbcc 	bl	80009b4 <__aeabi_d2f>
 800121c:	4603      	mov	r3, r0
 800121e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
		}
		truePressureData = fpressureData2;
 8001222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001226:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

		//Running average  for stable data
		for (uint8_t j = 0; j < RUNAVGAM; j++) {
 800122a:	2300      	movs	r3, #0
 800122c:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
 8001230:	e07e      	b.n	8001330 <main+0x54c>
			if (j == 0) {
 8001232:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8001236:	2b00      	cmp	r3, #0
 8001238:	d103      	bne.n	8001242 <main+0x45e>
				pressureSum = 0;
 800123a:	f04f 0300 	mov.w	r3, #0
 800123e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
			}
			if (j == RUNAVGAM - 1) {
 8001242:	f897 20d9 	ldrb.w	r2, [r7, #217]	@ 0xd9
 8001246:	2305      	movs	r3, #5
 8001248:	3b01      	subs	r3, #1
 800124a:	429a      	cmp	r2, r3
 800124c:	d13c      	bne.n	80012c8 <main+0x4e4>
				runningAveragePressure[i][j] = truePressureData;
 800124e:	f897 20da 	ldrb.w	r2, [r7, #218]	@ 0xda
 8001252:	f897 00d9 	ldrb.w	r0, [r7, #217]	@ 0xd9
 8001256:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	4403      	add	r3, r0
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800126a:	601a      	str	r2, [r3, #0]
				pressureSum += runningAveragePressure[i][j];
 800126c:	f897 20da 	ldrb.w	r2, [r7, #218]	@ 0xda
 8001270:	f897 00d9 	ldrb.w	r0, [r7, #217]	@ 0xd9
 8001274:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001278:	4613      	mov	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	4403      	add	r3, r0
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	440b      	add	r3, r1
 8001284:	edd3 7a00 	vldr	s15, [r3]
 8001288:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 800128c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001290:	edc7 7a37 	vstr	s15, [r7, #220]	@ 0xdc
				break;
 8001294:	e052      	b.n	800133c <main+0x558>
 8001296:	bf00      	nop
 8001298:	471c4000 	.word	0x471c4000
 800129c:	08006120 	.word	0x08006120
 80012a0:	08006148 	.word	0x08006148
 80012a4:	08006170 	.word	0x08006170
 80012a8:	48000800 	.word	0x48000800
 80012ac:	20000050 	.word	0x20000050
 80012b0:	20000154 	.word	0x20000154
 80012b4:	200001e8 	.word	0x200001e8
 80012b8:	200000d8 	.word	0x200000d8
 80012bc:	4b000000 	.word	0x4b000000
 80012c0:	41700000 	.word	0x41700000
 80012c4:	41600000 	.word	0x41600000
			}
			runningAveragePressure[i][j] = runningAveragePressure[i][j + 1];
 80012c8:	f897 10da 	ldrb.w	r1, [r7, #218]	@ 0xda
 80012cc:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 80012d0:	1c5d      	adds	r5, r3, #1
 80012d2:	f897 20da 	ldrb.w	r2, [r7, #218]	@ 0xda
 80012d6:	f897 40d9 	ldrb.w	r4, [r7, #217]	@ 0xd9
 80012da:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 80012de:	460b      	mov	r3, r1
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	440b      	add	r3, r1
 80012e4:	442b      	add	r3, r5
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4403      	add	r3, r0
 80012ea:	6819      	ldr	r1, [r3, #0]
 80012ec:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 80012f0:	4613      	mov	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	4423      	add	r3, r4
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4403      	add	r3, r0
 80012fc:	6019      	str	r1, [r3, #0]
			pressureSum += runningAveragePressure[i][j];
 80012fe:	f897 20da 	ldrb.w	r2, [r7, #218]	@ 0xda
 8001302:	f897 00d9 	ldrb.w	r0, [r7, #217]	@ 0xd9
 8001306:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800130a:	4613      	mov	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	4403      	add	r3, r0
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	440b      	add	r3, r1
 8001316:	edd3 7a00 	vldr	s15, [r3]
 800131a:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 800131e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001322:	edc7 7a37 	vstr	s15, [r7, #220]	@ 0xdc
		for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8001326:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 800132a:	3301      	adds	r3, #1
 800132c:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
 8001330:	2205      	movs	r2, #5
 8001332:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8001336:	4293      	cmp	r3, r2
 8001338:	f4ff af7b 	bcc.w	8001232 <main+0x44e>
		}
		pressureAverage = pressureSum / RUNAVGAM;
 800133c:	2305      	movs	r3, #5
 800133e:	ee07 3a90 	vmov	s15, r3
 8001342:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001346:	edd7 6a37 	vldr	s13, [r7, #220]	@ 0xdc
 800134a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800134e:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc

		//Temperature data interpretation
		rawTemperatureData = (receiveArray[3] << 8) | receiveArray[4];
 8001352:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 800135c:	4313      	orrs	r3, r2
 800135e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		ftemperatureData = rawTemperatureData;
 8001362:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001366:	ee07 3a90 	vmov	s15, r3
 800136a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136e:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
		trueTemparature = ftemperatureData / 256.0 * tempcal[i];
 8001372:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8001376:	f7ff f8b3 	bl	80004e0 <__aeabi_f2d>
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	4b81      	ldr	r3, [pc, #516]	@ (8001584 <main+0x7a0>)
 8001380:	f7ff fa30 	bl	80007e4 <__aeabi_ddiv>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4614      	mov	r4, r2
 800138a:	461d      	mov	r5, r3
 800138c:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	33c0      	adds	r3, #192	@ 0xc0
 8001394:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001398:	4413      	add	r3, r2
 800139a:	3bac      	subs	r3, #172	@ 0xac
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff f89e 	bl	80004e0 <__aeabi_f2d>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4620      	mov	r0, r4
 80013aa:	4629      	mov	r1, r5
 80013ac:	f7ff f8f0 	bl	8000590 <__aeabi_dmul>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4610      	mov	r0, r2
 80013b6:	4619      	mov	r1, r3
 80013b8:	f7ff fafc 	bl	80009b4 <__aeabi_d2f>
 80013bc:	4603      	mov	r3, r0
 80013be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

		//Running average  for stable data
		for (uint8_t j = 0; j < RUNAVGAM; j++) {
 80013c2:	2300      	movs	r3, #0
 80013c4:	f887 30d8 	strb.w	r3, [r7, #216]	@ 0xd8
 80013c8:	e065      	b.n	8001496 <main+0x6b2>
			if (j == 0) {
 80013ca:	f897 30d8 	ldrb.w	r3, [r7, #216]	@ 0xd8
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d103      	bne.n	80013da <main+0x5f6>
				temperatureSum = 0;
 80013d2:	f04f 0300 	mov.w	r3, #0
 80013d6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
			}
			if (j == RUNAVGAM - 1) {
 80013da:	f897 20d8 	ldrb.w	r2, [r7, #216]	@ 0xd8
 80013de:	2305      	movs	r3, #5
 80013e0:	3b01      	subs	r3, #1
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d123      	bne.n	800142e <main+0x64a>
				runningAverageTemperature[i][j] = trueTemparature;
 80013e6:	f897 20da 	ldrb.w	r2, [r7, #218]	@ 0xda
 80013ea:	f897 00d8 	ldrb.w	r0, [r7, #216]	@ 0xd8
 80013ee:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	4403      	add	r3, r0
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	440b      	add	r3, r1
 80013fe:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001402:	601a      	str	r2, [r3, #0]
				temperatureSum += runningAverageTemperature[i][j];
 8001404:	f897 20da 	ldrb.w	r2, [r7, #218]	@ 0xda
 8001408:	f897 00d8 	ldrb.w	r0, [r7, #216]	@ 0xd8
 800140c:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	4403      	add	r3, r0
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	440b      	add	r3, r1
 800141c:	edd3 7a00 	vldr	s15, [r3]
 8001420:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 8001424:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001428:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0
				break;
 800142c:	e038      	b.n	80014a0 <main+0x6bc>
			}
			runningAverageTemperature[i][j] = runningAverageTemperature[i][j + 1];
 800142e:	f897 10da 	ldrb.w	r1, [r7, #218]	@ 0xda
 8001432:	f897 30d8 	ldrb.w	r3, [r7, #216]	@ 0xd8
 8001436:	1c5d      	adds	r5, r3, #1
 8001438:	f897 20da 	ldrb.w	r2, [r7, #218]	@ 0xda
 800143c:	f897 40d8 	ldrb.w	r4, [r7, #216]	@ 0xd8
 8001440:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8001444:	460b      	mov	r3, r1
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	440b      	add	r3, r1
 800144a:	442b      	add	r3, r5
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4403      	add	r3, r0
 8001450:	6819      	ldr	r1, [r3, #0]
 8001452:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	4423      	add	r3, r4
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4403      	add	r3, r0
 8001462:	6019      	str	r1, [r3, #0]
			temperatureSum += runningAverageTemperature[i][j];
 8001464:	f897 20da 	ldrb.w	r2, [r7, #218]	@ 0xda
 8001468:	f897 00d8 	ldrb.w	r0, [r7, #216]	@ 0xd8
 800146c:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 8001470:	4613      	mov	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	4403      	add	r3, r0
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	440b      	add	r3, r1
 800147c:	edd3 7a00 	vldr	s15, [r3]
 8001480:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 8001484:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001488:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0
		for (uint8_t j = 0; j < RUNAVGAM; j++) {
 800148c:	f897 30d8 	ldrb.w	r3, [r7, #216]	@ 0xd8
 8001490:	3301      	adds	r3, #1
 8001492:	f887 30d8 	strb.w	r3, [r7, #216]	@ 0xd8
 8001496:	2205      	movs	r2, #5
 8001498:	f897 30d8 	ldrb.w	r3, [r7, #216]	@ 0xd8
 800149c:	4293      	cmp	r3, r2
 800149e:	d394      	bcc.n	80013ca <main+0x5e6>
		}
		temperatureAverage = temperatureSum / RUNAVGAM;
 80014a0:	2305      	movs	r3, #5
 80014a2:	ee07 3a90 	vmov	s15, r3
 80014a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014aa:	edd7 6a38 	vldr	s13, [r7, #224]	@ 0xe0
 80014ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014b2:	edc7 7a31 	vstr	s15, [r7, #196]	@ 0xc4
		pressureArray[i] = pressureAverage;
 80014b6:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 80014ba:	4a33      	ldr	r2, [pc, #204]	@ (8001588 <main+0x7a4>)
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80014c4:	601a      	str	r2, [r3, #0]
		temperatureArray[i] = temperatureAverage;
 80014c6:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 80014ca:	4a30      	ldr	r2, [pc, #192]	@ (800158c <main+0x7a8>)
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80014d4:	601a      	str	r2, [r3, #0]
	  for (uint8_t i = 0; i < NUM_OF_SENSORS; i++) {
 80014d6:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 80014da:	3301      	adds	r3, #1
 80014dc:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 80014e0:	2204      	movs	r2, #4
 80014e2:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 80014e6:	4293      	cmp	r3, r2
 80014e8:	f4ff adac 	bcc.w	8001044 <main+0x260>
	}

	//pressures packet organization
	pressure.tank1 = pressureArray[0];
 80014ec:	4b26      	ldr	r3, [pc, #152]	@ (8001588 <main+0x7a4>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a27      	ldr	r2, [pc, #156]	@ (8001590 <main+0x7ac>)
 80014f2:	6013      	str	r3, [r2, #0]
	pressure.tank2 = pressureArray[1];
 80014f4:	4b24      	ldr	r3, [pc, #144]	@ (8001588 <main+0x7a4>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	4a25      	ldr	r2, [pc, #148]	@ (8001590 <main+0x7ac>)
 80014fa:	6053      	str	r3, [r2, #4]
	pressure.injector1 = pressureArray[2];
 80014fc:	4b22      	ldr	r3, [pc, #136]	@ (8001588 <main+0x7a4>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	4a23      	ldr	r2, [pc, #140]	@ (8001590 <main+0x7ac>)
 8001502:	6093      	str	r3, [r2, #8]
	pressure.injector2 = pressureArray[3];
 8001504:	4b20      	ldr	r3, [pc, #128]	@ (8001588 <main+0x7a4>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	4a21      	ldr	r2, [pc, #132]	@ (8001590 <main+0x7ac>)
 800150a:	60d3      	str	r3, [r2, #12]

	sendPacket.type = 'p';
 800150c:	4b21      	ldr	r3, [pc, #132]	@ (8001594 <main+0x7b0>)
 800150e:	2270      	movs	r2, #112	@ 0x70
 8001510:	701a      	strb	r2, [r3, #0]
	sendPacket.size = 16;
 8001512:	4b20      	ldr	r3, [pc, #128]	@ (8001594 <main+0x7b0>)
 8001514:	2210      	movs	r2, #16
 8001516:	705a      	strb	r2, [r3, #1]
	sendPacket.payload = (uint8_t*) &pressure;
 8001518:	4b1e      	ldr	r3, [pc, #120]	@ (8001594 <main+0x7b0>)
 800151a:	4a1d      	ldr	r2, [pc, #116]	@ (8001590 <main+0x7ac>)
 800151c:	605a      	str	r2, [r3, #4]
	send_packet(&sendPacket, &huart1, &hcrc);
 800151e:	4a1e      	ldr	r2, [pc, #120]	@ (8001598 <main+0x7b4>)
 8001520:	491e      	ldr	r1, [pc, #120]	@ (800159c <main+0x7b8>)
 8001522:	481c      	ldr	r0, [pc, #112]	@ (8001594 <main+0x7b0>)
 8001524:	f000 fac6 	bl	8001ab4 <send_packet>

	//temperatures packet organization
	temperature.tank1 = temperatureArray[0];
 8001528:	4b18      	ldr	r3, [pc, #96]	@ (800158c <main+0x7a8>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a1c      	ldr	r2, [pc, #112]	@ (80015a0 <main+0x7bc>)
 800152e:	6013      	str	r3, [r2, #0]
	temperature.tank1 = temperatureArray[1];
 8001530:	4b16      	ldr	r3, [pc, #88]	@ (800158c <main+0x7a8>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	4a1a      	ldr	r2, [pc, #104]	@ (80015a0 <main+0x7bc>)
 8001536:	6013      	str	r3, [r2, #0]
	temperature.injector1 = temperatureArray[2];
 8001538:	4b14      	ldr	r3, [pc, #80]	@ (800158c <main+0x7a8>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	4a18      	ldr	r2, [pc, #96]	@ (80015a0 <main+0x7bc>)
 800153e:	6093      	str	r3, [r2, #8]
	temperature.injector2 = temperatureArray[3];
 8001540:	4b12      	ldr	r3, [pc, #72]	@ (800158c <main+0x7a8>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	4a16      	ldr	r2, [pc, #88]	@ (80015a0 <main+0x7bc>)
 8001546:	60d3      	str	r3, [r2, #12]

	sendPacket.type = 't';
 8001548:	4b12      	ldr	r3, [pc, #72]	@ (8001594 <main+0x7b0>)
 800154a:	2274      	movs	r2, #116	@ 0x74
 800154c:	701a      	strb	r2, [r3, #0]
	sendPacket.size = 16;
 800154e:	4b11      	ldr	r3, [pc, #68]	@ (8001594 <main+0x7b0>)
 8001550:	2210      	movs	r2, #16
 8001552:	705a      	strb	r2, [r3, #1]
	sendPacket.payload = (uint8_t*) &temperature;
 8001554:	4b0f      	ldr	r3, [pc, #60]	@ (8001594 <main+0x7b0>)
 8001556:	4a12      	ldr	r2, [pc, #72]	@ (80015a0 <main+0x7bc>)
 8001558:	605a      	str	r2, [r3, #4]
	send_packet(&sendPacket, &huart1, &hcrc);
 800155a:	4a0f      	ldr	r2, [pc, #60]	@ (8001598 <main+0x7b4>)
 800155c:	490f      	ldr	r1, [pc, #60]	@ (800159c <main+0x7b8>)
 800155e:	480d      	ldr	r0, [pc, #52]	@ (8001594 <main+0x7b0>)
 8001560:	f000 faa8 	bl	8001ab4 <send_packet>

	//avr status data organization
	sendPacket.type = 'c';
 8001564:	4b0b      	ldr	r3, [pc, #44]	@ (8001594 <main+0x7b0>)
 8001566:	2263      	movs	r2, #99	@ 0x63
 8001568:	701a      	strb	r2, [r3, #0]
	sendPacket.size = 2;
 800156a:	4b0a      	ldr	r3, [pc, #40]	@ (8001594 <main+0x7b0>)
 800156c:	2202      	movs	r2, #2
 800156e:	705a      	strb	r2, [r3, #1]
	sendPacket.payload = (uint8_t*) &nStat;
 8001570:	4a08      	ldr	r2, [pc, #32]	@ (8001594 <main+0x7b0>)
 8001572:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001576:	6053      	str	r3, [r2, #4]
	send_packet(&sendPacket, &huart1, &hcrc);
 8001578:	4a07      	ldr	r2, [pc, #28]	@ (8001598 <main+0x7b4>)
 800157a:	4908      	ldr	r1, [pc, #32]	@ (800159c <main+0x7b8>)
 800157c:	4805      	ldr	r0, [pc, #20]	@ (8001594 <main+0x7b0>)
 800157e:	f000 fa99 	bl	8001ab4 <send_packet>
	  for (uint8_t i = 0; i < NUM_OF_SENSORS; i++) {
 8001582:	e55b      	b.n	800103c <main+0x258>
 8001584:	40700000 	.word	0x40700000
 8001588:	2000027c 	.word	0x2000027c
 800158c:	2000028c 	.word	0x2000028c
 8001590:	20000030 	.word	0x20000030
 8001594:	20000028 	.word	0x20000028
 8001598:	20000050 	.word	0x20000050
 800159c:	20000154 	.word	0x20000154
 80015a0:	20000040 	.word	0x20000040

080015a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b094      	sub	sp, #80	@ 0x50
 80015a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015aa:	f107 0318 	add.w	r3, r7, #24
 80015ae:	2238      	movs	r2, #56	@ 0x38
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f004 fd7c 	bl	80060b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
 80015c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015c6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80015ca:	f002 fa99 	bl	8003b00 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80015ce:	230a      	movs	r3, #10
 80015d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015d6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015d8:	2340      	movs	r3, #64	@ 0x40
 80015da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80015dc:	2301      	movs	r3, #1
 80015de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015e4:	f107 0318 	add.w	r3, r7, #24
 80015e8:	4618      	mov	r0, r3
 80015ea:	f002 fb3d 	bl	8003c68 <HAL_RCC_OscConfig>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80015f4:	f000 f9e8 	bl	80019c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f8:	230f      	movs	r3, #15
 80015fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015fc:	2301      	movs	r3, #1
 80015fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001600:	2300      	movs	r3, #0
 8001602:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001604:	2300      	movs	r3, #0
 8001606:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	2100      	movs	r1, #0
 8001610:	4618      	mov	r0, r3
 8001612:	f002 fe3b 	bl	800428c <HAL_RCC_ClockConfig>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800161c:	f000 f9d4 	bl	80019c8 <Error_Handler>
  }
}
 8001620:	bf00      	nop
 8001622:	3750      	adds	r7, #80	@ 0x50
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800162c:	4b0d      	ldr	r3, [pc, #52]	@ (8001664 <MX_CRC_Init+0x3c>)
 800162e:	4a0e      	ldr	r2, [pc, #56]	@ (8001668 <MX_CRC_Init+0x40>)
 8001630:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001632:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <MX_CRC_Init+0x3c>)
 8001634:	2200      	movs	r2, #0
 8001636:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001638:	4b0a      	ldr	r3, [pc, #40]	@ (8001664 <MX_CRC_Init+0x3c>)
 800163a:	2200      	movs	r2, #0
 800163c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800163e:	4b09      	ldr	r3, [pc, #36]	@ (8001664 <MX_CRC_Init+0x3c>)
 8001640:	2200      	movs	r2, #0
 8001642:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001644:	4b07      	ldr	r3, [pc, #28]	@ (8001664 <MX_CRC_Init+0x3c>)
 8001646:	2200      	movs	r2, #0
 8001648:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800164a:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <MX_CRC_Init+0x3c>)
 800164c:	2201      	movs	r2, #1
 800164e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001650:	4804      	ldr	r0, [pc, #16]	@ (8001664 <MX_CRC_Init+0x3c>)
 8001652:	f000 fe63 	bl	800231c <HAL_CRC_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800165c:	f000 f9b4 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000050 	.word	0x20000050
 8001668:	40023000 	.word	0x40023000

0800166c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001670:	4b1f      	ldr	r3, [pc, #124]	@ (80016f0 <MX_FDCAN1_Init+0x84>)
 8001672:	4a20      	ldr	r2, [pc, #128]	@ (80016f4 <MX_FDCAN1_Init+0x88>)
 8001674:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001676:	4b1e      	ldr	r3, [pc, #120]	@ (80016f0 <MX_FDCAN1_Init+0x84>)
 8001678:	2200      	movs	r2, #0
 800167a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800167c:	4b1c      	ldr	r3, [pc, #112]	@ (80016f0 <MX_FDCAN1_Init+0x84>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001682:	4b1b      	ldr	r3, [pc, #108]	@ (80016f0 <MX_FDCAN1_Init+0x84>)
 8001684:	2200      	movs	r2, #0
 8001686:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001688:	4b19      	ldr	r3, [pc, #100]	@ (80016f0 <MX_FDCAN1_Init+0x84>)
 800168a:	2200      	movs	r2, #0
 800168c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800168e:	4b18      	ldr	r3, [pc, #96]	@ (80016f0 <MX_FDCAN1_Init+0x84>)
 8001690:	2200      	movs	r2, #0
 8001692:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001694:	4b16      	ldr	r3, [pc, #88]	@ (80016f0 <MX_FDCAN1_Init+0x84>)
 8001696:	2200      	movs	r2, #0
 8001698:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800169a:	4b15      	ldr	r3, [pc, #84]	@ (80016f0 <MX_FDCAN1_Init+0x84>)
 800169c:	2210      	movs	r2, #16
 800169e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80016a0:	4b13      	ldr	r3, [pc, #76]	@ (80016f0 <MX_FDCAN1_Init+0x84>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 80016a6:	4b12      	ldr	r3, [pc, #72]	@ (80016f0 <MX_FDCAN1_Init+0x84>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 80016ac:	4b10      	ldr	r3, [pc, #64]	@ (80016f0 <MX_FDCAN1_Init+0x84>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80016b2:	4b0f      	ldr	r3, [pc, #60]	@ (80016f0 <MX_FDCAN1_Init+0x84>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80016b8:	4b0d      	ldr	r3, [pc, #52]	@ (80016f0 <MX_FDCAN1_Init+0x84>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80016be:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <MX_FDCAN1_Init+0x84>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80016c4:	4b0a      	ldr	r3, [pc, #40]	@ (80016f0 <MX_FDCAN1_Init+0x84>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80016ca:	4b09      	ldr	r3, [pc, #36]	@ (80016f0 <MX_FDCAN1_Init+0x84>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80016d0:	4b07      	ldr	r3, [pc, #28]	@ (80016f0 <MX_FDCAN1_Init+0x84>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80016d6:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <MX_FDCAN1_Init+0x84>)
 80016d8:	2200      	movs	r2, #0
 80016da:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80016dc:	4804      	ldr	r0, [pc, #16]	@ (80016f0 <MX_FDCAN1_Init+0x84>)
 80016de:	f001 f8dd 	bl	800289c <HAL_FDCAN_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80016e8:	f000 f96e 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000074 	.word	0x20000074
 80016f4:	40006400 	.word	0x40006400

080016f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016fc:	4b1b      	ldr	r3, [pc, #108]	@ (800176c <MX_I2C1_Init+0x74>)
 80016fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001770 <MX_I2C1_Init+0x78>)
 8001700:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8001702:	4b1a      	ldr	r3, [pc, #104]	@ (800176c <MX_I2C1_Init+0x74>)
 8001704:	4a1b      	ldr	r2, [pc, #108]	@ (8001774 <MX_I2C1_Init+0x7c>)
 8001706:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001708:	4b18      	ldr	r3, [pc, #96]	@ (800176c <MX_I2C1_Init+0x74>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800170e:	4b17      	ldr	r3, [pc, #92]	@ (800176c <MX_I2C1_Init+0x74>)
 8001710:	2201      	movs	r2, #1
 8001712:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001714:	4b15      	ldr	r3, [pc, #84]	@ (800176c <MX_I2C1_Init+0x74>)
 8001716:	2200      	movs	r2, #0
 8001718:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800171a:	4b14      	ldr	r3, [pc, #80]	@ (800176c <MX_I2C1_Init+0x74>)
 800171c:	2200      	movs	r2, #0
 800171e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001720:	4b12      	ldr	r3, [pc, #72]	@ (800176c <MX_I2C1_Init+0x74>)
 8001722:	2200      	movs	r2, #0
 8001724:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001726:	4b11      	ldr	r3, [pc, #68]	@ (800176c <MX_I2C1_Init+0x74>)
 8001728:	2200      	movs	r2, #0
 800172a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800172c:	4b0f      	ldr	r3, [pc, #60]	@ (800176c <MX_I2C1_Init+0x74>)
 800172e:	2200      	movs	r2, #0
 8001730:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001732:	480e      	ldr	r0, [pc, #56]	@ (800176c <MX_I2C1_Init+0x74>)
 8001734:	f001 fbfc 	bl	8002f30 <HAL_I2C_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800173e:	f000 f943 	bl	80019c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001742:	2100      	movs	r1, #0
 8001744:	4809      	ldr	r0, [pc, #36]	@ (800176c <MX_I2C1_Init+0x74>)
 8001746:	f002 f943 	bl	80039d0 <HAL_I2CEx_ConfigAnalogFilter>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001750:	f000 f93a 	bl	80019c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001754:	2100      	movs	r1, #0
 8001756:	4805      	ldr	r0, [pc, #20]	@ (800176c <MX_I2C1_Init+0x74>)
 8001758:	f002 f985 	bl	8003a66 <HAL_I2CEx_ConfigDigitalFilter>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001762:	f000 f931 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200000d8 	.word	0x200000d8
 8001770:	40005400 	.word	0x40005400
 8001774:	00503d58 	.word	0x00503d58

08001778 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800177c:	4b12      	ldr	r3, [pc, #72]	@ (80017c8 <MX_RTC_Init+0x50>)
 800177e:	4a13      	ldr	r2, [pc, #76]	@ (80017cc <MX_RTC_Init+0x54>)
 8001780:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001782:	4b11      	ldr	r3, [pc, #68]	@ (80017c8 <MX_RTC_Init+0x50>)
 8001784:	2200      	movs	r2, #0
 8001786:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001788:	4b0f      	ldr	r3, [pc, #60]	@ (80017c8 <MX_RTC_Init+0x50>)
 800178a:	227f      	movs	r2, #127	@ 0x7f
 800178c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800178e:	4b0e      	ldr	r3, [pc, #56]	@ (80017c8 <MX_RTC_Init+0x50>)
 8001790:	22ff      	movs	r2, #255	@ 0xff
 8001792:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001794:	4b0c      	ldr	r3, [pc, #48]	@ (80017c8 <MX_RTC_Init+0x50>)
 8001796:	2200      	movs	r2, #0
 8001798:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800179a:	4b0b      	ldr	r3, [pc, #44]	@ (80017c8 <MX_RTC_Init+0x50>)
 800179c:	2200      	movs	r2, #0
 800179e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80017a0:	4b09      	ldr	r3, [pc, #36]	@ (80017c8 <MX_RTC_Init+0x50>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80017a6:	4b08      	ldr	r3, [pc, #32]	@ (80017c8 <MX_RTC_Init+0x50>)
 80017a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017ac:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80017ae:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <MX_RTC_Init+0x50>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017b4:	4804      	ldr	r0, [pc, #16]	@ (80017c8 <MX_RTC_Init+0x50>)
 80017b6:	f003 f975 	bl	8004aa4 <HAL_RTC_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 80017c0:	f000 f902 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	2000012c 	.word	0x2000012c
 80017cc:	40002800 	.word	0x40002800

080017d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017d4:	4b22      	ldr	r3, [pc, #136]	@ (8001860 <MX_USART1_UART_Init+0x90>)
 80017d6:	4a23      	ldr	r2, [pc, #140]	@ (8001864 <MX_USART1_UART_Init+0x94>)
 80017d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017da:	4b21      	ldr	r3, [pc, #132]	@ (8001860 <MX_USART1_UART_Init+0x90>)
 80017dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001860 <MX_USART1_UART_Init+0x90>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001860 <MX_USART1_UART_Init+0x90>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001860 <MX_USART1_UART_Init+0x90>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001860 <MX_USART1_UART_Init+0x90>)
 80017f6:	220c      	movs	r2, #12
 80017f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fa:	4b19      	ldr	r3, [pc, #100]	@ (8001860 <MX_USART1_UART_Init+0x90>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001800:	4b17      	ldr	r3, [pc, #92]	@ (8001860 <MX_USART1_UART_Init+0x90>)
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001806:	4b16      	ldr	r3, [pc, #88]	@ (8001860 <MX_USART1_UART_Init+0x90>)
 8001808:	2200      	movs	r2, #0
 800180a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800180c:	4b14      	ldr	r3, [pc, #80]	@ (8001860 <MX_USART1_UART_Init+0x90>)
 800180e:	2200      	movs	r2, #0
 8001810:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001812:	4b13      	ldr	r3, [pc, #76]	@ (8001860 <MX_USART1_UART_Init+0x90>)
 8001814:	2200      	movs	r2, #0
 8001816:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001818:	4811      	ldr	r0, [pc, #68]	@ (8001860 <MX_USART1_UART_Init+0x90>)
 800181a:	f003 fa60 	bl	8004cde <HAL_UART_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001824:	f000 f8d0 	bl	80019c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001828:	2100      	movs	r1, #0
 800182a:	480d      	ldr	r0, [pc, #52]	@ (8001860 <MX_USART1_UART_Init+0x90>)
 800182c:	f004 fb75 	bl	8005f1a <HAL_UARTEx_SetTxFifoThreshold>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001836:	f000 f8c7 	bl	80019c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800183a:	2100      	movs	r1, #0
 800183c:	4808      	ldr	r0, [pc, #32]	@ (8001860 <MX_USART1_UART_Init+0x90>)
 800183e:	f004 fbaa 	bl	8005f96 <HAL_UARTEx_SetRxFifoThreshold>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001848:	f000 f8be 	bl	80019c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800184c:	4804      	ldr	r0, [pc, #16]	@ (8001860 <MX_USART1_UART_Init+0x90>)
 800184e:	f004 fb2b 	bl	8005ea8 <HAL_UARTEx_DisableFifoMode>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001858:	f000 f8b6 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000154 	.word	0x20000154
 8001864:	40013800 	.word	0x40013800

08001868 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800186c:	4b22      	ldr	r3, [pc, #136]	@ (80018f8 <MX_USART2_UART_Init+0x90>)
 800186e:	4a23      	ldr	r2, [pc, #140]	@ (80018fc <MX_USART2_UART_Init+0x94>)
 8001870:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001872:	4b21      	ldr	r3, [pc, #132]	@ (80018f8 <MX_USART2_UART_Init+0x90>)
 8001874:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001878:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800187a:	4b1f      	ldr	r3, [pc, #124]	@ (80018f8 <MX_USART2_UART_Init+0x90>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001880:	4b1d      	ldr	r3, [pc, #116]	@ (80018f8 <MX_USART2_UART_Init+0x90>)
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001886:	4b1c      	ldr	r3, [pc, #112]	@ (80018f8 <MX_USART2_UART_Init+0x90>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800188c:	4b1a      	ldr	r3, [pc, #104]	@ (80018f8 <MX_USART2_UART_Init+0x90>)
 800188e:	220c      	movs	r2, #12
 8001890:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001892:	4b19      	ldr	r3, [pc, #100]	@ (80018f8 <MX_USART2_UART_Init+0x90>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001898:	4b17      	ldr	r3, [pc, #92]	@ (80018f8 <MX_USART2_UART_Init+0x90>)
 800189a:	2200      	movs	r2, #0
 800189c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800189e:	4b16      	ldr	r3, [pc, #88]	@ (80018f8 <MX_USART2_UART_Init+0x90>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018a4:	4b14      	ldr	r3, [pc, #80]	@ (80018f8 <MX_USART2_UART_Init+0x90>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018aa:	4b13      	ldr	r3, [pc, #76]	@ (80018f8 <MX_USART2_UART_Init+0x90>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018b0:	4811      	ldr	r0, [pc, #68]	@ (80018f8 <MX_USART2_UART_Init+0x90>)
 80018b2:	f003 fa14 	bl	8004cde <HAL_UART_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80018bc:	f000 f884 	bl	80019c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018c0:	2100      	movs	r1, #0
 80018c2:	480d      	ldr	r0, [pc, #52]	@ (80018f8 <MX_USART2_UART_Init+0x90>)
 80018c4:	f004 fb29 	bl	8005f1a <HAL_UARTEx_SetTxFifoThreshold>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80018ce:	f000 f87b 	bl	80019c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018d2:	2100      	movs	r1, #0
 80018d4:	4808      	ldr	r0, [pc, #32]	@ (80018f8 <MX_USART2_UART_Init+0x90>)
 80018d6:	f004 fb5e 	bl	8005f96 <HAL_UARTEx_SetRxFifoThreshold>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80018e0:	f000 f872 	bl	80019c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80018e4:	4804      	ldr	r0, [pc, #16]	@ (80018f8 <MX_USART2_UART_Init+0x90>)
 80018e6:	f004 fadf 	bl	8005ea8 <HAL_UARTEx_DisableFifoMode>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80018f0:	f000 f86a 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200001e8 	.word	0x200001e8
 80018fc:	40004400 	.word	0x40004400

08001900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b088      	sub	sp, #32
 8001904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001906:	f107 030c 	add.w	r3, r7, #12
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]
 8001914:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001916:	4b2a      	ldr	r3, [pc, #168]	@ (80019c0 <MX_GPIO_Init+0xc0>)
 8001918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800191a:	4a29      	ldr	r2, [pc, #164]	@ (80019c0 <MX_GPIO_Init+0xc0>)
 800191c:	f043 0304 	orr.w	r3, r3, #4
 8001920:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001922:	4b27      	ldr	r3, [pc, #156]	@ (80019c0 <MX_GPIO_Init+0xc0>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001926:	f003 0304 	and.w	r3, r3, #4
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800192e:	4b24      	ldr	r3, [pc, #144]	@ (80019c0 <MX_GPIO_Init+0xc0>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001932:	4a23      	ldr	r2, [pc, #140]	@ (80019c0 <MX_GPIO_Init+0xc0>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800193a:	4b21      	ldr	r3, [pc, #132]	@ (80019c0 <MX_GPIO_Init+0xc0>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	4b1e      	ldr	r3, [pc, #120]	@ (80019c0 <MX_GPIO_Init+0xc0>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194a:	4a1d      	ldr	r2, [pc, #116]	@ (80019c0 <MX_GPIO_Init+0xc0>)
 800194c:	f043 0302 	orr.w	r3, r3, #2
 8001950:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001952:	4b1b      	ldr	r3, [pc, #108]	@ (80019c0 <MX_GPIO_Init+0xc0>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	603b      	str	r3, [r7, #0]
 800195c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8001964:	4817      	ldr	r0, [pc, #92]	@ (80019c4 <MX_GPIO_Init+0xc4>)
 8001966:	f001 facb 	bl	8002f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8001970:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001974:	f001 fac4 	bl	8002f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001978:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800197c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197e:	2301      	movs	r3, #1
 8001980:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001986:	2300      	movs	r3, #0
 8001988:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800198a:	f107 030c 	add.w	r3, r7, #12
 800198e:	4619      	mov	r1, r3
 8001990:	480c      	ldr	r0, [pc, #48]	@ (80019c4 <MX_GPIO_Init+0xc4>)
 8001992:	f001 f933 	bl	8002bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001996:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800199a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199c:	2301      	movs	r3, #1
 800199e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a8:	f107 030c 	add.w	r3, r7, #12
 80019ac:	4619      	mov	r1, r3
 80019ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019b2:	f001 f923 	bl	8002bfc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019b6:	bf00      	nop
 80019b8:	3720      	adds	r7, #32
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40021000 	.word	0x40021000
 80019c4:	48000800 	.word	0x48000800

080019c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019cc:	b672      	cpsid	i
}
 80019ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <Error_Handler+0x8>

080019d4 <receive_packet>:
	0x00,
	0,
	NULL
};

struct Packet* receive_packet(UART_HandleTypeDef *huart, CRC_HandleTypeDef *hcrc) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
	// Wait for frame start
	uint8_t frameStart = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	73fb      	strb	r3, [r7, #15]
	if(HAL_UART_Receive(huart, &frameStart, FRAME_START_SIZE, 100) != HAL_OK) {
 80019e2:	f107 010f 	add.w	r1, r7, #15
 80019e6:	2364      	movs	r3, #100	@ 0x64
 80019e8:	2201      	movs	r2, #1
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f003 fa55 	bl	8004e9a <HAL_UART_Receive>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <receive_packet+0x26>
		return &receiveInstance;
 80019f6:	4b2c      	ldr	r3, [pc, #176]	@ (8001aa8 <receive_packet+0xd4>)
 80019f8:	e052      	b.n	8001aa0 <receive_packet+0xcc>
	}

	if(frameStart != FRAME_START) {
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	2b7e      	cmp	r3, #126	@ 0x7e
 80019fe:	d001      	beq.n	8001a04 <receive_packet+0x30>
		return &receiveInstance;
 8001a00:	4b29      	ldr	r3, [pc, #164]	@ (8001aa8 <receive_packet+0xd4>)
 8001a02:	e04d      	b.n	8001aa0 <receive_packet+0xcc>
	}

	// Receive header
	if(HAL_UART_Receive(huart, receiveData, HEADER_SIZE, 100) != HAL_OK) {
 8001a04:	2364      	movs	r3, #100	@ 0x64
 8001a06:	2202      	movs	r2, #2
 8001a08:	4928      	ldr	r1, [pc, #160]	@ (8001aac <receive_packet+0xd8>)
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f003 fa45 	bl	8004e9a <HAL_UART_Receive>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <receive_packet+0x46>
		return &receiveInstance;
 8001a16:	4b24      	ldr	r3, [pc, #144]	@ (8001aa8 <receive_packet+0xd4>)
 8001a18:	e042      	b.n	8001aa0 <receive_packet+0xcc>
	}

	receiveInstance.type = (char) receiveData[0];
 8001a1a:	4b24      	ldr	r3, [pc, #144]	@ (8001aac <receive_packet+0xd8>)
 8001a1c:	781a      	ldrb	r2, [r3, #0]
 8001a1e:	4b22      	ldr	r3, [pc, #136]	@ (8001aa8 <receive_packet+0xd4>)
 8001a20:	701a      	strb	r2, [r3, #0]
	receiveInstance.size = receiveData[1];
 8001a22:	4b22      	ldr	r3, [pc, #136]	@ (8001aac <receive_packet+0xd8>)
 8001a24:	785a      	ldrb	r2, [r3, #1]
 8001a26:	4b20      	ldr	r3, [pc, #128]	@ (8001aa8 <receive_packet+0xd4>)
 8001a28:	705a      	strb	r2, [r3, #1]

	if (receiveInstance.size == 0) {
 8001a2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa8 <receive_packet+0xd4>)
 8001a2c:	785b      	ldrb	r3, [r3, #1]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <receive_packet+0x62>
		return &receiveInstance;
 8001a32:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa8 <receive_packet+0xd4>)
 8001a34:	e034      	b.n	8001aa0 <receive_packet+0xcc>
	}

	// Read data
	if(HAL_UART_Receive_DMA(huart, &receiveData[HEADER_SIZE], receiveInstance.size) != HAL_OK) {
 8001a36:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa8 <receive_packet+0xd4>)
 8001a38:	785b      	ldrb	r3, [r3, #1]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	491c      	ldr	r1, [pc, #112]	@ (8001ab0 <receive_packet+0xdc>)
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f003 faf4 	bl	800502c <HAL_UART_Receive_DMA>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <receive_packet+0x7a>
		return &receiveInstance;
 8001a4a:	4b17      	ldr	r3, [pc, #92]	@ (8001aa8 <receive_packet+0xd4>)
 8001a4c:	e028      	b.n	8001aa0 <receive_packet+0xcc>
	}
	receiveInstance.payload = &receiveData[HEADER_SIZE];
 8001a4e:	4b16      	ldr	r3, [pc, #88]	@ (8001aa8 <receive_packet+0xd4>)
 8001a50:	4a17      	ldr	r2, [pc, #92]	@ (8001ab0 <receive_packet+0xdc>)
 8001a52:	605a      	str	r2, [r3, #4]

	// Read checksum
	if(HAL_UART_Receive_DMA(huart, &receiveData[HEADER_SIZE + receiveInstance.size], CHECKSUM_SIZE) != HAL_OK) {
 8001a54:	4b14      	ldr	r3, [pc, #80]	@ (8001aa8 <receive_packet+0xd4>)
 8001a56:	785b      	ldrb	r3, [r3, #1]
 8001a58:	3302      	adds	r3, #2
 8001a5a:	4a14      	ldr	r2, [pc, #80]	@ (8001aac <receive_packet+0xd8>)
 8001a5c:	4413      	add	r3, r2
 8001a5e:	2204      	movs	r2, #4
 8001a60:	4619      	mov	r1, r3
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f003 fae2 	bl	800502c <HAL_UART_Receive_DMA>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <receive_packet+0x9e>
		return &receiveInstance;
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa8 <receive_packet+0xd4>)
 8001a70:	e016      	b.n	8001aa0 <receive_packet+0xcc>

	// Perform checksum
	uint32_t calculatedCrc = HAL_CRC_Calculate(
		hcrc,
		(uint32_t *) receiveData,
		HEADER_SIZE + receiveInstance.size
 8001a72:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa8 <receive_packet+0xd4>)
 8001a74:	785b      	ldrb	r3, [r3, #1]
 8001a76:	3302      	adds	r3, #2
	uint32_t calculatedCrc = HAL_CRC_Calculate(
 8001a78:	461a      	mov	r2, r3
 8001a7a:	490c      	ldr	r1, [pc, #48]	@ (8001aac <receive_packet+0xd8>)
 8001a7c:	6838      	ldr	r0, [r7, #0]
 8001a7e:	f000 fcb1 	bl	80023e4 <HAL_CRC_Calculate>
 8001a82:	6178      	str	r0, [r7, #20]
	);

	uint32_t receivedCrc = *(uint32_t *) (&receiveData[HEADER_SIZE + receiveInstance.size]);
 8001a84:	4b08      	ldr	r3, [pc, #32]	@ (8001aa8 <receive_packet+0xd4>)
 8001a86:	785b      	ldrb	r3, [r3, #1]
 8001a88:	3302      	adds	r3, #2
 8001a8a:	4a08      	ldr	r2, [pc, #32]	@ (8001aac <receive_packet+0xd8>)
 8001a8c:	4413      	add	r3, r2
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	613b      	str	r3, [r7, #16]
	if (receivedCrc != calculatedCrc) {
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d001      	beq.n	8001a9e <receive_packet+0xca>
		return &receiveInstance;
 8001a9a:	4b03      	ldr	r3, [pc, #12]	@ (8001aa8 <receive_packet+0xd4>)
 8001a9c:	e000      	b.n	8001aa0 <receive_packet+0xcc>
	}

	return &receiveInstance;
 8001a9e:	4b02      	ldr	r3, [pc, #8]	@ (8001aa8 <receive_packet+0xd4>)
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	200003a4 	.word	0x200003a4
 8001aac:	2000029c 	.word	0x2000029c
 8001ab0:	2000029e 	.word	0x2000029e

08001ab4 <send_packet>:

void send_packet(struct Packet *p, UART_HandleTypeDef *huart, CRC_HandleTypeDef *hcrc) {
 8001ab4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ab8:	b08d      	sub	sp, #52	@ 0x34
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	60f8      	str	r0, [r7, #12]
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	466b      	mov	r3, sp
 8001ac4:	461e      	mov	r6, r3
	size_t packetSize = HEADER_SIZE + p->size;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	785b      	ldrb	r3, [r3, #1]
 8001aca:	3302      	adds	r3, #2
 8001acc:	62bb      	str	r3, [r7, #40]	@ 0x28
	size_t totalPacketSize = FRAME_START_SIZE + packetSize + CHECKSUM_SIZE;
 8001ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ad0:	3305      	adds	r3, #5
 8001ad2:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t pData[totalPacketSize];
 8001ad4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	623b      	str	r3, [r7, #32]
 8001adc:	2300      	movs	r3, #0
 8001ade:	4688      	mov	r8, r1
 8001ae0:	4699      	mov	r9, r3
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001aee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001af2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001af6:	2300      	movs	r3, #0
 8001af8:	460c      	mov	r4, r1
 8001afa:	461d      	mov	r5, r3
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	00eb      	lsls	r3, r5, #3
 8001b06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b0a:	00e2      	lsls	r2, r4, #3
 8001b0c:	1dcb      	adds	r3, r1, #7
 8001b0e:	08db      	lsrs	r3, r3, #3
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	ebad 0d03 	sub.w	sp, sp, r3
 8001b16:	466b      	mov	r3, sp
 8001b18:	3300      	adds	r3, #0
 8001b1a:	61fb      	str	r3, [r7, #28]

	pData[0] = FRAME_START;
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	227e      	movs	r2, #126	@ 0x7e
 8001b20:	701a      	strb	r2, [r3, #0]
	pData[1] = (uint8_t) p->type;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	781a      	ldrb	r2, [r3, #0]
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	705a      	strb	r2, [r3, #1]
	pData[2] = p->size;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	785a      	ldrb	r2, [r3, #1]
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	709a      	strb	r2, [r3, #2]

	const uint8_t *data = p->payload;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	61bb      	str	r3, [r7, #24]
	for (uint8_t i = 0; i < p->size; i++) {
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001b3e:	e00e      	b.n	8001b5e <send_packet+0xaa>
		pData[FRAME_START_SIZE + HEADER_SIZE + i] = data[i];
 8001b40:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	441a      	add	r2, r3
 8001b48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b4c:	3303      	adds	r3, #3
 8001b4e:	7811      	ldrb	r1, [r2, #0]
 8001b50:	69fa      	ldr	r2, [r7, #28]
 8001b52:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < p->size; i++) {
 8001b54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b58:	3301      	adds	r3, #1
 8001b5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	785b      	ldrb	r3, [r3, #1]
 8001b62:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d3ea      	bcc.n	8001b40 <send_packet+0x8c>
	}

	uint32_t crc = HAL_CRC_Calculate(hcrc, (uint32_t *) &pData[1], packetSize);
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b70:	4619      	mov	r1, r3
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 fc36 	bl	80023e4 <HAL_CRC_Calculate>
 8001b78:	6178      	str	r0, [r7, #20]
	pData[totalPacketSize - 4] = (uint8_t) (crc & 0xFF);
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7c:	3b04      	subs	r3, #4
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	b2d1      	uxtb	r1, r2
 8001b82:	69fa      	ldr	r2, [r7, #28]
 8001b84:	54d1      	strb	r1, [r2, r3]
	pData[totalPacketSize - 3] = (uint8_t) ((crc >> 8) & 0xFF);
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	0a1a      	lsrs	r2, r3, #8
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8c:	3b03      	subs	r3, #3
 8001b8e:	b2d1      	uxtb	r1, r2
 8001b90:	69fa      	ldr	r2, [r7, #28]
 8001b92:	54d1      	strb	r1, [r2, r3]
	pData[totalPacketSize - 2] = (uint8_t) ((crc >> 16) & 0xFF);
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	0c1a      	lsrs	r2, r3, #16
 8001b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9a:	3b02      	subs	r3, #2
 8001b9c:	b2d1      	uxtb	r1, r2
 8001b9e:	69fa      	ldr	r2, [r7, #28]
 8001ba0:	54d1      	strb	r1, [r2, r3]
	pData[totalPacketSize - 1] = (uint8_t) ((crc >> 24) & 0xFF);
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	0e1a      	lsrs	r2, r3, #24
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	b2d1      	uxtb	r1, r2
 8001bac:	69fa      	ldr	r2, [r7, #28]
 8001bae:	54d1      	strb	r1, [r2, r3]

	HAL_UART_Transmit(huart, pData, totalPacketSize, 100);
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	2364      	movs	r3, #100	@ 0x64
 8001bb6:	69f9      	ldr	r1, [r7, #28]
 8001bb8:	68b8      	ldr	r0, [r7, #8]
 8001bba:	f003 f8e0 	bl	8004d7e <HAL_UART_Transmit>
 8001bbe:	46b5      	mov	sp, r6

}
 8001bc0:	bf00      	nop
 8001bc2:	3734      	adds	r7, #52	@ 0x34
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08001bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001c10 <HAL_MspInit+0x44>)
 8001bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bd6:	4a0e      	ldr	r2, [pc, #56]	@ (8001c10 <HAL_MspInit+0x44>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bde:	4b0c      	ldr	r3, [pc, #48]	@ (8001c10 <HAL_MspInit+0x44>)
 8001be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	607b      	str	r3, [r7, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bea:	4b09      	ldr	r3, [pc, #36]	@ (8001c10 <HAL_MspInit+0x44>)
 8001bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bee:	4a08      	ldr	r2, [pc, #32]	@ (8001c10 <HAL_MspInit+0x44>)
 8001bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bf6:	4b06      	ldr	r3, [pc, #24]	@ (8001c10 <HAL_MspInit+0x44>)
 8001bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bfe:	603b      	str	r3, [r7, #0]
 8001c00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001c02:	f002 f821 	bl	8003c48 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40021000 	.word	0x40021000

08001c14 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a0a      	ldr	r2, [pc, #40]	@ (8001c4c <HAL_CRC_MspInit+0x38>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d10b      	bne.n	8001c3e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001c26:	4b0a      	ldr	r3, [pc, #40]	@ (8001c50 <HAL_CRC_MspInit+0x3c>)
 8001c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c2a:	4a09      	ldr	r2, [pc, #36]	@ (8001c50 <HAL_CRC_MspInit+0x3c>)
 8001c2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c30:	6493      	str	r3, [r2, #72]	@ 0x48
 8001c32:	4b07      	ldr	r3, [pc, #28]	@ (8001c50 <HAL_CRC_MspInit+0x3c>)
 8001c34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001c3e:	bf00      	nop
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	40023000 	.word	0x40023000
 8001c50:	40021000 	.word	0x40021000

08001c54 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b09a      	sub	sp, #104	@ 0x68
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c6c:	f107 0310 	add.w	r3, r7, #16
 8001c70:	2244      	movs	r2, #68	@ 0x44
 8001c72:	2100      	movs	r1, #0
 8001c74:	4618      	mov	r0, r3
 8001c76:	f004 fa1b 	bl	80060b0 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a20      	ldr	r2, [pc, #128]	@ (8001d00 <HAL_FDCAN_MspInit+0xac>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d139      	bne.n	8001cf8 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001c84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c88:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001c8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c8e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c90:	f107 0310 	add.w	r3, r7, #16
 8001c94:	4618      	mov	r0, r3
 8001c96:	f002 fd15 	bl	80046c4 <HAL_RCCEx_PeriphCLKConfig>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001ca0:	f7ff fe92 	bl	80019c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001ca4:	4b17      	ldr	r3, [pc, #92]	@ (8001d04 <HAL_FDCAN_MspInit+0xb0>)
 8001ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca8:	4a16      	ldr	r2, [pc, #88]	@ (8001d04 <HAL_FDCAN_MspInit+0xb0>)
 8001caa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cae:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cb0:	4b14      	ldr	r3, [pc, #80]	@ (8001d04 <HAL_FDCAN_MspInit+0xb0>)
 8001cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cbc:	4b11      	ldr	r3, [pc, #68]	@ (8001d04 <HAL_FDCAN_MspInit+0xb0>)
 8001cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc0:	4a10      	ldr	r2, [pc, #64]	@ (8001d04 <HAL_FDCAN_MspInit+0xb0>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d04 <HAL_FDCAN_MspInit+0xb0>)
 8001cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001cd4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001cd8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001ce6:	2309      	movs	r3, #9
 8001ce8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001cee:	4619      	mov	r1, r3
 8001cf0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cf4:	f000 ff82 	bl	8002bfc <HAL_GPIO_Init>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8001cf8:	bf00      	nop
 8001cfa:	3768      	adds	r7, #104	@ 0x68
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40006400 	.word	0x40006400
 8001d04:	40021000 	.word	0x40021000

08001d08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b09c      	sub	sp, #112	@ 0x70
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d20:	f107 0318 	add.w	r3, r7, #24
 8001d24:	2244      	movs	r2, #68	@ 0x44
 8001d26:	2100      	movs	r1, #0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f004 f9c1 	bl	80060b0 <memset>
  if(hi2c->Instance==I2C1)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a2d      	ldr	r2, [pc, #180]	@ (8001de8 <HAL_I2C_MspInit+0xe0>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d153      	bne.n	8001de0 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d38:	2340      	movs	r3, #64	@ 0x40
 8001d3a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d40:	f107 0318 	add.w	r3, r7, #24
 8001d44:	4618      	mov	r0, r3
 8001d46:	f002 fcbd 	bl	80046c4 <HAL_RCCEx_PeriphCLKConfig>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001d50:	f7ff fe3a 	bl	80019c8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d54:	4b25      	ldr	r3, [pc, #148]	@ (8001dec <HAL_I2C_MspInit+0xe4>)
 8001d56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d58:	4a24      	ldr	r2, [pc, #144]	@ (8001dec <HAL_I2C_MspInit+0xe4>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d60:	4b22      	ldr	r3, [pc, #136]	@ (8001dec <HAL_I2C_MspInit+0xe4>)
 8001d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dec <HAL_I2C_MspInit+0xe4>)
 8001d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d70:	4a1e      	ldr	r2, [pc, #120]	@ (8001dec <HAL_I2C_MspInit+0xe4>)
 8001d72:	f043 0302 	orr.w	r3, r3, #2
 8001d76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d78:	4b1c      	ldr	r3, [pc, #112]	@ (8001dec <HAL_I2C_MspInit+0xe4>)
 8001d7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d88:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d8a:	2312      	movs	r3, #18
 8001d8c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d92:	2300      	movs	r3, #0
 8001d94:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d96:	2304      	movs	r3, #4
 8001d98:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001da4:	f000 ff2a 	bl	8002bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001da8:	2380      	movs	r3, #128	@ 0x80
 8001daa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dac:	2312      	movs	r3, #18
 8001dae:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db4:	2300      	movs	r3, #0
 8001db6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001db8:	2304      	movs	r3, #4
 8001dba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dbc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	480b      	ldr	r0, [pc, #44]	@ (8001df0 <HAL_I2C_MspInit+0xe8>)
 8001dc4:	f000 ff1a 	bl	8002bfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dc8:	4b08      	ldr	r3, [pc, #32]	@ (8001dec <HAL_I2C_MspInit+0xe4>)
 8001dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dcc:	4a07      	ldr	r2, [pc, #28]	@ (8001dec <HAL_I2C_MspInit+0xe4>)
 8001dce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001dd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dd4:	4b05      	ldr	r3, [pc, #20]	@ (8001dec <HAL_I2C_MspInit+0xe4>)
 8001dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001de0:	bf00      	nop
 8001de2:	3770      	adds	r7, #112	@ 0x70
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40005400 	.word	0x40005400
 8001dec:	40021000 	.word	0x40021000
 8001df0:	48000400 	.word	0x48000400

08001df4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b094      	sub	sp, #80	@ 0x50
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dfc:	f107 030c 	add.w	r3, r7, #12
 8001e00:	2244      	movs	r2, #68	@ 0x44
 8001e02:	2100      	movs	r1, #0
 8001e04:	4618      	mov	r0, r3
 8001e06:	f004 f953 	bl	80060b0 <memset>
  if(hrtc->Instance==RTC)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a15      	ldr	r2, [pc, #84]	@ (8001e64 <HAL_RTC_MspInit+0x70>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d123      	bne.n	8001e5c <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001e14:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001e18:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001e1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e1e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e20:	f107 030c 	add.w	r3, r7, #12
 8001e24:	4618      	mov	r0, r3
 8001e26:	f002 fc4d 	bl	80046c4 <HAL_RCCEx_PeriphCLKConfig>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001e30:	f7ff fdca 	bl	80019c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e34:	4b0c      	ldr	r3, [pc, #48]	@ (8001e68 <HAL_RTC_MspInit+0x74>)
 8001e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e3a:	4a0b      	ldr	r2, [pc, #44]	@ (8001e68 <HAL_RTC_MspInit+0x74>)
 8001e3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001e44:	4b08      	ldr	r3, [pc, #32]	@ (8001e68 <HAL_RTC_MspInit+0x74>)
 8001e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e48:	4a07      	ldr	r2, [pc, #28]	@ (8001e68 <HAL_RTC_MspInit+0x74>)
 8001e4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e50:	4b05      	ldr	r3, [pc, #20]	@ (8001e68 <HAL_RTC_MspInit+0x74>)
 8001e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001e5c:	bf00      	nop
 8001e5e:	3750      	adds	r7, #80	@ 0x50
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40002800 	.word	0x40002800
 8001e68:	40021000 	.word	0x40021000

08001e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b09c      	sub	sp, #112	@ 0x70
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e84:	f107 0318 	add.w	r3, r7, #24
 8001e88:	2244      	movs	r2, #68	@ 0x44
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f004 f90f 	bl	80060b0 <memset>
  if(huart->Instance==USART1)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a3c      	ldr	r2, [pc, #240]	@ (8001f88 <HAL_UART_MspInit+0x11c>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d136      	bne.n	8001f0a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ea4:	f107 0318 	add.w	r3, r7, #24
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f002 fc0b 	bl	80046c4 <HAL_RCCEx_PeriphCLKConfig>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001eb4:	f7ff fd88 	bl	80019c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001eb8:	4b34      	ldr	r3, [pc, #208]	@ (8001f8c <HAL_UART_MspInit+0x120>)
 8001eba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ebc:	4a33      	ldr	r2, [pc, #204]	@ (8001f8c <HAL_UART_MspInit+0x120>)
 8001ebe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ec2:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ec4:	4b31      	ldr	r3, [pc, #196]	@ (8001f8c <HAL_UART_MspInit+0x120>)
 8001ec6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ec8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ed0:	4b2e      	ldr	r3, [pc, #184]	@ (8001f8c <HAL_UART_MspInit+0x120>)
 8001ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed4:	4a2d      	ldr	r2, [pc, #180]	@ (8001f8c <HAL_UART_MspInit+0x120>)
 8001ed6:	f043 0304 	orr.w	r3, r3, #4
 8001eda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001edc:	4b2b      	ldr	r3, [pc, #172]	@ (8001f8c <HAL_UART_MspInit+0x120>)
 8001ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ee8:	2330      	movs	r3, #48	@ 0x30
 8001eea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eec:	2302      	movs	r3, #2
 8001eee:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ef8:	2307      	movs	r3, #7
 8001efa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001efc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001f00:	4619      	mov	r1, r3
 8001f02:	4823      	ldr	r0, [pc, #140]	@ (8001f90 <HAL_UART_MspInit+0x124>)
 8001f04:	f000 fe7a 	bl	8002bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f08:	e03a      	b.n	8001f80 <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART2)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a21      	ldr	r2, [pc, #132]	@ (8001f94 <HAL_UART_MspInit+0x128>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d135      	bne.n	8001f80 <HAL_UART_MspInit+0x114>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f14:	2302      	movs	r3, #2
 8001f16:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f1c:	f107 0318 	add.w	r3, r7, #24
 8001f20:	4618      	mov	r0, r3
 8001f22:	f002 fbcf 	bl	80046c4 <HAL_RCCEx_PeriphCLKConfig>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8001f2c:	f7ff fd4c 	bl	80019c8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f30:	4b16      	ldr	r3, [pc, #88]	@ (8001f8c <HAL_UART_MspInit+0x120>)
 8001f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f34:	4a15      	ldr	r2, [pc, #84]	@ (8001f8c <HAL_UART_MspInit+0x120>)
 8001f36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f3c:	4b13      	ldr	r3, [pc, #76]	@ (8001f8c <HAL_UART_MspInit+0x120>)
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f48:	4b10      	ldr	r3, [pc, #64]	@ (8001f8c <HAL_UART_MspInit+0x120>)
 8001f4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f4c:	4a0f      	ldr	r2, [pc, #60]	@ (8001f8c <HAL_UART_MspInit+0x120>)
 8001f4e:	f043 0302 	orr.w	r3, r3, #2
 8001f52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f54:	4b0d      	ldr	r3, [pc, #52]	@ (8001f8c <HAL_UART_MspInit+0x120>)
 8001f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001f60:	2318      	movs	r3, #24
 8001f62:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f64:	2302      	movs	r3, #2
 8001f66:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f70:	2307      	movs	r3, #7
 8001f72:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f74:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4807      	ldr	r0, [pc, #28]	@ (8001f98 <HAL_UART_MspInit+0x12c>)
 8001f7c:	f000 fe3e 	bl	8002bfc <HAL_GPIO_Init>
}
 8001f80:	bf00      	nop
 8001f82:	3770      	adds	r7, #112	@ 0x70
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40013800 	.word	0x40013800
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	48000800 	.word	0x48000800
 8001f94:	40004400 	.word	0x40004400
 8001f98:	48000400 	.word	0x48000400

08001f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fa0:	bf00      	nop
 8001fa2:	e7fd      	b.n	8001fa0 <NMI_Handler+0x4>

08001fa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fa8:	bf00      	nop
 8001faa:	e7fd      	b.n	8001fa8 <HardFault_Handler+0x4>

08001fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fb0:	bf00      	nop
 8001fb2:	e7fd      	b.n	8001fb0 <MemManage_Handler+0x4>

08001fb4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fb8:	bf00      	nop
 8001fba:	e7fd      	b.n	8001fb8 <BusFault_Handler+0x4>

08001fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc0:	bf00      	nop
 8001fc2:	e7fd      	b.n	8001fc0 <UsageFault_Handler+0x4>

08001fc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ff2:	f000 f891 	bl	8002118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002000:	4b06      	ldr	r3, [pc, #24]	@ (800201c <SystemInit+0x20>)
 8002002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002006:	4a05      	ldr	r2, [pc, #20]	@ (800201c <SystemInit+0x20>)
 8002008:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800200c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002020:	480d      	ldr	r0, [pc, #52]	@ (8002058 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002022:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002024:	f7ff ffea 	bl	8001ffc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002028:	480c      	ldr	r0, [pc, #48]	@ (800205c <LoopForever+0x6>)
  ldr r1, =_edata
 800202a:	490d      	ldr	r1, [pc, #52]	@ (8002060 <LoopForever+0xa>)
  ldr r2, =_sidata
 800202c:	4a0d      	ldr	r2, [pc, #52]	@ (8002064 <LoopForever+0xe>)
  movs r3, #0
 800202e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002030:	e002      	b.n	8002038 <LoopCopyDataInit>

08002032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002036:	3304      	adds	r3, #4

08002038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800203a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800203c:	d3f9      	bcc.n	8002032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800203e:	4a0a      	ldr	r2, [pc, #40]	@ (8002068 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002040:	4c0a      	ldr	r4, [pc, #40]	@ (800206c <LoopForever+0x16>)
  movs r3, #0
 8002042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002044:	e001      	b.n	800204a <LoopFillZerobss>

08002046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002048:	3204      	adds	r2, #4

0800204a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800204a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800204c:	d3fb      	bcc.n	8002046 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800204e:	f004 f837 	bl	80060c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002052:	f7fe fec7 	bl	8000de4 <main>

08002056 <LoopForever>:

LoopForever:
    b LoopForever
 8002056:	e7fe      	b.n	8002056 <LoopForever>
  ldr   r0, =_estack
 8002058:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800205c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002060:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002064:	080061cc 	.word	0x080061cc
  ldr r2, =_sbss
 8002068:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800206c:	200003b0 	.word	0x200003b0

08002070 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002070:	e7fe      	b.n	8002070 <ADC1_2_IRQHandler>

08002072 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800207c:	2003      	movs	r0, #3
 800207e:	f000 f91b 	bl	80022b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002082:	200f      	movs	r0, #15
 8002084:	f000 f80e 	bl	80020a4 <HAL_InitTick>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	71fb      	strb	r3, [r7, #7]
 8002092:	e001      	b.n	8002098 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002094:	f7ff fd9a 	bl	8001bcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002098:	79fb      	ldrb	r3, [r7, #7]

}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80020b0:	4b16      	ldr	r3, [pc, #88]	@ (800210c <HAL_InitTick+0x68>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d022      	beq.n	80020fe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80020b8:	4b15      	ldr	r3, [pc, #84]	@ (8002110 <HAL_InitTick+0x6c>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4b13      	ldr	r3, [pc, #76]	@ (800210c <HAL_InitTick+0x68>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80020c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80020c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020cc:	4618      	mov	r0, r3
 80020ce:	f000 f918 	bl	8002302 <HAL_SYSTICK_Config>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10f      	bne.n	80020f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b0f      	cmp	r3, #15
 80020dc:	d809      	bhi.n	80020f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020de:	2200      	movs	r2, #0
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	f04f 30ff 	mov.w	r0, #4294967295
 80020e6:	f000 f8f2 	bl	80022ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002114 <HAL_InitTick+0x70>)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	e007      	b.n	8002102 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	73fb      	strb	r3, [r7, #15]
 80020f6:	e004      	b.n	8002102 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	73fb      	strb	r3, [r7, #15]
 80020fc:	e001      	b.n	8002102 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002102:	7bfb      	ldrb	r3, [r7, #15]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20000008 	.word	0x20000008
 8002110:	20000000 	.word	0x20000000
 8002114:	20000004 	.word	0x20000004

08002118 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800211c:	4b05      	ldr	r3, [pc, #20]	@ (8002134 <HAL_IncTick+0x1c>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4b05      	ldr	r3, [pc, #20]	@ (8002138 <HAL_IncTick+0x20>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4413      	add	r3, r2
 8002126:	4a03      	ldr	r2, [pc, #12]	@ (8002134 <HAL_IncTick+0x1c>)
 8002128:	6013      	str	r3, [r2, #0]
}
 800212a:	bf00      	nop
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	200003ac 	.word	0x200003ac
 8002138:	20000008 	.word	0x20000008

0800213c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return uwTick;
 8002140:	4b03      	ldr	r3, [pc, #12]	@ (8002150 <HAL_GetTick+0x14>)
 8002142:	681b      	ldr	r3, [r3, #0]
}
 8002144:	4618      	mov	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	200003ac 	.word	0x200003ac

08002154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002164:	4b0c      	ldr	r3, [pc, #48]	@ (8002198 <__NVIC_SetPriorityGrouping+0x44>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002170:	4013      	ands	r3, r2
 8002172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800217c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002180:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002186:	4a04      	ldr	r2, [pc, #16]	@ (8002198 <__NVIC_SetPriorityGrouping+0x44>)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	60d3      	str	r3, [r2, #12]
}
 800218c:	bf00      	nop
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a0:	4b04      	ldr	r3, [pc, #16]	@ (80021b4 <__NVIC_GetPriorityGrouping+0x18>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	0a1b      	lsrs	r3, r3, #8
 80021a6:	f003 0307 	and.w	r3, r3, #7
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	6039      	str	r1, [r7, #0]
 80021c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	db0a      	blt.n	80021e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	490c      	ldr	r1, [pc, #48]	@ (8002204 <__NVIC_SetPriority+0x4c>)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	0112      	lsls	r2, r2, #4
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	440b      	add	r3, r1
 80021dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e0:	e00a      	b.n	80021f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	4908      	ldr	r1, [pc, #32]	@ (8002208 <__NVIC_SetPriority+0x50>)
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	3b04      	subs	r3, #4
 80021f0:	0112      	lsls	r2, r2, #4
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	440b      	add	r3, r1
 80021f6:	761a      	strb	r2, [r3, #24]
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	e000e100 	.word	0xe000e100
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800220c:	b480      	push	{r7}
 800220e:	b089      	sub	sp, #36	@ 0x24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f1c3 0307 	rsb	r3, r3, #7
 8002226:	2b04      	cmp	r3, #4
 8002228:	bf28      	it	cs
 800222a:	2304      	movcs	r3, #4
 800222c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3304      	adds	r3, #4
 8002232:	2b06      	cmp	r3, #6
 8002234:	d902      	bls.n	800223c <NVIC_EncodePriority+0x30>
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3b03      	subs	r3, #3
 800223a:	e000      	b.n	800223e <NVIC_EncodePriority+0x32>
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002240:	f04f 32ff 	mov.w	r2, #4294967295
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43da      	mvns	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	401a      	ands	r2, r3
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002254:	f04f 31ff 	mov.w	r1, #4294967295
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	fa01 f303 	lsl.w	r3, r1, r3
 800225e:	43d9      	mvns	r1, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002264:	4313      	orrs	r3, r2
         );
}
 8002266:	4618      	mov	r0, r3
 8002268:	3724      	adds	r7, #36	@ 0x24
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002284:	d301      	bcc.n	800228a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002286:	2301      	movs	r3, #1
 8002288:	e00f      	b.n	80022aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800228a:	4a0a      	ldr	r2, [pc, #40]	@ (80022b4 <SysTick_Config+0x40>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3b01      	subs	r3, #1
 8002290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002292:	210f      	movs	r1, #15
 8002294:	f04f 30ff 	mov.w	r0, #4294967295
 8002298:	f7ff ff8e 	bl	80021b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800229c:	4b05      	ldr	r3, [pc, #20]	@ (80022b4 <SysTick_Config+0x40>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022a2:	4b04      	ldr	r3, [pc, #16]	@ (80022b4 <SysTick_Config+0x40>)
 80022a4:	2207      	movs	r2, #7
 80022a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	e000e010 	.word	0xe000e010

080022b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ff47 	bl	8002154 <__NVIC_SetPriorityGrouping>
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b086      	sub	sp, #24
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	4603      	mov	r3, r0
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022dc:	f7ff ff5e 	bl	800219c <__NVIC_GetPriorityGrouping>
 80022e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	6978      	ldr	r0, [r7, #20]
 80022e8:	f7ff ff90 	bl	800220c <NVIC_EncodePriority>
 80022ec:	4602      	mov	r2, r0
 80022ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f2:	4611      	mov	r1, r2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff ff5f 	bl	80021b8 <__NVIC_SetPriority>
}
 80022fa:	bf00      	nop
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff ffb2 	bl	8002274 <SysTick_Config>
 8002310:	4603      	mov	r3, r0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e054      	b.n	80023d8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	7f5b      	ldrb	r3, [r3, #29]
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d105      	bne.n	8002344 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff fc68 	bl	8001c14 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2202      	movs	r2, #2
 8002348:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	791b      	ldrb	r3, [r3, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10c      	bne.n	800236c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a22      	ldr	r2, [pc, #136]	@ (80023e0 <HAL_CRC_Init+0xc4>)
 8002358:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0218 	bic.w	r2, r2, #24
 8002368:	609a      	str	r2, [r3, #8]
 800236a:	e00c      	b.n	8002386 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6899      	ldr	r1, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	461a      	mov	r2, r3
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f948 	bl	800260c <HAL_CRCEx_Polynomial_Set>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e028      	b.n	80023d8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	795b      	ldrb	r3, [r3, #5]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d105      	bne.n	800239a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f04f 32ff 	mov.w	r2, #4294967295
 8002396:	611a      	str	r2, [r3, #16]
 8002398:	e004      	b.n	80023a4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6912      	ldr	r2, [r2, #16]
 80023a2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695a      	ldr	r2, [r3, #20]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	699a      	ldr	r2, [r3, #24]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	04c11db7 	.word	0x04c11db7

080023e4 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80023f0:	2300      	movs	r3, #0
 80023f2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2202      	movs	r2, #2
 80023f8:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f042 0201 	orr.w	r2, r2, #1
 8002408:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	2b03      	cmp	r3, #3
 8002410:	d006      	beq.n	8002420 <HAL_CRC_Calculate+0x3c>
 8002412:	2b03      	cmp	r3, #3
 8002414:	d829      	bhi.n	800246a <HAL_CRC_Calculate+0x86>
 8002416:	2b01      	cmp	r3, #1
 8002418:	d019      	beq.n	800244e <HAL_CRC_Calculate+0x6a>
 800241a:	2b02      	cmp	r3, #2
 800241c:	d01e      	beq.n	800245c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800241e:	e024      	b.n	800246a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	e00a      	b.n	800243c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	441a      	add	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	3301      	adds	r3, #1
 800243a:	617b      	str	r3, [r7, #20]
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	429a      	cmp	r2, r3
 8002442:	d3f0      	bcc.n	8002426 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	613b      	str	r3, [r7, #16]
      break;
 800244c:	e00e      	b.n	800246c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	68b9      	ldr	r1, [r7, #8]
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 f812 	bl	800247c <CRC_Handle_8>
 8002458:	6138      	str	r0, [r7, #16]
      break;
 800245a:	e007      	b.n	800246c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	68b9      	ldr	r1, [r7, #8]
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 f899 	bl	8002598 <CRC_Handle_16>
 8002466:	6138      	str	r0, [r7, #16]
      break;
 8002468:	e000      	b.n	800246c <HAL_CRC_Calculate+0x88>
      break;
 800246a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2201      	movs	r2, #1
 8002470:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8002472:	693b      	ldr	r3, [r7, #16]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800247c:	b480      	push	{r7}
 800247e:	b089      	sub	sp, #36	@ 0x24
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002488:	2300      	movs	r3, #0
 800248a:	61fb      	str	r3, [r7, #28]
 800248c:	e023      	b.n	80024d6 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	4413      	add	r3, r2
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	3301      	adds	r3, #1
 80024a0:	68b9      	ldr	r1, [r7, #8]
 80024a2:	440b      	add	r3, r1
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80024a8:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	3302      	adds	r3, #2
 80024b0:	68b9      	ldr	r1, [r7, #8]
 80024b2:	440b      	add	r3, r1
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80024b8:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	3303      	adds	r3, #3
 80024c0:	68b9      	ldr	r1, [r7, #8]
 80024c2:	440b      	add	r3, r1
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80024cc:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80024ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	3301      	adds	r3, #1
 80024d4:	61fb      	str	r3, [r7, #28]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	089b      	lsrs	r3, r3, #2
 80024da:	69fa      	ldr	r2, [r7, #28]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d3d6      	bcc.n	800248e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d04d      	beq.n	8002586 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d107      	bne.n	8002504 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	4413      	add	r3, r2
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d116      	bne.n	800253c <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	4413      	add	r3, r2
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	021b      	lsls	r3, r3, #8
 800251a:	b21a      	sxth	r2, r3
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	3301      	adds	r3, #1
 8002522:	68b9      	ldr	r1, [r7, #8]
 8002524:	440b      	add	r3, r1
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	b21b      	sxth	r3, r3
 800252a:	4313      	orrs	r3, r2
 800252c:	b21b      	sxth	r3, r3
 800252e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	8b7a      	ldrh	r2, [r7, #26]
 800253a:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	2b03      	cmp	r3, #3
 8002544:	d11f      	bne.n	8002586 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	4413      	add	r3, r2
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	021b      	lsls	r3, r3, #8
 8002552:	b21a      	sxth	r2, r3
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	3301      	adds	r3, #1
 800255a:	68b9      	ldr	r1, [r7, #8]
 800255c:	440b      	add	r3, r1
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	b21b      	sxth	r3, r3
 8002562:	4313      	orrs	r3, r2
 8002564:	b21b      	sxth	r3, r3
 8002566:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	8b7a      	ldrh	r2, [r7, #26]
 8002572:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	3302      	adds	r3, #2
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	4413      	add	r3, r2
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	6812      	ldr	r2, [r2, #0]
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3724      	adds	r7, #36	@ 0x24
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8002598:	b480      	push	{r7}
 800259a:	b087      	sub	sp, #28
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]
 80025a8:	e013      	b.n	80025d2 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	4413      	add	r3, r2
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	041a      	lsls	r2, r3, #16
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	3302      	adds	r3, #2
 80025bc:	68b9      	ldr	r1, [r7, #8]
 80025be:	440b      	add	r3, r1
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	4619      	mov	r1, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	3301      	adds	r3, #1
 80025d0:	617b      	str	r3, [r7, #20]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	085b      	lsrs	r3, r3, #1
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d3e6      	bcc.n	80025aa <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d009      	beq.n	80025fa <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	4413      	add	r3, r2
 80025f4:	881a      	ldrh	r2, [r3, #0]
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
}
 8002600:	4618      	mov	r0, r3
 8002602:	371c      	adds	r7, #28
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800260c:	b480      	push	{r7}
 800260e:	b087      	sub	sp, #28
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002618:	2300      	movs	r3, #0
 800261a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800261c:	231f      	movs	r3, #31
 800261e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d102      	bne.n	8002630 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	75fb      	strb	r3, [r7, #23]
 800262e:	e063      	b.n	80026f8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002630:	bf00      	nop
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1e5a      	subs	r2, r3, #1
 8002636:	613a      	str	r2, [r7, #16]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d009      	beq.n	8002650 <HAL_CRCEx_Polynomial_Set+0x44>
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	f003 031f 	and.w	r3, r3, #31
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	fa22 f303 	lsr.w	r3, r2, r3
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f0      	beq.n	8002632 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b18      	cmp	r3, #24
 8002654:	d846      	bhi.n	80026e4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8002656:	a201      	add	r2, pc, #4	@ (adr r2, 800265c <HAL_CRCEx_Polynomial_Set+0x50>)
 8002658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265c:	080026eb 	.word	0x080026eb
 8002660:	080026e5 	.word	0x080026e5
 8002664:	080026e5 	.word	0x080026e5
 8002668:	080026e5 	.word	0x080026e5
 800266c:	080026e5 	.word	0x080026e5
 8002670:	080026e5 	.word	0x080026e5
 8002674:	080026e5 	.word	0x080026e5
 8002678:	080026e5 	.word	0x080026e5
 800267c:	080026d9 	.word	0x080026d9
 8002680:	080026e5 	.word	0x080026e5
 8002684:	080026e5 	.word	0x080026e5
 8002688:	080026e5 	.word	0x080026e5
 800268c:	080026e5 	.word	0x080026e5
 8002690:	080026e5 	.word	0x080026e5
 8002694:	080026e5 	.word	0x080026e5
 8002698:	080026e5 	.word	0x080026e5
 800269c:	080026cd 	.word	0x080026cd
 80026a0:	080026e5 	.word	0x080026e5
 80026a4:	080026e5 	.word	0x080026e5
 80026a8:	080026e5 	.word	0x080026e5
 80026ac:	080026e5 	.word	0x080026e5
 80026b0:	080026e5 	.word	0x080026e5
 80026b4:	080026e5 	.word	0x080026e5
 80026b8:	080026e5 	.word	0x080026e5
 80026bc:	080026c1 	.word	0x080026c1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	2b06      	cmp	r3, #6
 80026c4:	d913      	bls.n	80026ee <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80026ca:	e010      	b.n	80026ee <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	2b07      	cmp	r3, #7
 80026d0:	d90f      	bls.n	80026f2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80026d6:	e00c      	b.n	80026f2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	2b0f      	cmp	r3, #15
 80026dc:	d90b      	bls.n	80026f6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80026e2:	e008      	b.n	80026f6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	75fb      	strb	r3, [r7, #23]
        break;
 80026e8:	e006      	b.n	80026f8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80026ea:	bf00      	nop
 80026ec:	e004      	b.n	80026f8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80026ee:	bf00      	nop
 80026f0:	e002      	b.n	80026f8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80026f2:	bf00      	nop
 80026f4:	e000      	b.n	80026f8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80026f6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80026f8:	7dfb      	ldrb	r3, [r7, #23]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10d      	bne.n	800271a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f023 0118 	bic.w	r1, r3, #24
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	430a      	orrs	r2, r1
 8002718:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800271a:	7dfb      	ldrb	r3, [r7, #23]
}
 800271c:	4618      	mov	r0, r3
 800271e:	371c      	adds	r7, #28
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_DMA_Start_IT+0x20>
 8002744:	2302      	movs	r3, #2
 8002746:	e066      	b.n	8002816 <HAL_DMA_Start_IT+0xee>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b01      	cmp	r3, #1
 800275a:	d155      	bne.n	8002808 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2202      	movs	r2, #2
 8002760:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0201 	bic.w	r2, r2, #1
 8002778:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	68b9      	ldr	r1, [r7, #8]
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f000 f84c 	bl	800281e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278a:	2b00      	cmp	r3, #0
 800278c:	d008      	beq.n	80027a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f042 020e 	orr.w	r2, r2, #14
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	e00f      	b.n	80027c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0204 	bic.w	r2, r2, #4
 80027ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 020a 	orr.w	r2, r2, #10
 80027be:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d007      	beq.n	80027de <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027dc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d007      	beq.n	80027f6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027f4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f042 0201 	orr.w	r2, r2, #1
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	e005      	b.n	8002814 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002810:	2302      	movs	r3, #2
 8002812:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002814:	7dfb      	ldrb	r3, [r7, #23]
}
 8002816:	4618      	mov	r0, r3
 8002818:	3718      	adds	r7, #24
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800281e:	b480      	push	{r7}
 8002820:	b085      	sub	sp, #20
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
 800282a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002834:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800283a:	2b00      	cmp	r3, #0
 800283c:	d004      	beq.n	8002848 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002846:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284c:	f003 021f 	and.w	r2, r3, #31
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002854:	2101      	movs	r1, #1
 8002856:	fa01 f202 	lsl.w	r2, r1, r2
 800285a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	2b10      	cmp	r3, #16
 800286a:	d108      	bne.n	800287e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800287c:	e007      	b.n	800288e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	60da      	str	r2, [r3, #12]
}
 800288e:	bf00      	nop
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e147      	b.n	8002b3e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d106      	bne.n	80028c8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7ff f9c6 	bl	8001c54 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699a      	ldr	r2, [r3, #24]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0210 	bic.w	r2, r2, #16
 80028d6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028d8:	f7ff fc30 	bl	800213c <HAL_GetTick>
 80028dc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80028de:	e012      	b.n	8002906 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80028e0:	f7ff fc2c 	bl	800213c <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b0a      	cmp	r3, #10
 80028ec:	d90b      	bls.n	8002906 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028f2:	f043 0201 	orr.w	r2, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2203      	movs	r2, #3
 80028fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e11b      	b.n	8002b3e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	f003 0308 	and.w	r3, r3, #8
 8002910:	2b08      	cmp	r3, #8
 8002912:	d0e5      	beq.n	80028e0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699a      	ldr	r2, [r3, #24]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0201 	orr.w	r2, r2, #1
 8002922:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002924:	f7ff fc0a 	bl	800213c <HAL_GetTick>
 8002928:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800292a:	e012      	b.n	8002952 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800292c:	f7ff fc06 	bl	800213c <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b0a      	cmp	r3, #10
 8002938:	d90b      	bls.n	8002952 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800293e:	f043 0201 	orr.w	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2203      	movs	r2, #3
 800294a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e0f5      	b.n	8002b3e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0e5      	beq.n	800292c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699a      	ldr	r2, [r3, #24]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0202 	orr.w	r2, r2, #2
 800296e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a74      	ldr	r2, [pc, #464]	@ (8002b48 <HAL_FDCAN_Init+0x2ac>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d103      	bne.n	8002982 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800297a:	4a74      	ldr	r2, [pc, #464]	@ (8002b4c <HAL_FDCAN_Init+0x2b0>)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	7c1b      	ldrb	r3, [r3, #16]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d108      	bne.n	800299c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	699a      	ldr	r2, [r3, #24]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002998:	619a      	str	r2, [r3, #24]
 800299a:	e007      	b.n	80029ac <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699a      	ldr	r2, [r3, #24]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029aa:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	7c5b      	ldrb	r3, [r3, #17]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d108      	bne.n	80029c6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	699a      	ldr	r2, [r3, #24]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029c2:	619a      	str	r2, [r3, #24]
 80029c4:	e007      	b.n	80029d6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	699a      	ldr	r2, [r3, #24]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80029d4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	7c9b      	ldrb	r3, [r3, #18]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d108      	bne.n	80029f0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	699a      	ldr	r2, [r3, #24]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80029ec:	619a      	str	r2, [r3, #24]
 80029ee:	e007      	b.n	8002a00 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699a      	ldr	r2, [r3, #24]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80029fe:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	699a      	ldr	r2, [r3, #24]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002a24:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	691a      	ldr	r2, [r3, #16]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0210 	bic.w	r2, r2, #16
 8002a34:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d108      	bne.n	8002a50 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	699a      	ldr	r2, [r3, #24]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f042 0204 	orr.w	r2, r2, #4
 8002a4c:	619a      	str	r2, [r3, #24]
 8002a4e:	e02c      	b.n	8002aaa <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d028      	beq.n	8002aaa <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d01c      	beq.n	8002a9a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	699a      	ldr	r2, [r3, #24]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002a6e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	691a      	ldr	r2, [r3, #16]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0210 	orr.w	r2, r2, #16
 8002a7e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d110      	bne.n	8002aaa <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699a      	ldr	r2, [r3, #24]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0220 	orr.w	r2, r2, #32
 8002a96:	619a      	str	r2, [r3, #24]
 8002a98:	e007      	b.n	8002aaa <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	699a      	ldr	r2, [r3, #24]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f042 0220 	orr.w	r2, r2, #32
 8002aa8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002aba:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002ac2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002ad2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ad4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ade:	d115      	bne.n	8002b0c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aea:	3b01      	subs	r3, #1
 8002aec:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002aee:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af4:	3b01      	subs	r3, #1
 8002af6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002af8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b00:	3b01      	subs	r3, #1
 8002b02:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002b08:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002b0a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f814 	bl	8002b50 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40006400 	.word	0x40006400
 8002b4c:	40006500 	.word	0x40006500

08002b50 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002b58:	4b27      	ldr	r3, [pc, #156]	@ (8002bf8 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002b5a:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b6a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b72:	041a      	lsls	r2, r3, #16
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b90:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b98:	061a      	lsls	r2, r3, #24
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	e005      	b.n	8002bde <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	3304      	adds	r3, #4
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d3f3      	bcc.n	8002bd2 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8002bea:	bf00      	nop
 8002bec:	bf00      	nop
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	4000a400 	.word	0x4000a400

08002bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b087      	sub	sp, #28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c0a:	e15a      	b.n	8002ec2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	2101      	movs	r1, #1
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	fa01 f303 	lsl.w	r3, r1, r3
 8002c18:	4013      	ands	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 814c 	beq.w	8002ebc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d005      	beq.n	8002c3c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d130      	bne.n	8002c9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	2203      	movs	r2, #3
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4013      	ands	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c72:	2201      	movs	r2, #1
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	091b      	lsrs	r3, r3, #4
 8002c88:	f003 0201 	and.w	r2, r3, #1
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d017      	beq.n	8002cda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	2203      	movs	r2, #3
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d123      	bne.n	8002d2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	08da      	lsrs	r2, r3, #3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3208      	adds	r2, #8
 8002cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	220f      	movs	r2, #15
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	43db      	mvns	r3, r3
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	4013      	ands	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	691a      	ldr	r2, [r3, #16]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	08da      	lsrs	r2, r3, #3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3208      	adds	r2, #8
 8002d28:	6939      	ldr	r1, [r7, #16]
 8002d2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	2203      	movs	r2, #3
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	4013      	ands	r3, r2
 8002d44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f003 0203 	and.w	r2, r3, #3
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 80a6 	beq.w	8002ebc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d70:	4b5b      	ldr	r3, [pc, #364]	@ (8002ee0 <HAL_GPIO_Init+0x2e4>)
 8002d72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d74:	4a5a      	ldr	r2, [pc, #360]	@ (8002ee0 <HAL_GPIO_Init+0x2e4>)
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d7c:	4b58      	ldr	r3, [pc, #352]	@ (8002ee0 <HAL_GPIO_Init+0x2e4>)
 8002d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d88:	4a56      	ldr	r2, [pc, #344]	@ (8002ee4 <HAL_GPIO_Init+0x2e8>)
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	089b      	lsrs	r3, r3, #2
 8002d8e:	3302      	adds	r3, #2
 8002d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f003 0303 	and.w	r3, r3, #3
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	220f      	movs	r2, #15
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	4013      	ands	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002db2:	d01f      	beq.n	8002df4 <HAL_GPIO_Init+0x1f8>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a4c      	ldr	r2, [pc, #304]	@ (8002ee8 <HAL_GPIO_Init+0x2ec>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d019      	beq.n	8002df0 <HAL_GPIO_Init+0x1f4>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a4b      	ldr	r2, [pc, #300]	@ (8002eec <HAL_GPIO_Init+0x2f0>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d013      	beq.n	8002dec <HAL_GPIO_Init+0x1f0>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a4a      	ldr	r2, [pc, #296]	@ (8002ef0 <HAL_GPIO_Init+0x2f4>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d00d      	beq.n	8002de8 <HAL_GPIO_Init+0x1ec>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a49      	ldr	r2, [pc, #292]	@ (8002ef4 <HAL_GPIO_Init+0x2f8>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d007      	beq.n	8002de4 <HAL_GPIO_Init+0x1e8>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a48      	ldr	r2, [pc, #288]	@ (8002ef8 <HAL_GPIO_Init+0x2fc>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d101      	bne.n	8002de0 <HAL_GPIO_Init+0x1e4>
 8002ddc:	2305      	movs	r3, #5
 8002dde:	e00a      	b.n	8002df6 <HAL_GPIO_Init+0x1fa>
 8002de0:	2306      	movs	r3, #6
 8002de2:	e008      	b.n	8002df6 <HAL_GPIO_Init+0x1fa>
 8002de4:	2304      	movs	r3, #4
 8002de6:	e006      	b.n	8002df6 <HAL_GPIO_Init+0x1fa>
 8002de8:	2303      	movs	r3, #3
 8002dea:	e004      	b.n	8002df6 <HAL_GPIO_Init+0x1fa>
 8002dec:	2302      	movs	r3, #2
 8002dee:	e002      	b.n	8002df6 <HAL_GPIO_Init+0x1fa>
 8002df0:	2301      	movs	r3, #1
 8002df2:	e000      	b.n	8002df6 <HAL_GPIO_Init+0x1fa>
 8002df4:	2300      	movs	r3, #0
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	f002 0203 	and.w	r2, r2, #3
 8002dfc:	0092      	lsls	r2, r2, #2
 8002dfe:	4093      	lsls	r3, r2
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e06:	4937      	ldr	r1, [pc, #220]	@ (8002ee4 <HAL_GPIO_Init+0x2e8>)
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	089b      	lsrs	r3, r3, #2
 8002e0c:	3302      	adds	r3, #2
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e14:	4b39      	ldr	r3, [pc, #228]	@ (8002efc <HAL_GPIO_Init+0x300>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4013      	ands	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e38:	4a30      	ldr	r2, [pc, #192]	@ (8002efc <HAL_GPIO_Init+0x300>)
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e3e:	4b2f      	ldr	r3, [pc, #188]	@ (8002efc <HAL_GPIO_Init+0x300>)
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	43db      	mvns	r3, r3
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e62:	4a26      	ldr	r2, [pc, #152]	@ (8002efc <HAL_GPIO_Init+0x300>)
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002e68:	4b24      	ldr	r3, [pc, #144]	@ (8002efc <HAL_GPIO_Init+0x300>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	43db      	mvns	r3, r3
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	4013      	ands	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e8c:	4a1b      	ldr	r2, [pc, #108]	@ (8002efc <HAL_GPIO_Init+0x300>)
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002e92:	4b1a      	ldr	r3, [pc, #104]	@ (8002efc <HAL_GPIO_Init+0x300>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002eb6:	4a11      	ldr	r2, [pc, #68]	@ (8002efc <HAL_GPIO_Init+0x300>)
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f47f ae9d 	bne.w	8002c0c <HAL_GPIO_Init+0x10>
  }
}
 8002ed2:	bf00      	nop
 8002ed4:	bf00      	nop
 8002ed6:	371c      	adds	r7, #28
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	40010000 	.word	0x40010000
 8002ee8:	48000400 	.word	0x48000400
 8002eec:	48000800 	.word	0x48000800
 8002ef0:	48000c00 	.word	0x48000c00
 8002ef4:	48001000 	.word	0x48001000
 8002ef8:	48001400 	.word	0x48001400
 8002efc:	40010400 	.word	0x40010400

08002f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	807b      	strh	r3, [r7, #2]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f10:	787b      	ldrb	r3, [r7, #1]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f16:	887a      	ldrh	r2, [r7, #2]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f1c:	e002      	b.n	8002f24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f1e:	887a      	ldrh	r2, [r7, #2]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e08d      	b.n	800305e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d106      	bne.n	8002f5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7fe fed6 	bl	8001d08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2224      	movs	r2, #36	@ 0x24
 8002f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0201 	bic.w	r2, r2, #1
 8002f72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d107      	bne.n	8002faa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fa6:	609a      	str	r2, [r3, #8]
 8002fa8:	e006      	b.n	8002fb8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002fb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d108      	bne.n	8002fd2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fce:	605a      	str	r2, [r3, #4]
 8002fd0:	e007      	b.n	8002fe2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fe0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6812      	ldr	r2, [r2, #0]
 8002fec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ff0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ff4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68da      	ldr	r2, [r3, #12]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003004:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691a      	ldr	r2, [r3, #16]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	69d9      	ldr	r1, [r3, #28]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a1a      	ldr	r2, [r3, #32]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	430a      	orrs	r2, r1
 800302e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f042 0201 	orr.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2220      	movs	r2, #32
 800304a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b088      	sub	sp, #32
 800306c:	af02      	add	r7, sp, #8
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	607a      	str	r2, [r7, #4]
 8003072:	461a      	mov	r2, r3
 8003074:	460b      	mov	r3, r1
 8003076:	817b      	strh	r3, [r7, #10]
 8003078:	4613      	mov	r3, r2
 800307a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b20      	cmp	r3, #32
 8003086:	f040 80fd 	bne.w	8003284 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003090:	2b01      	cmp	r3, #1
 8003092:	d101      	bne.n	8003098 <HAL_I2C_Master_Transmit+0x30>
 8003094:	2302      	movs	r3, #2
 8003096:	e0f6      	b.n	8003286 <HAL_I2C_Master_Transmit+0x21e>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030a0:	f7ff f84c 	bl	800213c <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	2319      	movs	r3, #25
 80030ac:	2201      	movs	r2, #1
 80030ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 fa0a 	bl	80034cc <I2C_WaitOnFlagUntilTimeout>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e0e1      	b.n	8003286 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2221      	movs	r2, #33	@ 0x21
 80030c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2210      	movs	r2, #16
 80030ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	893a      	ldrh	r2, [r7, #8]
 80030e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	2bff      	cmp	r3, #255	@ 0xff
 80030f2:	d906      	bls.n	8003102 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	22ff      	movs	r2, #255	@ 0xff
 80030f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80030fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	e007      	b.n	8003112 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003106:	b29a      	uxth	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800310c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003110:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003116:	2b00      	cmp	r3, #0
 8003118:	d024      	beq.n	8003164 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311e:	781a      	ldrb	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003134:	b29b      	uxth	r3, r3
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003142:	3b01      	subs	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800314e:	b2db      	uxtb	r3, r3
 8003150:	3301      	adds	r3, #1
 8003152:	b2da      	uxtb	r2, r3
 8003154:	8979      	ldrh	r1, [r7, #10]
 8003156:	4b4e      	ldr	r3, [pc, #312]	@ (8003290 <HAL_I2C_Master_Transmit+0x228>)
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 fc05 	bl	800396c <I2C_TransferConfig>
 8003162:	e066      	b.n	8003232 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003168:	b2da      	uxtb	r2, r3
 800316a:	8979      	ldrh	r1, [r7, #10]
 800316c:	4b48      	ldr	r3, [pc, #288]	@ (8003290 <HAL_I2C_Master_Transmit+0x228>)
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 fbfa 	bl	800396c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003178:	e05b      	b.n	8003232 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	6a39      	ldr	r1, [r7, #32]
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 f9fd 	bl	800357e <I2C_WaitOnTXISFlagUntilTimeout>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e07b      	b.n	8003286 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003192:	781a      	ldrb	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	3b01      	subs	r3, #1
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031b6:	3b01      	subs	r3, #1
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d034      	beq.n	8003232 <HAL_I2C_Master_Transmit+0x1ca>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d130      	bne.n	8003232 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	2200      	movs	r2, #0
 80031d8:	2180      	movs	r1, #128	@ 0x80
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 f976 	bl	80034cc <I2C_WaitOnFlagUntilTimeout>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e04d      	b.n	8003286 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	2bff      	cmp	r3, #255	@ 0xff
 80031f2:	d90e      	bls.n	8003212 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	22ff      	movs	r2, #255	@ 0xff
 80031f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	8979      	ldrh	r1, [r7, #10]
 8003202:	2300      	movs	r3, #0
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 fbae 	bl	800396c <I2C_TransferConfig>
 8003210:	e00f      	b.n	8003232 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003216:	b29a      	uxth	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003220:	b2da      	uxtb	r2, r3
 8003222:	8979      	ldrh	r1, [r7, #10]
 8003224:	2300      	movs	r3, #0
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 fb9d 	bl	800396c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003236:	b29b      	uxth	r3, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	d19e      	bne.n	800317a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	6a39      	ldr	r1, [r7, #32]
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 f9e3 	bl	800360c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e01a      	b.n	8003286 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2220      	movs	r2, #32
 8003256:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6859      	ldr	r1, [r3, #4]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	4b0c      	ldr	r3, [pc, #48]	@ (8003294 <HAL_I2C_Master_Transmit+0x22c>)
 8003264:	400b      	ands	r3, r1
 8003266:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003280:	2300      	movs	r3, #0
 8003282:	e000      	b.n	8003286 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003284:	2302      	movs	r3, #2
  }
}
 8003286:	4618      	mov	r0, r3
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	80002000 	.word	0x80002000
 8003294:	fe00e800 	.word	0xfe00e800

08003298 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b088      	sub	sp, #32
 800329c:	af02      	add	r7, sp, #8
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	607a      	str	r2, [r7, #4]
 80032a2:	461a      	mov	r2, r3
 80032a4:	460b      	mov	r3, r1
 80032a6:	817b      	strh	r3, [r7, #10]
 80032a8:	4613      	mov	r3, r2
 80032aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b20      	cmp	r3, #32
 80032b6:	f040 80db 	bne.w	8003470 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d101      	bne.n	80032c8 <HAL_I2C_Master_Receive+0x30>
 80032c4:	2302      	movs	r3, #2
 80032c6:	e0d4      	b.n	8003472 <HAL_I2C_Master_Receive+0x1da>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032d0:	f7fe ff34 	bl	800213c <HAL_GetTick>
 80032d4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	2319      	movs	r3, #25
 80032dc:	2201      	movs	r2, #1
 80032de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 f8f2 	bl	80034cc <I2C_WaitOnFlagUntilTimeout>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e0bf      	b.n	8003472 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2222      	movs	r2, #34	@ 0x22
 80032f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2210      	movs	r2, #16
 80032fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	893a      	ldrh	r2, [r7, #8]
 8003312:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800331e:	b29b      	uxth	r3, r3
 8003320:	2bff      	cmp	r3, #255	@ 0xff
 8003322:	d90e      	bls.n	8003342 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	22ff      	movs	r2, #255	@ 0xff
 8003328:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800332e:	b2da      	uxtb	r2, r3
 8003330:	8979      	ldrh	r1, [r7, #10]
 8003332:	4b52      	ldr	r3, [pc, #328]	@ (800347c <HAL_I2C_Master_Receive+0x1e4>)
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 fb16 	bl	800396c <I2C_TransferConfig>
 8003340:	e06d      	b.n	800341e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003350:	b2da      	uxtb	r2, r3
 8003352:	8979      	ldrh	r1, [r7, #10]
 8003354:	4b49      	ldr	r3, [pc, #292]	@ (800347c <HAL_I2C_Master_Receive+0x1e4>)
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f000 fb05 	bl	800396c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003362:	e05c      	b.n	800341e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003364:	697a      	ldr	r2, [r7, #20]
 8003366:	6a39      	ldr	r1, [r7, #32]
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f000 f993 	bl	8003694 <I2C_WaitOnRXNEFlagUntilTimeout>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e07c      	b.n	8003472 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338a:	1c5a      	adds	r2, r3, #1
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003394:	3b01      	subs	r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	3b01      	subs	r3, #1
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d034      	beq.n	800341e <HAL_I2C_Master_Receive+0x186>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d130      	bne.n	800341e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	6a3b      	ldr	r3, [r7, #32]
 80033c2:	2200      	movs	r2, #0
 80033c4:	2180      	movs	r1, #128	@ 0x80
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f880 	bl	80034cc <I2C_WaitOnFlagUntilTimeout>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e04d      	b.n	8003472 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033da:	b29b      	uxth	r3, r3
 80033dc:	2bff      	cmp	r3, #255	@ 0xff
 80033de:	d90e      	bls.n	80033fe <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	22ff      	movs	r2, #255	@ 0xff
 80033e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	8979      	ldrh	r1, [r7, #10]
 80033ee:	2300      	movs	r3, #0
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 fab8 	bl	800396c <I2C_TransferConfig>
 80033fc:	e00f      	b.n	800341e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003402:	b29a      	uxth	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800340c:	b2da      	uxtb	r2, r3
 800340e:	8979      	ldrh	r1, [r7, #10]
 8003410:	2300      	movs	r3, #0
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 faa7 	bl	800396c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003422:	b29b      	uxth	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	d19d      	bne.n	8003364 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	6a39      	ldr	r1, [r7, #32]
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 f8ed 	bl	800360c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e01a      	b.n	8003472 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2220      	movs	r2, #32
 8003442:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6859      	ldr	r1, [r3, #4]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	4b0c      	ldr	r3, [pc, #48]	@ (8003480 <HAL_I2C_Master_Receive+0x1e8>)
 8003450:	400b      	ands	r3, r1
 8003452:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800346c:	2300      	movs	r3, #0
 800346e:	e000      	b.n	8003472 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003470:	2302      	movs	r3, #2
  }
}
 8003472:	4618      	mov	r0, r3
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	80002400 	.word	0x80002400
 8003480:	fe00e800 	.word	0xfe00e800

08003484 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b02      	cmp	r3, #2
 8003498:	d103      	bne.n	80034a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2200      	movs	r2, #0
 80034a0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d007      	beq.n	80034c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699a      	ldr	r2, [r3, #24]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0201 	orr.w	r2, r2, #1
 80034be:	619a      	str	r2, [r3, #24]
  }
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	603b      	str	r3, [r7, #0]
 80034d8:	4613      	mov	r3, r2
 80034da:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034dc:	e03b      	b.n	8003556 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	6839      	ldr	r1, [r7, #0]
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f000 f962 	bl	80037ac <I2C_IsErrorOccurred>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e041      	b.n	8003576 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f8:	d02d      	beq.n	8003556 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034fa:	f7fe fe1f 	bl	800213c <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	429a      	cmp	r2, r3
 8003508:	d302      	bcc.n	8003510 <I2C_WaitOnFlagUntilTimeout+0x44>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d122      	bne.n	8003556 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	699a      	ldr	r2, [r3, #24]
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	4013      	ands	r3, r2
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	429a      	cmp	r2, r3
 800351e:	bf0c      	ite	eq
 8003520:	2301      	moveq	r3, #1
 8003522:	2300      	movne	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	461a      	mov	r2, r3
 8003528:	79fb      	ldrb	r3, [r7, #7]
 800352a:	429a      	cmp	r2, r3
 800352c:	d113      	bne.n	8003556 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003532:	f043 0220 	orr.w	r2, r3, #32
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2220      	movs	r2, #32
 800353e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e00f      	b.n	8003576 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	699a      	ldr	r2, [r3, #24]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	4013      	ands	r3, r2
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	429a      	cmp	r2, r3
 8003564:	bf0c      	ite	eq
 8003566:	2301      	moveq	r3, #1
 8003568:	2300      	movne	r3, #0
 800356a:	b2db      	uxtb	r3, r3
 800356c:	461a      	mov	r2, r3
 800356e:	79fb      	ldrb	r3, [r7, #7]
 8003570:	429a      	cmp	r2, r3
 8003572:	d0b4      	beq.n	80034de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b084      	sub	sp, #16
 8003582:	af00      	add	r7, sp, #0
 8003584:	60f8      	str	r0, [r7, #12]
 8003586:	60b9      	str	r1, [r7, #8]
 8003588:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800358a:	e033      	b.n	80035f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	68b9      	ldr	r1, [r7, #8]
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 f90b 	bl	80037ac <I2C_IsErrorOccurred>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e031      	b.n	8003604 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a6:	d025      	beq.n	80035f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a8:	f7fe fdc8 	bl	800213c <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d302      	bcc.n	80035be <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d11a      	bne.n	80035f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d013      	beq.n	80035f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d0:	f043 0220 	orr.w	r2, r3, #32
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2220      	movs	r2, #32
 80035dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e007      	b.n	8003604 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d1c4      	bne.n	800358c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003618:	e02f      	b.n	800367a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	68b9      	ldr	r1, [r7, #8]
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 f8c4 	bl	80037ac <I2C_IsErrorOccurred>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e02d      	b.n	800368a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800362e:	f7fe fd85 	bl	800213c <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	429a      	cmp	r2, r3
 800363c:	d302      	bcc.n	8003644 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d11a      	bne.n	800367a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	f003 0320 	and.w	r3, r3, #32
 800364e:	2b20      	cmp	r3, #32
 8003650:	d013      	beq.n	800367a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003656:	f043 0220 	orr.w	r2, r3, #32
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2220      	movs	r2, #32
 8003662:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e007      	b.n	800368a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	f003 0320 	and.w	r3, r3, #32
 8003684:	2b20      	cmp	r3, #32
 8003686:	d1c8      	bne.n	800361a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
	...

08003694 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036a0:	2300      	movs	r3, #0
 80036a2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80036a4:	e071      	b.n	800378a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	68b9      	ldr	r1, [r7, #8]
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 f87e 	bl	80037ac <I2C_IsErrorOccurred>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	f003 0320 	and.w	r3, r3, #32
 80036c4:	2b20      	cmp	r3, #32
 80036c6:	d13b      	bne.n	8003740 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80036c8:	7dfb      	ldrb	r3, [r7, #23]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d138      	bne.n	8003740 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d105      	bne.n	80036e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	f003 0310 	and.w	r3, r3, #16
 80036f2:	2b10      	cmp	r3, #16
 80036f4:	d121      	bne.n	800373a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2210      	movs	r2, #16
 80036fc:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2204      	movs	r2, #4
 8003702:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2220      	movs	r2, #32
 800370a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6859      	ldr	r1, [r3, #4]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	4b24      	ldr	r3, [pc, #144]	@ (80037a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003718:	400b      	ands	r3, r1
 800371a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2220      	movs	r2, #32
 8003720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	75fb      	strb	r3, [r7, #23]
 8003738:	e002      	b.n	8003740 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003740:	f7fe fcfc 	bl	800213c <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	429a      	cmp	r2, r3
 800374e:	d302      	bcc.n	8003756 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d119      	bne.n	800378a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003756:	7dfb      	ldrb	r3, [r7, #23]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d116      	bne.n	800378a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	f003 0304 	and.w	r3, r3, #4
 8003766:	2b04      	cmp	r3, #4
 8003768:	d00f      	beq.n	800378a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800376e:	f043 0220 	orr.w	r2, r3, #32
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2220      	movs	r2, #32
 800377a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b04      	cmp	r3, #4
 8003796:	d002      	beq.n	800379e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003798:	7dfb      	ldrb	r3, [r7, #23]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d083      	beq.n	80036a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800379e:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3718      	adds	r7, #24
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	fe00e800 	.word	0xfe00e800

080037ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08a      	sub	sp, #40	@ 0x28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037b8:	2300      	movs	r3, #0
 80037ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80037c6:	2300      	movs	r3, #0
 80037c8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	f003 0310 	and.w	r3, r3, #16
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d068      	beq.n	80038aa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2210      	movs	r2, #16
 80037de:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037e0:	e049      	b.n	8003876 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e8:	d045      	beq.n	8003876 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037ea:	f7fe fca7 	bl	800213c <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d302      	bcc.n	8003800 <I2C_IsErrorOccurred+0x54>
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d13a      	bne.n	8003876 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800380a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003812:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800381e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003822:	d121      	bne.n	8003868 <I2C_IsErrorOccurred+0xbc>
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800382a:	d01d      	beq.n	8003868 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800382c:	7cfb      	ldrb	r3, [r7, #19]
 800382e:	2b20      	cmp	r3, #32
 8003830:	d01a      	beq.n	8003868 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003840:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003842:	f7fe fc7b 	bl	800213c <HAL_GetTick>
 8003846:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003848:	e00e      	b.n	8003868 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800384a:	f7fe fc77 	bl	800213c <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b19      	cmp	r3, #25
 8003856:	d907      	bls.n	8003868 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	f043 0320 	orr.w	r3, r3, #32
 800385e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003866:	e006      	b.n	8003876 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	f003 0320 	and.w	r3, r3, #32
 8003872:	2b20      	cmp	r3, #32
 8003874:	d1e9      	bne.n	800384a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	f003 0320 	and.w	r3, r3, #32
 8003880:	2b20      	cmp	r3, #32
 8003882:	d003      	beq.n	800388c <I2C_IsErrorOccurred+0xe0>
 8003884:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0aa      	beq.n	80037e2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800388c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003890:	2b00      	cmp	r3, #0
 8003892:	d103      	bne.n	800389c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2220      	movs	r2, #32
 800389a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800389c:	6a3b      	ldr	r3, [r7, #32]
 800389e:	f043 0304 	orr.w	r3, r3, #4
 80038a2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00b      	beq.n	80038d4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	f043 0301 	orr.w	r3, r3, #1
 80038c2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00b      	beq.n	80038f6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	f043 0308 	orr.w	r3, r3, #8
 80038e4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00b      	beq.n	8003918 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	f043 0302 	orr.w	r3, r3, #2
 8003906:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003910:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003918:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800391c:	2b00      	cmp	r3, #0
 800391e:	d01c      	beq.n	800395a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f7ff fdaf 	bl	8003484 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6859      	ldr	r1, [r3, #4]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	4b0d      	ldr	r3, [pc, #52]	@ (8003968 <I2C_IsErrorOccurred+0x1bc>)
 8003932:	400b      	ands	r3, r1
 8003934:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	431a      	orrs	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2220      	movs	r2, #32
 8003946:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800395a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800395e:	4618      	mov	r0, r3
 8003960:	3728      	adds	r7, #40	@ 0x28
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	fe00e800 	.word	0xfe00e800

0800396c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800396c:	b480      	push	{r7}
 800396e:	b087      	sub	sp, #28
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	607b      	str	r3, [r7, #4]
 8003976:	460b      	mov	r3, r1
 8003978:	817b      	strh	r3, [r7, #10]
 800397a:	4613      	mov	r3, r2
 800397c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800397e:	897b      	ldrh	r3, [r7, #10]
 8003980:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003984:	7a7b      	ldrb	r3, [r7, #9]
 8003986:	041b      	lsls	r3, r3, #16
 8003988:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800398c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	4313      	orrs	r3, r2
 8003996:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800399a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	6a3b      	ldr	r3, [r7, #32]
 80039a4:	0d5b      	lsrs	r3, r3, #21
 80039a6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80039aa:	4b08      	ldr	r3, [pc, #32]	@ (80039cc <I2C_TransferConfig+0x60>)
 80039ac:	430b      	orrs	r3, r1
 80039ae:	43db      	mvns	r3, r3
 80039b0:	ea02 0103 	and.w	r1, r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80039be:	bf00      	nop
 80039c0:	371c      	adds	r7, #28
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	03ff63ff 	.word	0x03ff63ff

080039d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b20      	cmp	r3, #32
 80039e4:	d138      	bne.n	8003a58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d101      	bne.n	80039f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039f0:	2302      	movs	r3, #2
 80039f2:	e032      	b.n	8003a5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2224      	movs	r2, #36	@ 0x24
 8003a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 0201 	bic.w	r2, r2, #1
 8003a12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6819      	ldr	r1, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0201 	orr.w	r2, r2, #1
 8003a42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2220      	movs	r2, #32
 8003a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	e000      	b.n	8003a5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a58:	2302      	movs	r3, #2
  }
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b085      	sub	sp, #20
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
 8003a6e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b20      	cmp	r3, #32
 8003a7a:	d139      	bne.n	8003af0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a86:	2302      	movs	r3, #2
 8003a88:	e033      	b.n	8003af2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2224      	movs	r2, #36	@ 0x24
 8003a96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 0201 	bic.w	r2, r2, #1
 8003aa8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003ab8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	021b      	lsls	r3, r3, #8
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f042 0201 	orr.w	r2, r2, #1
 8003ada:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003aec:	2300      	movs	r3, #0
 8003aee:	e000      	b.n	8003af2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003af0:	2302      	movs	r3, #2
  }
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
	...

08003b00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d141      	bne.n	8003b92 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b0e:	4b4b      	ldr	r3, [pc, #300]	@ (8003c3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b1a:	d131      	bne.n	8003b80 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b1c:	4b47      	ldr	r3, [pc, #284]	@ (8003c3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b22:	4a46      	ldr	r2, [pc, #280]	@ (8003c3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b2c:	4b43      	ldr	r3, [pc, #268]	@ (8003c3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b34:	4a41      	ldr	r2, [pc, #260]	@ (8003c3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b3c:	4b40      	ldr	r3, [pc, #256]	@ (8003c40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2232      	movs	r2, #50	@ 0x32
 8003b42:	fb02 f303 	mul.w	r3, r2, r3
 8003b46:	4a3f      	ldr	r2, [pc, #252]	@ (8003c44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b48:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4c:	0c9b      	lsrs	r3, r3, #18
 8003b4e:	3301      	adds	r3, #1
 8003b50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b52:	e002      	b.n	8003b5a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	3b01      	subs	r3, #1
 8003b58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b5a:	4b38      	ldr	r3, [pc, #224]	@ (8003c3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b66:	d102      	bne.n	8003b6e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f2      	bne.n	8003b54 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b6e:	4b33      	ldr	r3, [pc, #204]	@ (8003c3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b7a:	d158      	bne.n	8003c2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e057      	b.n	8003c30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b80:	4b2e      	ldr	r3, [pc, #184]	@ (8003c3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b86:	4a2d      	ldr	r2, [pc, #180]	@ (8003c3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003b90:	e04d      	b.n	8003c2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b98:	d141      	bne.n	8003c1e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b9a:	4b28      	ldr	r3, [pc, #160]	@ (8003c3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003ba2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ba6:	d131      	bne.n	8003c0c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ba8:	4b24      	ldr	r3, [pc, #144]	@ (8003c3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bae:	4a23      	ldr	r2, [pc, #140]	@ (8003c3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bb8:	4b20      	ldr	r3, [pc, #128]	@ (8003c3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003bc0:	4a1e      	ldr	r2, [pc, #120]	@ (8003c3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003bc6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8003c40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2232      	movs	r2, #50	@ 0x32
 8003bce:	fb02 f303 	mul.w	r3, r2, r3
 8003bd2:	4a1c      	ldr	r2, [pc, #112]	@ (8003c44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd8:	0c9b      	lsrs	r3, r3, #18
 8003bda:	3301      	adds	r3, #1
 8003bdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bde:	e002      	b.n	8003be6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	3b01      	subs	r3, #1
 8003be4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003be6:	4b15      	ldr	r3, [pc, #84]	@ (8003c3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bf2:	d102      	bne.n	8003bfa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1f2      	bne.n	8003be0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bfa:	4b10      	ldr	r3, [pc, #64]	@ (8003c3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c06:	d112      	bne.n	8003c2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e011      	b.n	8003c30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c12:	4a0a      	ldr	r2, [pc, #40]	@ (8003c3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003c1c:	e007      	b.n	8003c2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c1e:	4b07      	ldr	r3, [pc, #28]	@ (8003c3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c26:	4a05      	ldr	r2, [pc, #20]	@ (8003c3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c28:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c2c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	40007000 	.word	0x40007000
 8003c40:	20000000 	.word	0x20000000
 8003c44:	431bde83 	.word	0x431bde83

08003c48 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003c4c:	4b05      	ldr	r3, [pc, #20]	@ (8003c64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	4a04      	ldr	r2, [pc, #16]	@ (8003c64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003c52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c56:	6093      	str	r3, [r2, #8]
}
 8003c58:	bf00      	nop
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	40007000 	.word	0x40007000

08003c68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e2fe      	b.n	8004278 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d075      	beq.n	8003d72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c86:	4b97      	ldr	r3, [pc, #604]	@ (8003ee4 <HAL_RCC_OscConfig+0x27c>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f003 030c 	and.w	r3, r3, #12
 8003c8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c90:	4b94      	ldr	r3, [pc, #592]	@ (8003ee4 <HAL_RCC_OscConfig+0x27c>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f003 0303 	and.w	r3, r3, #3
 8003c98:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	2b0c      	cmp	r3, #12
 8003c9e:	d102      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x3e>
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2b03      	cmp	r3, #3
 8003ca4:	d002      	beq.n	8003cac <HAL_RCC_OscConfig+0x44>
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d10b      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cac:	4b8d      	ldr	r3, [pc, #564]	@ (8003ee4 <HAL_RCC_OscConfig+0x27c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d05b      	beq.n	8003d70 <HAL_RCC_OscConfig+0x108>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d157      	bne.n	8003d70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e2d9      	b.n	8004278 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ccc:	d106      	bne.n	8003cdc <HAL_RCC_OscConfig+0x74>
 8003cce:	4b85      	ldr	r3, [pc, #532]	@ (8003ee4 <HAL_RCC_OscConfig+0x27c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a84      	ldr	r2, [pc, #528]	@ (8003ee4 <HAL_RCC_OscConfig+0x27c>)
 8003cd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cd8:	6013      	str	r3, [r2, #0]
 8003cda:	e01d      	b.n	8003d18 <HAL_RCC_OscConfig+0xb0>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ce4:	d10c      	bne.n	8003d00 <HAL_RCC_OscConfig+0x98>
 8003ce6:	4b7f      	ldr	r3, [pc, #508]	@ (8003ee4 <HAL_RCC_OscConfig+0x27c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a7e      	ldr	r2, [pc, #504]	@ (8003ee4 <HAL_RCC_OscConfig+0x27c>)
 8003cec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cf0:	6013      	str	r3, [r2, #0]
 8003cf2:	4b7c      	ldr	r3, [pc, #496]	@ (8003ee4 <HAL_RCC_OscConfig+0x27c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a7b      	ldr	r2, [pc, #492]	@ (8003ee4 <HAL_RCC_OscConfig+0x27c>)
 8003cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cfc:	6013      	str	r3, [r2, #0]
 8003cfe:	e00b      	b.n	8003d18 <HAL_RCC_OscConfig+0xb0>
 8003d00:	4b78      	ldr	r3, [pc, #480]	@ (8003ee4 <HAL_RCC_OscConfig+0x27c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a77      	ldr	r2, [pc, #476]	@ (8003ee4 <HAL_RCC_OscConfig+0x27c>)
 8003d06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d0a:	6013      	str	r3, [r2, #0]
 8003d0c:	4b75      	ldr	r3, [pc, #468]	@ (8003ee4 <HAL_RCC_OscConfig+0x27c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a74      	ldr	r2, [pc, #464]	@ (8003ee4 <HAL_RCC_OscConfig+0x27c>)
 8003d12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d013      	beq.n	8003d48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d20:	f7fe fa0c 	bl	800213c <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d28:	f7fe fa08 	bl	800213c <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b64      	cmp	r3, #100	@ 0x64
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e29e      	b.n	8004278 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d3a:	4b6a      	ldr	r3, [pc, #424]	@ (8003ee4 <HAL_RCC_OscConfig+0x27c>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0f0      	beq.n	8003d28 <HAL_RCC_OscConfig+0xc0>
 8003d46:	e014      	b.n	8003d72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d48:	f7fe f9f8 	bl	800213c <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d50:	f7fe f9f4 	bl	800213c <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b64      	cmp	r3, #100	@ 0x64
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e28a      	b.n	8004278 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d62:	4b60      	ldr	r3, [pc, #384]	@ (8003ee4 <HAL_RCC_OscConfig+0x27c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f0      	bne.n	8003d50 <HAL_RCC_OscConfig+0xe8>
 8003d6e:	e000      	b.n	8003d72 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d075      	beq.n	8003e6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d7e:	4b59      	ldr	r3, [pc, #356]	@ (8003ee4 <HAL_RCC_OscConfig+0x27c>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 030c 	and.w	r3, r3, #12
 8003d86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d88:	4b56      	ldr	r3, [pc, #344]	@ (8003ee4 <HAL_RCC_OscConfig+0x27c>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f003 0303 	and.w	r3, r3, #3
 8003d90:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	2b0c      	cmp	r3, #12
 8003d96:	d102      	bne.n	8003d9e <HAL_RCC_OscConfig+0x136>
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d002      	beq.n	8003da4 <HAL_RCC_OscConfig+0x13c>
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d11f      	bne.n	8003de4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003da4:	4b4f      	ldr	r3, [pc, #316]	@ (8003ee4 <HAL_RCC_OscConfig+0x27c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d005      	beq.n	8003dbc <HAL_RCC_OscConfig+0x154>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e25d      	b.n	8004278 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dbc:	4b49      	ldr	r3, [pc, #292]	@ (8003ee4 <HAL_RCC_OscConfig+0x27c>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	061b      	lsls	r3, r3, #24
 8003dca:	4946      	ldr	r1, [pc, #280]	@ (8003ee4 <HAL_RCC_OscConfig+0x27c>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003dd0:	4b45      	ldr	r3, [pc, #276]	@ (8003ee8 <HAL_RCC_OscConfig+0x280>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7fe f965 	bl	80020a4 <HAL_InitTick>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d043      	beq.n	8003e68 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e249      	b.n	8004278 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d023      	beq.n	8003e34 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dec:	4b3d      	ldr	r3, [pc, #244]	@ (8003ee4 <HAL_RCC_OscConfig+0x27c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a3c      	ldr	r2, [pc, #240]	@ (8003ee4 <HAL_RCC_OscConfig+0x27c>)
 8003df2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003df6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df8:	f7fe f9a0 	bl	800213c <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e00:	f7fe f99c 	bl	800213c <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e232      	b.n	8004278 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e12:	4b34      	ldr	r3, [pc, #208]	@ (8003ee4 <HAL_RCC_OscConfig+0x27c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0f0      	beq.n	8003e00 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e1e:	4b31      	ldr	r3, [pc, #196]	@ (8003ee4 <HAL_RCC_OscConfig+0x27c>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	061b      	lsls	r3, r3, #24
 8003e2c:	492d      	ldr	r1, [pc, #180]	@ (8003ee4 <HAL_RCC_OscConfig+0x27c>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	604b      	str	r3, [r1, #4]
 8003e32:	e01a      	b.n	8003e6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e34:	4b2b      	ldr	r3, [pc, #172]	@ (8003ee4 <HAL_RCC_OscConfig+0x27c>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a2a      	ldr	r2, [pc, #168]	@ (8003ee4 <HAL_RCC_OscConfig+0x27c>)
 8003e3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e40:	f7fe f97c 	bl	800213c <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e48:	f7fe f978 	bl	800213c <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e20e      	b.n	8004278 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e5a:	4b22      	ldr	r3, [pc, #136]	@ (8003ee4 <HAL_RCC_OscConfig+0x27c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1f0      	bne.n	8003e48 <HAL_RCC_OscConfig+0x1e0>
 8003e66:	e000      	b.n	8003e6a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0308 	and.w	r3, r3, #8
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d041      	beq.n	8003efa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d01c      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e7e:	4b19      	ldr	r3, [pc, #100]	@ (8003ee4 <HAL_RCC_OscConfig+0x27c>)
 8003e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e84:	4a17      	ldr	r2, [pc, #92]	@ (8003ee4 <HAL_RCC_OscConfig+0x27c>)
 8003e86:	f043 0301 	orr.w	r3, r3, #1
 8003e8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8e:	f7fe f955 	bl	800213c <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e96:	f7fe f951 	bl	800213c <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e1e7      	b.n	8004278 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8003ee4 <HAL_RCC_OscConfig+0x27c>)
 8003eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0ef      	beq.n	8003e96 <HAL_RCC_OscConfig+0x22e>
 8003eb6:	e020      	b.n	8003efa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ee4 <HAL_RCC_OscConfig+0x27c>)
 8003eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ebe:	4a09      	ldr	r2, [pc, #36]	@ (8003ee4 <HAL_RCC_OscConfig+0x27c>)
 8003ec0:	f023 0301 	bic.w	r3, r3, #1
 8003ec4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec8:	f7fe f938 	bl	800213c <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ece:	e00d      	b.n	8003eec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ed0:	f7fe f934 	bl	800213c <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d906      	bls.n	8003eec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e1ca      	b.n	8004278 <HAL_RCC_OscConfig+0x610>
 8003ee2:	bf00      	nop
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003eec:	4b8c      	ldr	r3, [pc, #560]	@ (8004120 <HAL_RCC_OscConfig+0x4b8>)
 8003eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1ea      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0304 	and.w	r3, r3, #4
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 80a6 	beq.w	8004054 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f0c:	4b84      	ldr	r3, [pc, #528]	@ (8004120 <HAL_RCC_OscConfig+0x4b8>)
 8003f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d101      	bne.n	8003f1c <HAL_RCC_OscConfig+0x2b4>
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e000      	b.n	8003f1e <HAL_RCC_OscConfig+0x2b6>
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00d      	beq.n	8003f3e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f22:	4b7f      	ldr	r3, [pc, #508]	@ (8004120 <HAL_RCC_OscConfig+0x4b8>)
 8003f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f26:	4a7e      	ldr	r2, [pc, #504]	@ (8004120 <HAL_RCC_OscConfig+0x4b8>)
 8003f28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f2e:	4b7c      	ldr	r3, [pc, #496]	@ (8004120 <HAL_RCC_OscConfig+0x4b8>)
 8003f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f3e:	4b79      	ldr	r3, [pc, #484]	@ (8004124 <HAL_RCC_OscConfig+0x4bc>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d118      	bne.n	8003f7c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f4a:	4b76      	ldr	r3, [pc, #472]	@ (8004124 <HAL_RCC_OscConfig+0x4bc>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a75      	ldr	r2, [pc, #468]	@ (8004124 <HAL_RCC_OscConfig+0x4bc>)
 8003f50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f56:	f7fe f8f1 	bl	800213c <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f5e:	f7fe f8ed 	bl	800213c <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e183      	b.n	8004278 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f70:	4b6c      	ldr	r3, [pc, #432]	@ (8004124 <HAL_RCC_OscConfig+0x4bc>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0f0      	beq.n	8003f5e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d108      	bne.n	8003f96 <HAL_RCC_OscConfig+0x32e>
 8003f84:	4b66      	ldr	r3, [pc, #408]	@ (8004120 <HAL_RCC_OscConfig+0x4b8>)
 8003f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f8a:	4a65      	ldr	r2, [pc, #404]	@ (8004120 <HAL_RCC_OscConfig+0x4b8>)
 8003f8c:	f043 0301 	orr.w	r3, r3, #1
 8003f90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f94:	e024      	b.n	8003fe0 <HAL_RCC_OscConfig+0x378>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	2b05      	cmp	r3, #5
 8003f9c:	d110      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x358>
 8003f9e:	4b60      	ldr	r3, [pc, #384]	@ (8004120 <HAL_RCC_OscConfig+0x4b8>)
 8003fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fa4:	4a5e      	ldr	r2, [pc, #376]	@ (8004120 <HAL_RCC_OscConfig+0x4b8>)
 8003fa6:	f043 0304 	orr.w	r3, r3, #4
 8003faa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003fae:	4b5c      	ldr	r3, [pc, #368]	@ (8004120 <HAL_RCC_OscConfig+0x4b8>)
 8003fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fb4:	4a5a      	ldr	r2, [pc, #360]	@ (8004120 <HAL_RCC_OscConfig+0x4b8>)
 8003fb6:	f043 0301 	orr.w	r3, r3, #1
 8003fba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003fbe:	e00f      	b.n	8003fe0 <HAL_RCC_OscConfig+0x378>
 8003fc0:	4b57      	ldr	r3, [pc, #348]	@ (8004120 <HAL_RCC_OscConfig+0x4b8>)
 8003fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc6:	4a56      	ldr	r2, [pc, #344]	@ (8004120 <HAL_RCC_OscConfig+0x4b8>)
 8003fc8:	f023 0301 	bic.w	r3, r3, #1
 8003fcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003fd0:	4b53      	ldr	r3, [pc, #332]	@ (8004120 <HAL_RCC_OscConfig+0x4b8>)
 8003fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd6:	4a52      	ldr	r2, [pc, #328]	@ (8004120 <HAL_RCC_OscConfig+0x4b8>)
 8003fd8:	f023 0304 	bic.w	r3, r3, #4
 8003fdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d016      	beq.n	8004016 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe8:	f7fe f8a8 	bl	800213c <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fee:	e00a      	b.n	8004006 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ff0:	f7fe f8a4 	bl	800213c <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e138      	b.n	8004278 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004006:	4b46      	ldr	r3, [pc, #280]	@ (8004120 <HAL_RCC_OscConfig+0x4b8>)
 8004008:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0ed      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x388>
 8004014:	e015      	b.n	8004042 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004016:	f7fe f891 	bl	800213c <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800401c:	e00a      	b.n	8004034 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800401e:	f7fe f88d 	bl	800213c <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	f241 3288 	movw	r2, #5000	@ 0x1388
 800402c:	4293      	cmp	r3, r2
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e121      	b.n	8004278 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004034:	4b3a      	ldr	r3, [pc, #232]	@ (8004120 <HAL_RCC_OscConfig+0x4b8>)
 8004036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1ed      	bne.n	800401e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004042:	7ffb      	ldrb	r3, [r7, #31]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d105      	bne.n	8004054 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004048:	4b35      	ldr	r3, [pc, #212]	@ (8004120 <HAL_RCC_OscConfig+0x4b8>)
 800404a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800404c:	4a34      	ldr	r2, [pc, #208]	@ (8004120 <HAL_RCC_OscConfig+0x4b8>)
 800404e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004052:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0320 	and.w	r3, r3, #32
 800405c:	2b00      	cmp	r3, #0
 800405e:	d03c      	beq.n	80040da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d01c      	beq.n	80040a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004068:	4b2d      	ldr	r3, [pc, #180]	@ (8004120 <HAL_RCC_OscConfig+0x4b8>)
 800406a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800406e:	4a2c      	ldr	r2, [pc, #176]	@ (8004120 <HAL_RCC_OscConfig+0x4b8>)
 8004070:	f043 0301 	orr.w	r3, r3, #1
 8004074:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004078:	f7fe f860 	bl	800213c <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004080:	f7fe f85c 	bl	800213c <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e0f2      	b.n	8004278 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004092:	4b23      	ldr	r3, [pc, #140]	@ (8004120 <HAL_RCC_OscConfig+0x4b8>)
 8004094:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0ef      	beq.n	8004080 <HAL_RCC_OscConfig+0x418>
 80040a0:	e01b      	b.n	80040da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040a2:	4b1f      	ldr	r3, [pc, #124]	@ (8004120 <HAL_RCC_OscConfig+0x4b8>)
 80040a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004120 <HAL_RCC_OscConfig+0x4b8>)
 80040aa:	f023 0301 	bic.w	r3, r3, #1
 80040ae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b2:	f7fe f843 	bl	800213c <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80040b8:	e008      	b.n	80040cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040ba:	f7fe f83f 	bl	800213c <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e0d5      	b.n	8004278 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80040cc:	4b14      	ldr	r3, [pc, #80]	@ (8004120 <HAL_RCC_OscConfig+0x4b8>)
 80040ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1ef      	bne.n	80040ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 80c9 	beq.w	8004276 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004120 <HAL_RCC_OscConfig+0x4b8>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 030c 	and.w	r3, r3, #12
 80040ec:	2b0c      	cmp	r3, #12
 80040ee:	f000 8083 	beq.w	80041f8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d15e      	bne.n	80041b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040fa:	4b09      	ldr	r3, [pc, #36]	@ (8004120 <HAL_RCC_OscConfig+0x4b8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a08      	ldr	r2, [pc, #32]	@ (8004120 <HAL_RCC_OscConfig+0x4b8>)
 8004100:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004106:	f7fe f819 	bl	800213c <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800410c:	e00c      	b.n	8004128 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800410e:	f7fe f815 	bl	800213c <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d905      	bls.n	8004128 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e0ab      	b.n	8004278 <HAL_RCC_OscConfig+0x610>
 8004120:	40021000 	.word	0x40021000
 8004124:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004128:	4b55      	ldr	r3, [pc, #340]	@ (8004280 <HAL_RCC_OscConfig+0x618>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1ec      	bne.n	800410e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004134:	4b52      	ldr	r3, [pc, #328]	@ (8004280 <HAL_RCC_OscConfig+0x618>)
 8004136:	68da      	ldr	r2, [r3, #12]
 8004138:	4b52      	ldr	r3, [pc, #328]	@ (8004284 <HAL_RCC_OscConfig+0x61c>)
 800413a:	4013      	ands	r3, r2
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6a11      	ldr	r1, [r2, #32]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004144:	3a01      	subs	r2, #1
 8004146:	0112      	lsls	r2, r2, #4
 8004148:	4311      	orrs	r1, r2
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800414e:	0212      	lsls	r2, r2, #8
 8004150:	4311      	orrs	r1, r2
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004156:	0852      	lsrs	r2, r2, #1
 8004158:	3a01      	subs	r2, #1
 800415a:	0552      	lsls	r2, r2, #21
 800415c:	4311      	orrs	r1, r2
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004162:	0852      	lsrs	r2, r2, #1
 8004164:	3a01      	subs	r2, #1
 8004166:	0652      	lsls	r2, r2, #25
 8004168:	4311      	orrs	r1, r2
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800416e:	06d2      	lsls	r2, r2, #27
 8004170:	430a      	orrs	r2, r1
 8004172:	4943      	ldr	r1, [pc, #268]	@ (8004280 <HAL_RCC_OscConfig+0x618>)
 8004174:	4313      	orrs	r3, r2
 8004176:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004178:	4b41      	ldr	r3, [pc, #260]	@ (8004280 <HAL_RCC_OscConfig+0x618>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a40      	ldr	r2, [pc, #256]	@ (8004280 <HAL_RCC_OscConfig+0x618>)
 800417e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004182:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004184:	4b3e      	ldr	r3, [pc, #248]	@ (8004280 <HAL_RCC_OscConfig+0x618>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	4a3d      	ldr	r2, [pc, #244]	@ (8004280 <HAL_RCC_OscConfig+0x618>)
 800418a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800418e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004190:	f7fd ffd4 	bl	800213c <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004198:	f7fd ffd0 	bl	800213c <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e066      	b.n	8004278 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041aa:	4b35      	ldr	r3, [pc, #212]	@ (8004280 <HAL_RCC_OscConfig+0x618>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d0f0      	beq.n	8004198 <HAL_RCC_OscConfig+0x530>
 80041b6:	e05e      	b.n	8004276 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b8:	4b31      	ldr	r3, [pc, #196]	@ (8004280 <HAL_RCC_OscConfig+0x618>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a30      	ldr	r2, [pc, #192]	@ (8004280 <HAL_RCC_OscConfig+0x618>)
 80041be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c4:	f7fd ffba 	bl	800213c <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041cc:	f7fd ffb6 	bl	800213c <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e04c      	b.n	8004278 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041de:	4b28      	ldr	r3, [pc, #160]	@ (8004280 <HAL_RCC_OscConfig+0x618>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1f0      	bne.n	80041cc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80041ea:	4b25      	ldr	r3, [pc, #148]	@ (8004280 <HAL_RCC_OscConfig+0x618>)
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	4924      	ldr	r1, [pc, #144]	@ (8004280 <HAL_RCC_OscConfig+0x618>)
 80041f0:	4b25      	ldr	r3, [pc, #148]	@ (8004288 <HAL_RCC_OscConfig+0x620>)
 80041f2:	4013      	ands	r3, r2
 80041f4:	60cb      	str	r3, [r1, #12]
 80041f6:	e03e      	b.n	8004276 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d101      	bne.n	8004204 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e039      	b.n	8004278 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004204:	4b1e      	ldr	r3, [pc, #120]	@ (8004280 <HAL_RCC_OscConfig+0x618>)
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f003 0203 	and.w	r2, r3, #3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	429a      	cmp	r2, r3
 8004216:	d12c      	bne.n	8004272 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004222:	3b01      	subs	r3, #1
 8004224:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004226:	429a      	cmp	r2, r3
 8004228:	d123      	bne.n	8004272 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004234:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004236:	429a      	cmp	r2, r3
 8004238:	d11b      	bne.n	8004272 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004244:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004246:	429a      	cmp	r2, r3
 8004248:	d113      	bne.n	8004272 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004254:	085b      	lsrs	r3, r3, #1
 8004256:	3b01      	subs	r3, #1
 8004258:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800425a:	429a      	cmp	r2, r3
 800425c:	d109      	bne.n	8004272 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004268:	085b      	lsrs	r3, r3, #1
 800426a:	3b01      	subs	r3, #1
 800426c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800426e:	429a      	cmp	r2, r3
 8004270:	d001      	beq.n	8004276 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e000      	b.n	8004278 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3720      	adds	r7, #32
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40021000 	.word	0x40021000
 8004284:	019f800c 	.word	0x019f800c
 8004288:	feeefffc 	.word	0xfeeefffc

0800428c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004296:	2300      	movs	r3, #0
 8004298:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e11e      	b.n	80044e2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042a4:	4b91      	ldr	r3, [pc, #580]	@ (80044ec <HAL_RCC_ClockConfig+0x260>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d910      	bls.n	80042d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b2:	4b8e      	ldr	r3, [pc, #568]	@ (80044ec <HAL_RCC_ClockConfig+0x260>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f023 020f 	bic.w	r2, r3, #15
 80042ba:	498c      	ldr	r1, [pc, #560]	@ (80044ec <HAL_RCC_ClockConfig+0x260>)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	4313      	orrs	r3, r2
 80042c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042c2:	4b8a      	ldr	r3, [pc, #552]	@ (80044ec <HAL_RCC_ClockConfig+0x260>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d001      	beq.n	80042d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e106      	b.n	80044e2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d073      	beq.n	80043c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2b03      	cmp	r3, #3
 80042e6:	d129      	bne.n	800433c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042e8:	4b81      	ldr	r3, [pc, #516]	@ (80044f0 <HAL_RCC_ClockConfig+0x264>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e0f4      	b.n	80044e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80042f8:	f000 f99e 	bl	8004638 <RCC_GetSysClockFreqFromPLLSource>
 80042fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	4a7c      	ldr	r2, [pc, #496]	@ (80044f4 <HAL_RCC_ClockConfig+0x268>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d93f      	bls.n	8004386 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004306:	4b7a      	ldr	r3, [pc, #488]	@ (80044f0 <HAL_RCC_ClockConfig+0x264>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d009      	beq.n	8004326 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800431a:	2b00      	cmp	r3, #0
 800431c:	d033      	beq.n	8004386 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004322:	2b00      	cmp	r3, #0
 8004324:	d12f      	bne.n	8004386 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004326:	4b72      	ldr	r3, [pc, #456]	@ (80044f0 <HAL_RCC_ClockConfig+0x264>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800432e:	4a70      	ldr	r2, [pc, #448]	@ (80044f0 <HAL_RCC_ClockConfig+0x264>)
 8004330:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004334:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004336:	2380      	movs	r3, #128	@ 0x80
 8004338:	617b      	str	r3, [r7, #20]
 800433a:	e024      	b.n	8004386 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	2b02      	cmp	r3, #2
 8004342:	d107      	bne.n	8004354 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004344:	4b6a      	ldr	r3, [pc, #424]	@ (80044f0 <HAL_RCC_ClockConfig+0x264>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d109      	bne.n	8004364 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e0c6      	b.n	80044e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004354:	4b66      	ldr	r3, [pc, #408]	@ (80044f0 <HAL_RCC_ClockConfig+0x264>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e0be      	b.n	80044e2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004364:	f000 f8ce 	bl	8004504 <HAL_RCC_GetSysClockFreq>
 8004368:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	4a61      	ldr	r2, [pc, #388]	@ (80044f4 <HAL_RCC_ClockConfig+0x268>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d909      	bls.n	8004386 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004372:	4b5f      	ldr	r3, [pc, #380]	@ (80044f0 <HAL_RCC_ClockConfig+0x264>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800437a:	4a5d      	ldr	r2, [pc, #372]	@ (80044f0 <HAL_RCC_ClockConfig+0x264>)
 800437c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004380:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004382:	2380      	movs	r3, #128	@ 0x80
 8004384:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004386:	4b5a      	ldr	r3, [pc, #360]	@ (80044f0 <HAL_RCC_ClockConfig+0x264>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f023 0203 	bic.w	r2, r3, #3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	4957      	ldr	r1, [pc, #348]	@ (80044f0 <HAL_RCC_ClockConfig+0x264>)
 8004394:	4313      	orrs	r3, r2
 8004396:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004398:	f7fd fed0 	bl	800213c <HAL_GetTick>
 800439c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800439e:	e00a      	b.n	80043b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043a0:	f7fd fecc 	bl	800213c <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e095      	b.n	80044e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043b6:	4b4e      	ldr	r3, [pc, #312]	@ (80044f0 <HAL_RCC_ClockConfig+0x264>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 020c 	and.w	r2, r3, #12
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d1eb      	bne.n	80043a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d023      	beq.n	800441c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d005      	beq.n	80043ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043e0:	4b43      	ldr	r3, [pc, #268]	@ (80044f0 <HAL_RCC_ClockConfig+0x264>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	4a42      	ldr	r2, [pc, #264]	@ (80044f0 <HAL_RCC_ClockConfig+0x264>)
 80043e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80043ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0308 	and.w	r3, r3, #8
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d007      	beq.n	8004408 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80043f8:	4b3d      	ldr	r3, [pc, #244]	@ (80044f0 <HAL_RCC_ClockConfig+0x264>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004400:	4a3b      	ldr	r2, [pc, #236]	@ (80044f0 <HAL_RCC_ClockConfig+0x264>)
 8004402:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004406:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004408:	4b39      	ldr	r3, [pc, #228]	@ (80044f0 <HAL_RCC_ClockConfig+0x264>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	4936      	ldr	r1, [pc, #216]	@ (80044f0 <HAL_RCC_ClockConfig+0x264>)
 8004416:	4313      	orrs	r3, r2
 8004418:	608b      	str	r3, [r1, #8]
 800441a:	e008      	b.n	800442e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	2b80      	cmp	r3, #128	@ 0x80
 8004420:	d105      	bne.n	800442e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004422:	4b33      	ldr	r3, [pc, #204]	@ (80044f0 <HAL_RCC_ClockConfig+0x264>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	4a32      	ldr	r2, [pc, #200]	@ (80044f0 <HAL_RCC_ClockConfig+0x264>)
 8004428:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800442c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800442e:	4b2f      	ldr	r3, [pc, #188]	@ (80044ec <HAL_RCC_ClockConfig+0x260>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 030f 	and.w	r3, r3, #15
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	429a      	cmp	r2, r3
 800443a:	d21d      	bcs.n	8004478 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800443c:	4b2b      	ldr	r3, [pc, #172]	@ (80044ec <HAL_RCC_ClockConfig+0x260>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f023 020f 	bic.w	r2, r3, #15
 8004444:	4929      	ldr	r1, [pc, #164]	@ (80044ec <HAL_RCC_ClockConfig+0x260>)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	4313      	orrs	r3, r2
 800444a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800444c:	f7fd fe76 	bl	800213c <HAL_GetTick>
 8004450:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004452:	e00a      	b.n	800446a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004454:	f7fd fe72 	bl	800213c <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004462:	4293      	cmp	r3, r2
 8004464:	d901      	bls.n	800446a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e03b      	b.n	80044e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800446a:	4b20      	ldr	r3, [pc, #128]	@ (80044ec <HAL_RCC_ClockConfig+0x260>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	429a      	cmp	r2, r3
 8004476:	d1ed      	bne.n	8004454 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b00      	cmp	r3, #0
 8004482:	d008      	beq.n	8004496 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004484:	4b1a      	ldr	r3, [pc, #104]	@ (80044f0 <HAL_RCC_ClockConfig+0x264>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	4917      	ldr	r1, [pc, #92]	@ (80044f0 <HAL_RCC_ClockConfig+0x264>)
 8004492:	4313      	orrs	r3, r2
 8004494:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0308 	and.w	r3, r3, #8
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d009      	beq.n	80044b6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044a2:	4b13      	ldr	r3, [pc, #76]	@ (80044f0 <HAL_RCC_ClockConfig+0x264>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	490f      	ldr	r1, [pc, #60]	@ (80044f0 <HAL_RCC_ClockConfig+0x264>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044b6:	f000 f825 	bl	8004504 <HAL_RCC_GetSysClockFreq>
 80044ba:	4602      	mov	r2, r0
 80044bc:	4b0c      	ldr	r3, [pc, #48]	@ (80044f0 <HAL_RCC_ClockConfig+0x264>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	091b      	lsrs	r3, r3, #4
 80044c2:	f003 030f 	and.w	r3, r3, #15
 80044c6:	490c      	ldr	r1, [pc, #48]	@ (80044f8 <HAL_RCC_ClockConfig+0x26c>)
 80044c8:	5ccb      	ldrb	r3, [r1, r3]
 80044ca:	f003 031f 	and.w	r3, r3, #31
 80044ce:	fa22 f303 	lsr.w	r3, r2, r3
 80044d2:	4a0a      	ldr	r2, [pc, #40]	@ (80044fc <HAL_RCC_ClockConfig+0x270>)
 80044d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80044d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004500 <HAL_RCC_ClockConfig+0x274>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fd fde2 	bl	80020a4 <HAL_InitTick>
 80044e0:	4603      	mov	r3, r0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3718      	adds	r7, #24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	40022000 	.word	0x40022000
 80044f0:	40021000 	.word	0x40021000
 80044f4:	04c4b400 	.word	0x04c4b400
 80044f8:	0800617c 	.word	0x0800617c
 80044fc:	20000000 	.word	0x20000000
 8004500:	20000004 	.word	0x20000004

08004504 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004504:	b480      	push	{r7}
 8004506:	b087      	sub	sp, #28
 8004508:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800450a:	4b2c      	ldr	r3, [pc, #176]	@ (80045bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 030c 	and.w	r3, r3, #12
 8004512:	2b04      	cmp	r3, #4
 8004514:	d102      	bne.n	800451c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004516:	4b2a      	ldr	r3, [pc, #168]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004518:	613b      	str	r3, [r7, #16]
 800451a:	e047      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800451c:	4b27      	ldr	r3, [pc, #156]	@ (80045bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f003 030c 	and.w	r3, r3, #12
 8004524:	2b08      	cmp	r3, #8
 8004526:	d102      	bne.n	800452e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004528:	4b26      	ldr	r3, [pc, #152]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800452a:	613b      	str	r3, [r7, #16]
 800452c:	e03e      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800452e:	4b23      	ldr	r3, [pc, #140]	@ (80045bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 030c 	and.w	r3, r3, #12
 8004536:	2b0c      	cmp	r3, #12
 8004538:	d136      	bne.n	80045a8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800453a:	4b20      	ldr	r3, [pc, #128]	@ (80045bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f003 0303 	and.w	r3, r3, #3
 8004542:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004544:	4b1d      	ldr	r3, [pc, #116]	@ (80045bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	091b      	lsrs	r3, r3, #4
 800454a:	f003 030f 	and.w	r3, r3, #15
 800454e:	3301      	adds	r3, #1
 8004550:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2b03      	cmp	r3, #3
 8004556:	d10c      	bne.n	8004572 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004558:	4a1a      	ldr	r2, [pc, #104]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004560:	4a16      	ldr	r2, [pc, #88]	@ (80045bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004562:	68d2      	ldr	r2, [r2, #12]
 8004564:	0a12      	lsrs	r2, r2, #8
 8004566:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800456a:	fb02 f303 	mul.w	r3, r2, r3
 800456e:	617b      	str	r3, [r7, #20]
      break;
 8004570:	e00c      	b.n	800458c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004572:	4a13      	ldr	r2, [pc, #76]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	fbb2 f3f3 	udiv	r3, r2, r3
 800457a:	4a10      	ldr	r2, [pc, #64]	@ (80045bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800457c:	68d2      	ldr	r2, [r2, #12]
 800457e:	0a12      	lsrs	r2, r2, #8
 8004580:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004584:	fb02 f303 	mul.w	r3, r2, r3
 8004588:	617b      	str	r3, [r7, #20]
      break;
 800458a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800458c:	4b0b      	ldr	r3, [pc, #44]	@ (80045bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	0e5b      	lsrs	r3, r3, #25
 8004592:	f003 0303 	and.w	r3, r3, #3
 8004596:	3301      	adds	r3, #1
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a4:	613b      	str	r3, [r7, #16]
 80045a6:	e001      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80045ac:	693b      	ldr	r3, [r7, #16]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	371c      	adds	r7, #28
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	40021000 	.word	0x40021000
 80045c0:	00f42400 	.word	0x00f42400
 80045c4:	007a1200 	.word	0x007a1200

080045c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045cc:	4b03      	ldr	r3, [pc, #12]	@ (80045dc <HAL_RCC_GetHCLKFreq+0x14>)
 80045ce:	681b      	ldr	r3, [r3, #0]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	20000000 	.word	0x20000000

080045e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80045e4:	f7ff fff0 	bl	80045c8 <HAL_RCC_GetHCLKFreq>
 80045e8:	4602      	mov	r2, r0
 80045ea:	4b06      	ldr	r3, [pc, #24]	@ (8004604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	0a1b      	lsrs	r3, r3, #8
 80045f0:	f003 0307 	and.w	r3, r3, #7
 80045f4:	4904      	ldr	r1, [pc, #16]	@ (8004608 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045f6:	5ccb      	ldrb	r3, [r1, r3]
 80045f8:	f003 031f 	and.w	r3, r3, #31
 80045fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004600:	4618      	mov	r0, r3
 8004602:	bd80      	pop	{r7, pc}
 8004604:	40021000 	.word	0x40021000
 8004608:	0800618c 	.word	0x0800618c

0800460c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004610:	f7ff ffda 	bl	80045c8 <HAL_RCC_GetHCLKFreq>
 8004614:	4602      	mov	r2, r0
 8004616:	4b06      	ldr	r3, [pc, #24]	@ (8004630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	0adb      	lsrs	r3, r3, #11
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	4904      	ldr	r1, [pc, #16]	@ (8004634 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004622:	5ccb      	ldrb	r3, [r1, r3]
 8004624:	f003 031f 	and.w	r3, r3, #31
 8004628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800462c:	4618      	mov	r0, r3
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40021000 	.word	0x40021000
 8004634:	0800618c 	.word	0x0800618c

08004638 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004638:	b480      	push	{r7}
 800463a:	b087      	sub	sp, #28
 800463c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800463e:	4b1e      	ldr	r3, [pc, #120]	@ (80046b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004648:	4b1b      	ldr	r3, [pc, #108]	@ (80046b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	091b      	lsrs	r3, r3, #4
 800464e:	f003 030f 	and.w	r3, r3, #15
 8004652:	3301      	adds	r3, #1
 8004654:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	2b03      	cmp	r3, #3
 800465a:	d10c      	bne.n	8004676 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800465c:	4a17      	ldr	r2, [pc, #92]	@ (80046bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	fbb2 f3f3 	udiv	r3, r2, r3
 8004664:	4a14      	ldr	r2, [pc, #80]	@ (80046b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004666:	68d2      	ldr	r2, [r2, #12]
 8004668:	0a12      	lsrs	r2, r2, #8
 800466a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800466e:	fb02 f303 	mul.w	r3, r2, r3
 8004672:	617b      	str	r3, [r7, #20]
    break;
 8004674:	e00c      	b.n	8004690 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004676:	4a12      	ldr	r2, [pc, #72]	@ (80046c0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	fbb2 f3f3 	udiv	r3, r2, r3
 800467e:	4a0e      	ldr	r2, [pc, #56]	@ (80046b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004680:	68d2      	ldr	r2, [r2, #12]
 8004682:	0a12      	lsrs	r2, r2, #8
 8004684:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004688:	fb02 f303 	mul.w	r3, r2, r3
 800468c:	617b      	str	r3, [r7, #20]
    break;
 800468e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004690:	4b09      	ldr	r3, [pc, #36]	@ (80046b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	0e5b      	lsrs	r3, r3, #25
 8004696:	f003 0303 	and.w	r3, r3, #3
 800469a:	3301      	adds	r3, #1
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80046aa:	687b      	ldr	r3, [r7, #4]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	371c      	adds	r7, #28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	40021000 	.word	0x40021000
 80046bc:	007a1200 	.word	0x007a1200
 80046c0:	00f42400 	.word	0x00f42400

080046c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046cc:	2300      	movs	r3, #0
 80046ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046d0:	2300      	movs	r3, #0
 80046d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 8098 	beq.w	8004812 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046e2:	2300      	movs	r3, #0
 80046e4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046e6:	4b43      	ldr	r3, [pc, #268]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10d      	bne.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046f2:	4b40      	ldr	r3, [pc, #256]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f6:	4a3f      	ldr	r2, [pc, #252]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80046fe:	4b3d      	ldr	r3, [pc, #244]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004706:	60bb      	str	r3, [r7, #8]
 8004708:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800470a:	2301      	movs	r3, #1
 800470c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800470e:	4b3a      	ldr	r3, [pc, #232]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a39      	ldr	r2, [pc, #228]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004714:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004718:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800471a:	f7fd fd0f 	bl	800213c <HAL_GetTick>
 800471e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004720:	e009      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004722:	f7fd fd0b 	bl	800213c <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d902      	bls.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	74fb      	strb	r3, [r7, #19]
        break;
 8004734:	e005      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004736:	4b30      	ldr	r3, [pc, #192]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800473e:	2b00      	cmp	r3, #0
 8004740:	d0ef      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004742:	7cfb      	ldrb	r3, [r7, #19]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d159      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004748:	4b2a      	ldr	r3, [pc, #168]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800474a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800474e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004752:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d01e      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	429a      	cmp	r2, r3
 8004762:	d019      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004764:	4b23      	ldr	r3, [pc, #140]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800476a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800476e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004770:	4b20      	ldr	r3, [pc, #128]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004776:	4a1f      	ldr	r2, [pc, #124]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800477c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004780:	4b1c      	ldr	r3, [pc, #112]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004786:	4a1b      	ldr	r2, [pc, #108]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004788:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800478c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004790:	4a18      	ldr	r2, [pc, #96]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d016      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a2:	f7fd fccb 	bl	800213c <HAL_GetTick>
 80047a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047a8:	e00b      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047aa:	f7fd fcc7 	bl	800213c <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d902      	bls.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	74fb      	strb	r3, [r7, #19]
            break;
 80047c0:	e006      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047c2:	4b0c      	ldr	r3, [pc, #48]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0ec      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80047d0:	7cfb      	ldrb	r3, [r7, #19]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10b      	bne.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047d6:	4b07      	ldr	r3, [pc, #28]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e4:	4903      	ldr	r1, [pc, #12]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80047ec:	e008      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047ee:	7cfb      	ldrb	r3, [r7, #19]
 80047f0:	74bb      	strb	r3, [r7, #18]
 80047f2:	e005      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80047f4:	40021000 	.word	0x40021000
 80047f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047fc:	7cfb      	ldrb	r3, [r7, #19]
 80047fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004800:	7c7b      	ldrb	r3, [r7, #17]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d105      	bne.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004806:	4ba6      	ldr	r3, [pc, #664]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800480a:	4aa5      	ldr	r2, [pc, #660]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800480c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004810:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800481e:	4ba0      	ldr	r3, [pc, #640]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004820:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004824:	f023 0203 	bic.w	r2, r3, #3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	499c      	ldr	r1, [pc, #624]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800482e:	4313      	orrs	r3, r2
 8004830:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00a      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004840:	4b97      	ldr	r3, [pc, #604]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004846:	f023 020c 	bic.w	r2, r3, #12
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	4994      	ldr	r1, [pc, #592]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004850:	4313      	orrs	r3, r2
 8004852:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0304 	and.w	r3, r3, #4
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00a      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004862:	4b8f      	ldr	r3, [pc, #572]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004868:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	498b      	ldr	r1, [pc, #556]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004872:	4313      	orrs	r3, r2
 8004874:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0308 	and.w	r3, r3, #8
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00a      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004884:	4b86      	ldr	r3, [pc, #536]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800488a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	4983      	ldr	r1, [pc, #524]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004894:	4313      	orrs	r3, r2
 8004896:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0320 	and.w	r3, r3, #32
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048a6:	4b7e      	ldr	r3, [pc, #504]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	497a      	ldr	r1, [pc, #488]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00a      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048c8:	4b75      	ldr	r3, [pc, #468]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	4972      	ldr	r1, [pc, #456]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048ea:	4b6d      	ldr	r3, [pc, #436]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048f0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	69db      	ldr	r3, [r3, #28]
 80048f8:	4969      	ldr	r1, [pc, #420]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00a      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800490c:	4b64      	ldr	r3, [pc, #400]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800490e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004912:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	4961      	ldr	r1, [pc, #388]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800491c:	4313      	orrs	r3, r2
 800491e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800492e:	4b5c      	ldr	r3, [pc, #368]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004934:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493c:	4958      	ldr	r1, [pc, #352]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800493e:	4313      	orrs	r3, r2
 8004940:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800494c:	2b00      	cmp	r3, #0
 800494e:	d015      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004950:	4b53      	ldr	r3, [pc, #332]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004956:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800495e:	4950      	ldr	r1, [pc, #320]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004960:	4313      	orrs	r3, r2
 8004962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800496a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800496e:	d105      	bne.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004970:	4b4b      	ldr	r3, [pc, #300]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	4a4a      	ldr	r2, [pc, #296]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004976:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800497a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004984:	2b00      	cmp	r3, #0
 8004986:	d015      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004988:	4b45      	ldr	r3, [pc, #276]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800498a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800498e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004996:	4942      	ldr	r1, [pc, #264]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004998:	4313      	orrs	r3, r2
 800499a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049a6:	d105      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049a8:	4b3d      	ldr	r3, [pc, #244]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	4a3c      	ldr	r2, [pc, #240]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049b2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d015      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80049c0:	4b37      	ldr	r3, [pc, #220]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ce:	4934      	ldr	r1, [pc, #208]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049de:	d105      	bne.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049e0:	4b2f      	ldr	r3, [pc, #188]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	4a2e      	ldr	r2, [pc, #184]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049ea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d015      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049f8:	4b29      	ldr	r3, [pc, #164]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a06:	4926      	ldr	r1, [pc, #152]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a16:	d105      	bne.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a18:	4b21      	ldr	r3, [pc, #132]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	4a20      	ldr	r2, [pc, #128]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a22:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d015      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a30:	4b1b      	ldr	r3, [pc, #108]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a36:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a3e:	4918      	ldr	r1, [pc, #96]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a4e:	d105      	bne.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a50:	4b13      	ldr	r3, [pc, #76]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	4a12      	ldr	r2, [pc, #72]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a5a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d015      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004a68:	4b0d      	ldr	r3, [pc, #52]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a6e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a76:	490a      	ldr	r1, [pc, #40]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a86:	d105      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a88:	4b05      	ldr	r3, [pc, #20]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	4a04      	ldr	r2, [pc, #16]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a92:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004a94:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	40021000 	.word	0x40021000

08004aa4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d070      	beq.n	8004b98 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d106      	bne.n	8004ad0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7fd f992 	bl	8001df4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f003 0310 	and.w	r3, r3, #16
 8004ae2:	2b10      	cmp	r3, #16
 8004ae4:	d04f      	beq.n	8004b86 <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	22ca      	movs	r2, #202	@ 0xca
 8004aec:	625a      	str	r2, [r3, #36]	@ 0x24
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2253      	movs	r2, #83	@ 0x53
 8004af4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f878 	bl	8004bec <RTC_EnterInitMode>
 8004afc:	4603      	mov	r3, r0
 8004afe:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004b00:	7bfb      	ldrb	r3, [r7, #15]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d126      	bne.n	8004b54 <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6812      	ldr	r2, [r2, #0]
 8004b10:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8004b14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b18:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6999      	ldr	r1, [r3, #24]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68d9      	ldr	r1, [r3, #12]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	041a      	lsls	r2, r3, #16
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f884 	bl	8004c58 <RTC_ExitInitMode>
 8004b50:	4603      	mov	r3, r0
 8004b52:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d110      	bne.n	8004b7c <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a1a      	ldr	r2, [r3, #32]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	431a      	orrs	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	22ff      	movs	r2, #255	@ 0xff
 8004b82:	625a      	str	r2, [r3, #36]	@ 0x24
 8004b84:	e001      	b.n	8004b8a <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004b86:	2300      	movs	r3, #0
 8004b88:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004b8a:	7bfb      	ldrb	r3, [r7, #15]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d103      	bne.n	8004b98 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8004b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
	...

08004ba4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8004be8 <HAL_RTC_WaitForSynchro+0x44>)
 8004bb2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004bb4:	f7fd fac2 	bl	800213c <HAL_GetTick>
 8004bb8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8004bba:	e009      	b.n	8004bd0 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004bbc:	f7fd fabe 	bl	800213c <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004bca:	d901      	bls.n	8004bd0 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e007      	b.n	8004be0 <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	f003 0320 	and.w	r3, r3, #32
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d0ee      	beq.n	8004bbc <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	0001005f 	.word	0x0001005f

08004bec <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d123      	bne.n	8004c4e <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004c14:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004c16:	f7fd fa91 	bl	800213c <HAL_GetTick>
 8004c1a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004c1c:	e00d      	b.n	8004c3a <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004c1e:	f7fd fa8d 	bl	800213c <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004c2c:	d905      	bls.n	8004c3a <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2203      	movs	r2, #3
 8004c36:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d102      	bne.n	8004c4e <RTC_EnterInitMode+0x62>
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
 8004c4a:	2b03      	cmp	r3, #3
 8004c4c:	d1e7      	bne.n	8004c1e <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 8004c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c72:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	f003 0320 	and.w	r3, r3, #32
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10c      	bne.n	8004c9c <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7ff ff8e 	bl	8004ba4 <HAL_RTC_WaitForSynchro>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d022      	beq.n	8004cd4 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2203      	movs	r2, #3
 8004c92:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	73fb      	strb	r3, [r7, #15]
 8004c9a:	e01b      	b.n	8004cd4 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699a      	ldr	r2, [r3, #24]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0220 	bic.w	r2, r2, #32
 8004caa:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7ff ff79 	bl	8004ba4 <HAL_RTC_WaitForSynchro>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d005      	beq.n	8004cc4 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2203      	movs	r2, #3
 8004cbc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699a      	ldr	r2, [r3, #24]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f042 0220 	orr.w	r2, r2, #32
 8004cd2:	619a      	str	r2, [r3, #24]
  }

  return status;
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b082      	sub	sp, #8
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e042      	b.n	8004d76 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d106      	bne.n	8004d08 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7fd f8b2 	bl	8001e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2224      	movs	r2, #36	@ 0x24
 8004d0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 0201 	bic.w	r2, r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d002      	beq.n	8004d2e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 fcc1 	bl	80056b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f9f2 	bl	8005118 <UART_SetConfig>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d101      	bne.n	8004d3e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e01b      	b.n	8004d76 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d4c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d5c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f042 0201 	orr.w	r2, r2, #1
 8004d6c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 fd40 	bl	80057f4 <UART_CheckIdleState>
 8004d74:	4603      	mov	r3, r0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b08a      	sub	sp, #40	@ 0x28
 8004d82:	af02      	add	r7, sp, #8
 8004d84:	60f8      	str	r0, [r7, #12]
 8004d86:	60b9      	str	r1, [r7, #8]
 8004d88:	603b      	str	r3, [r7, #0]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d94:	2b20      	cmp	r3, #32
 8004d96:	d17b      	bne.n	8004e90 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d002      	beq.n	8004da4 <HAL_UART_Transmit+0x26>
 8004d9e:	88fb      	ldrh	r3, [r7, #6]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e074      	b.n	8004e92 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2221      	movs	r2, #33	@ 0x21
 8004db4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004db8:	f7fd f9c0 	bl	800213c <HAL_GetTick>
 8004dbc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	88fa      	ldrh	r2, [r7, #6]
 8004dc2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	88fa      	ldrh	r2, [r7, #6]
 8004dca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dd6:	d108      	bne.n	8004dea <HAL_UART_Transmit+0x6c>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d104      	bne.n	8004dea <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004de0:	2300      	movs	r3, #0
 8004de2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	61bb      	str	r3, [r7, #24]
 8004de8:	e003      	b.n	8004df2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004df2:	e030      	b.n	8004e56 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	2180      	movs	r1, #128	@ 0x80
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 fda2 	bl	8005948 <UART_WaitOnFlagUntilTimeout>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d005      	beq.n	8004e16 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e03d      	b.n	8004e92 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10b      	bne.n	8004e34 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	461a      	mov	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e2a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	3302      	adds	r3, #2
 8004e30:	61bb      	str	r3, [r7, #24]
 8004e32:	e007      	b.n	8004e44 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	781a      	ldrb	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	3301      	adds	r3, #1
 8004e42:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1c8      	bne.n	8004df4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	2140      	movs	r1, #64	@ 0x40
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 fd6b 	bl	8005948 <UART_WaitOnFlagUntilTimeout>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d005      	beq.n	8004e84 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e006      	b.n	8004e92 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2220      	movs	r2, #32
 8004e88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	e000      	b.n	8004e92 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004e90:	2302      	movs	r3, #2
  }
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3720      	adds	r7, #32
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b08a      	sub	sp, #40	@ 0x28
 8004e9e:	af02      	add	r7, sp, #8
 8004ea0:	60f8      	str	r0, [r7, #12]
 8004ea2:	60b9      	str	r1, [r7, #8]
 8004ea4:	603b      	str	r3, [r7, #0]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004eb0:	2b20      	cmp	r3, #32
 8004eb2:	f040 80b5 	bne.w	8005020 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d002      	beq.n	8004ec2 <HAL_UART_Receive+0x28>
 8004ebc:	88fb      	ldrh	r3, [r7, #6]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e0ad      	b.n	8005022 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2222      	movs	r2, #34	@ 0x22
 8004ed2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004edc:	f7fd f92e 	bl	800213c <HAL_GetTick>
 8004ee0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	88fa      	ldrh	r2, [r7, #6]
 8004ee6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	88fa      	ldrh	r2, [r7, #6]
 8004eee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004efa:	d10e      	bne.n	8004f1a <HAL_UART_Receive+0x80>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d105      	bne.n	8004f10 <HAL_UART_Receive+0x76>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004f0a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004f0e:	e02d      	b.n	8004f6c <HAL_UART_Receive+0xd2>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	22ff      	movs	r2, #255	@ 0xff
 8004f14:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004f18:	e028      	b.n	8004f6c <HAL_UART_Receive+0xd2>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10d      	bne.n	8004f3e <HAL_UART_Receive+0xa4>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d104      	bne.n	8004f34 <HAL_UART_Receive+0x9a>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	22ff      	movs	r2, #255	@ 0xff
 8004f2e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004f32:	e01b      	b.n	8004f6c <HAL_UART_Receive+0xd2>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	227f      	movs	r2, #127	@ 0x7f
 8004f38:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004f3c:	e016      	b.n	8004f6c <HAL_UART_Receive+0xd2>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f46:	d10d      	bne.n	8004f64 <HAL_UART_Receive+0xca>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d104      	bne.n	8004f5a <HAL_UART_Receive+0xc0>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	227f      	movs	r2, #127	@ 0x7f
 8004f54:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004f58:	e008      	b.n	8004f6c <HAL_UART_Receive+0xd2>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	223f      	movs	r2, #63	@ 0x3f
 8004f5e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004f62:	e003      	b.n	8004f6c <HAL_UART_Receive+0xd2>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004f72:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f7c:	d108      	bne.n	8004f90 <HAL_UART_Receive+0xf6>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d104      	bne.n	8004f90 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004f86:	2300      	movs	r3, #0
 8004f88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	61bb      	str	r3, [r7, #24]
 8004f8e:	e003      	b.n	8004f98 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f94:	2300      	movs	r3, #0
 8004f96:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004f98:	e036      	b.n	8005008 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	2120      	movs	r1, #32
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 fccf 	bl	8005948 <UART_WaitOnFlagUntilTimeout>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d005      	beq.n	8004fbc <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e032      	b.n	8005022 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10c      	bne.n	8004fdc <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	8a7b      	ldrh	r3, [r7, #18]
 8004fcc:	4013      	ands	r3, r2
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	3302      	adds	r3, #2
 8004fd8:	61bb      	str	r3, [r7, #24]
 8004fda:	e00c      	b.n	8004ff6 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	8a7b      	ldrh	r3, [r7, #18]
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	4013      	ands	r3, r2
 8004fea:	b2da      	uxtb	r2, r3
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	3b01      	subs	r3, #1
 8005000:	b29a      	uxth	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800500e:	b29b      	uxth	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1c2      	bne.n	8004f9a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2220      	movs	r2, #32
 8005018:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800501c:	2300      	movs	r3, #0
 800501e:	e000      	b.n	8005022 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8005020:	2302      	movs	r3, #2
  }
}
 8005022:	4618      	mov	r0, r3
 8005024:	3720      	adds	r7, #32
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
	...

0800502c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b08a      	sub	sp, #40	@ 0x28
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	4613      	mov	r3, r2
 8005038:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005040:	2b20      	cmp	r3, #32
 8005042:	d137      	bne.n	80050b4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d002      	beq.n	8005050 <HAL_UART_Receive_DMA+0x24>
 800504a:	88fb      	ldrh	r3, [r7, #6]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e030      	b.n	80050b6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a18      	ldr	r2, [pc, #96]	@ (80050c0 <HAL_UART_Receive_DMA+0x94>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d01f      	beq.n	80050a4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d018      	beq.n	80050a4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	e853 3f00 	ldrex	r3, [r3]
 800507e:	613b      	str	r3, [r7, #16]
   return(result);
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005086:	627b      	str	r3, [r7, #36]	@ 0x24
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	461a      	mov	r2, r3
 800508e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005090:	623b      	str	r3, [r7, #32]
 8005092:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005094:	69f9      	ldr	r1, [r7, #28]
 8005096:	6a3a      	ldr	r2, [r7, #32]
 8005098:	e841 2300 	strex	r3, r2, [r1]
 800509c:	61bb      	str	r3, [r7, #24]
   return(result);
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1e6      	bne.n	8005072 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80050a4:	88fb      	ldrh	r3, [r7, #6]
 80050a6:	461a      	mov	r2, r3
 80050a8:	68b9      	ldr	r1, [r7, #8]
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f000 fcba 	bl	8005a24 <UART_Start_Receive_DMA>
 80050b0:	4603      	mov	r3, r0
 80050b2:	e000      	b.n	80050b6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80050b4:	2302      	movs	r3, #2
  }
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3728      	adds	r7, #40	@ 0x28
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	40008000 	.word	0x40008000

080050c4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	460b      	mov	r3, r1
 800510a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800511c:	b08c      	sub	sp, #48	@ 0x30
 800511e:	af00      	add	r7, sp, #0
 8005120:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005122:	2300      	movs	r3, #0
 8005124:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	689a      	ldr	r2, [r3, #8]
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	431a      	orrs	r2, r3
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	431a      	orrs	r2, r3
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	69db      	ldr	r3, [r3, #28]
 800513c:	4313      	orrs	r3, r2
 800513e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	4bab      	ldr	r3, [pc, #684]	@ (80053f4 <UART_SetConfig+0x2dc>)
 8005148:	4013      	ands	r3, r2
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	6812      	ldr	r2, [r2, #0]
 800514e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005150:	430b      	orrs	r3, r1
 8005152:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4aa0      	ldr	r2, [pc, #640]	@ (80053f8 <UART_SetConfig+0x2e0>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d004      	beq.n	8005184 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005180:	4313      	orrs	r3, r2
 8005182:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800518e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	6812      	ldr	r2, [r2, #0]
 8005196:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005198:	430b      	orrs	r3, r1
 800519a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a2:	f023 010f 	bic.w	r1, r3, #15
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a91      	ldr	r2, [pc, #580]	@ (80053fc <UART_SetConfig+0x2e4>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d125      	bne.n	8005208 <UART_SetConfig+0xf0>
 80051bc:	4b90      	ldr	r3, [pc, #576]	@ (8005400 <UART_SetConfig+0x2e8>)
 80051be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	2b03      	cmp	r3, #3
 80051c8:	d81a      	bhi.n	8005200 <UART_SetConfig+0xe8>
 80051ca:	a201      	add	r2, pc, #4	@ (adr r2, 80051d0 <UART_SetConfig+0xb8>)
 80051cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d0:	080051e1 	.word	0x080051e1
 80051d4:	080051f1 	.word	0x080051f1
 80051d8:	080051e9 	.word	0x080051e9
 80051dc:	080051f9 	.word	0x080051f9
 80051e0:	2301      	movs	r3, #1
 80051e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051e6:	e0d6      	b.n	8005396 <UART_SetConfig+0x27e>
 80051e8:	2302      	movs	r3, #2
 80051ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051ee:	e0d2      	b.n	8005396 <UART_SetConfig+0x27e>
 80051f0:	2304      	movs	r3, #4
 80051f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051f6:	e0ce      	b.n	8005396 <UART_SetConfig+0x27e>
 80051f8:	2308      	movs	r3, #8
 80051fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051fe:	e0ca      	b.n	8005396 <UART_SetConfig+0x27e>
 8005200:	2310      	movs	r3, #16
 8005202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005206:	e0c6      	b.n	8005396 <UART_SetConfig+0x27e>
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a7d      	ldr	r2, [pc, #500]	@ (8005404 <UART_SetConfig+0x2ec>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d138      	bne.n	8005284 <UART_SetConfig+0x16c>
 8005212:	4b7b      	ldr	r3, [pc, #492]	@ (8005400 <UART_SetConfig+0x2e8>)
 8005214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005218:	f003 030c 	and.w	r3, r3, #12
 800521c:	2b0c      	cmp	r3, #12
 800521e:	d82d      	bhi.n	800527c <UART_SetConfig+0x164>
 8005220:	a201      	add	r2, pc, #4	@ (adr r2, 8005228 <UART_SetConfig+0x110>)
 8005222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005226:	bf00      	nop
 8005228:	0800525d 	.word	0x0800525d
 800522c:	0800527d 	.word	0x0800527d
 8005230:	0800527d 	.word	0x0800527d
 8005234:	0800527d 	.word	0x0800527d
 8005238:	0800526d 	.word	0x0800526d
 800523c:	0800527d 	.word	0x0800527d
 8005240:	0800527d 	.word	0x0800527d
 8005244:	0800527d 	.word	0x0800527d
 8005248:	08005265 	.word	0x08005265
 800524c:	0800527d 	.word	0x0800527d
 8005250:	0800527d 	.word	0x0800527d
 8005254:	0800527d 	.word	0x0800527d
 8005258:	08005275 	.word	0x08005275
 800525c:	2300      	movs	r3, #0
 800525e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005262:	e098      	b.n	8005396 <UART_SetConfig+0x27e>
 8005264:	2302      	movs	r3, #2
 8005266:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800526a:	e094      	b.n	8005396 <UART_SetConfig+0x27e>
 800526c:	2304      	movs	r3, #4
 800526e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005272:	e090      	b.n	8005396 <UART_SetConfig+0x27e>
 8005274:	2308      	movs	r3, #8
 8005276:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800527a:	e08c      	b.n	8005396 <UART_SetConfig+0x27e>
 800527c:	2310      	movs	r3, #16
 800527e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005282:	e088      	b.n	8005396 <UART_SetConfig+0x27e>
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a5f      	ldr	r2, [pc, #380]	@ (8005408 <UART_SetConfig+0x2f0>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d125      	bne.n	80052da <UART_SetConfig+0x1c2>
 800528e:	4b5c      	ldr	r3, [pc, #368]	@ (8005400 <UART_SetConfig+0x2e8>)
 8005290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005294:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005298:	2b30      	cmp	r3, #48	@ 0x30
 800529a:	d016      	beq.n	80052ca <UART_SetConfig+0x1b2>
 800529c:	2b30      	cmp	r3, #48	@ 0x30
 800529e:	d818      	bhi.n	80052d2 <UART_SetConfig+0x1ba>
 80052a0:	2b20      	cmp	r3, #32
 80052a2:	d00a      	beq.n	80052ba <UART_SetConfig+0x1a2>
 80052a4:	2b20      	cmp	r3, #32
 80052a6:	d814      	bhi.n	80052d2 <UART_SetConfig+0x1ba>
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d002      	beq.n	80052b2 <UART_SetConfig+0x19a>
 80052ac:	2b10      	cmp	r3, #16
 80052ae:	d008      	beq.n	80052c2 <UART_SetConfig+0x1aa>
 80052b0:	e00f      	b.n	80052d2 <UART_SetConfig+0x1ba>
 80052b2:	2300      	movs	r3, #0
 80052b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052b8:	e06d      	b.n	8005396 <UART_SetConfig+0x27e>
 80052ba:	2302      	movs	r3, #2
 80052bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052c0:	e069      	b.n	8005396 <UART_SetConfig+0x27e>
 80052c2:	2304      	movs	r3, #4
 80052c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052c8:	e065      	b.n	8005396 <UART_SetConfig+0x27e>
 80052ca:	2308      	movs	r3, #8
 80052cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052d0:	e061      	b.n	8005396 <UART_SetConfig+0x27e>
 80052d2:	2310      	movs	r3, #16
 80052d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052d8:	e05d      	b.n	8005396 <UART_SetConfig+0x27e>
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a4b      	ldr	r2, [pc, #300]	@ (800540c <UART_SetConfig+0x2f4>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d125      	bne.n	8005330 <UART_SetConfig+0x218>
 80052e4:	4b46      	ldr	r3, [pc, #280]	@ (8005400 <UART_SetConfig+0x2e8>)
 80052e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80052ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80052f0:	d016      	beq.n	8005320 <UART_SetConfig+0x208>
 80052f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80052f4:	d818      	bhi.n	8005328 <UART_SetConfig+0x210>
 80052f6:	2b80      	cmp	r3, #128	@ 0x80
 80052f8:	d00a      	beq.n	8005310 <UART_SetConfig+0x1f8>
 80052fa:	2b80      	cmp	r3, #128	@ 0x80
 80052fc:	d814      	bhi.n	8005328 <UART_SetConfig+0x210>
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d002      	beq.n	8005308 <UART_SetConfig+0x1f0>
 8005302:	2b40      	cmp	r3, #64	@ 0x40
 8005304:	d008      	beq.n	8005318 <UART_SetConfig+0x200>
 8005306:	e00f      	b.n	8005328 <UART_SetConfig+0x210>
 8005308:	2300      	movs	r3, #0
 800530a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800530e:	e042      	b.n	8005396 <UART_SetConfig+0x27e>
 8005310:	2302      	movs	r3, #2
 8005312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005316:	e03e      	b.n	8005396 <UART_SetConfig+0x27e>
 8005318:	2304      	movs	r3, #4
 800531a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800531e:	e03a      	b.n	8005396 <UART_SetConfig+0x27e>
 8005320:	2308      	movs	r3, #8
 8005322:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005326:	e036      	b.n	8005396 <UART_SetConfig+0x27e>
 8005328:	2310      	movs	r3, #16
 800532a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800532e:	e032      	b.n	8005396 <UART_SetConfig+0x27e>
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a30      	ldr	r2, [pc, #192]	@ (80053f8 <UART_SetConfig+0x2e0>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d12a      	bne.n	8005390 <UART_SetConfig+0x278>
 800533a:	4b31      	ldr	r3, [pc, #196]	@ (8005400 <UART_SetConfig+0x2e8>)
 800533c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005340:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005344:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005348:	d01a      	beq.n	8005380 <UART_SetConfig+0x268>
 800534a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800534e:	d81b      	bhi.n	8005388 <UART_SetConfig+0x270>
 8005350:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005354:	d00c      	beq.n	8005370 <UART_SetConfig+0x258>
 8005356:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800535a:	d815      	bhi.n	8005388 <UART_SetConfig+0x270>
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <UART_SetConfig+0x250>
 8005360:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005364:	d008      	beq.n	8005378 <UART_SetConfig+0x260>
 8005366:	e00f      	b.n	8005388 <UART_SetConfig+0x270>
 8005368:	2300      	movs	r3, #0
 800536a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800536e:	e012      	b.n	8005396 <UART_SetConfig+0x27e>
 8005370:	2302      	movs	r3, #2
 8005372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005376:	e00e      	b.n	8005396 <UART_SetConfig+0x27e>
 8005378:	2304      	movs	r3, #4
 800537a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800537e:	e00a      	b.n	8005396 <UART_SetConfig+0x27e>
 8005380:	2308      	movs	r3, #8
 8005382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005386:	e006      	b.n	8005396 <UART_SetConfig+0x27e>
 8005388:	2310      	movs	r3, #16
 800538a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800538e:	e002      	b.n	8005396 <UART_SetConfig+0x27e>
 8005390:	2310      	movs	r3, #16
 8005392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a17      	ldr	r2, [pc, #92]	@ (80053f8 <UART_SetConfig+0x2e0>)
 800539c:	4293      	cmp	r3, r2
 800539e:	f040 80a8 	bne.w	80054f2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053a2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80053a6:	2b08      	cmp	r3, #8
 80053a8:	d834      	bhi.n	8005414 <UART_SetConfig+0x2fc>
 80053aa:	a201      	add	r2, pc, #4	@ (adr r2, 80053b0 <UART_SetConfig+0x298>)
 80053ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b0:	080053d5 	.word	0x080053d5
 80053b4:	08005415 	.word	0x08005415
 80053b8:	080053dd 	.word	0x080053dd
 80053bc:	08005415 	.word	0x08005415
 80053c0:	080053e3 	.word	0x080053e3
 80053c4:	08005415 	.word	0x08005415
 80053c8:	08005415 	.word	0x08005415
 80053cc:	08005415 	.word	0x08005415
 80053d0:	080053eb 	.word	0x080053eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053d4:	f7ff f904 	bl	80045e0 <HAL_RCC_GetPCLK1Freq>
 80053d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053da:	e021      	b.n	8005420 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005410 <UART_SetConfig+0x2f8>)
 80053de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053e0:	e01e      	b.n	8005420 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053e2:	f7ff f88f 	bl	8004504 <HAL_RCC_GetSysClockFreq>
 80053e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053e8:	e01a      	b.n	8005420 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053f0:	e016      	b.n	8005420 <UART_SetConfig+0x308>
 80053f2:	bf00      	nop
 80053f4:	cfff69f3 	.word	0xcfff69f3
 80053f8:	40008000 	.word	0x40008000
 80053fc:	40013800 	.word	0x40013800
 8005400:	40021000 	.word	0x40021000
 8005404:	40004400 	.word	0x40004400
 8005408:	40004800 	.word	0x40004800
 800540c:	40004c00 	.word	0x40004c00
 8005410:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005414:	2300      	movs	r3, #0
 8005416:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800541e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005422:	2b00      	cmp	r3, #0
 8005424:	f000 812a 	beq.w	800567c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542c:	4a9e      	ldr	r2, [pc, #632]	@ (80056a8 <UART_SetConfig+0x590>)
 800542e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005432:	461a      	mov	r2, r3
 8005434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005436:	fbb3 f3f2 	udiv	r3, r3, r2
 800543a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	4613      	mov	r3, r2
 8005442:	005b      	lsls	r3, r3, #1
 8005444:	4413      	add	r3, r2
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	429a      	cmp	r2, r3
 800544a:	d305      	bcc.n	8005458 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005452:	69ba      	ldr	r2, [r7, #24]
 8005454:	429a      	cmp	r2, r3
 8005456:	d903      	bls.n	8005460 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800545e:	e10d      	b.n	800567c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005462:	2200      	movs	r2, #0
 8005464:	60bb      	str	r3, [r7, #8]
 8005466:	60fa      	str	r2, [r7, #12]
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546c:	4a8e      	ldr	r2, [pc, #568]	@ (80056a8 <UART_SetConfig+0x590>)
 800546e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005472:	b29b      	uxth	r3, r3
 8005474:	2200      	movs	r2, #0
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	607a      	str	r2, [r7, #4]
 800547a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800547e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005482:	f7fb fae7 	bl	8000a54 <__aeabi_uldivmod>
 8005486:	4602      	mov	r2, r0
 8005488:	460b      	mov	r3, r1
 800548a:	4610      	mov	r0, r2
 800548c:	4619      	mov	r1, r3
 800548e:	f04f 0200 	mov.w	r2, #0
 8005492:	f04f 0300 	mov.w	r3, #0
 8005496:	020b      	lsls	r3, r1, #8
 8005498:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800549c:	0202      	lsls	r2, r0, #8
 800549e:	6979      	ldr	r1, [r7, #20]
 80054a0:	6849      	ldr	r1, [r1, #4]
 80054a2:	0849      	lsrs	r1, r1, #1
 80054a4:	2000      	movs	r0, #0
 80054a6:	460c      	mov	r4, r1
 80054a8:	4605      	mov	r5, r0
 80054aa:	eb12 0804 	adds.w	r8, r2, r4
 80054ae:	eb43 0905 	adc.w	r9, r3, r5
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	469a      	mov	sl, r3
 80054ba:	4693      	mov	fp, r2
 80054bc:	4652      	mov	r2, sl
 80054be:	465b      	mov	r3, fp
 80054c0:	4640      	mov	r0, r8
 80054c2:	4649      	mov	r1, r9
 80054c4:	f7fb fac6 	bl	8000a54 <__aeabi_uldivmod>
 80054c8:	4602      	mov	r2, r0
 80054ca:	460b      	mov	r3, r1
 80054cc:	4613      	mov	r3, r2
 80054ce:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054d6:	d308      	bcc.n	80054ea <UART_SetConfig+0x3d2>
 80054d8:	6a3b      	ldr	r3, [r7, #32]
 80054da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054de:	d204      	bcs.n	80054ea <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6a3a      	ldr	r2, [r7, #32]
 80054e6:	60da      	str	r2, [r3, #12]
 80054e8:	e0c8      	b.n	800567c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80054f0:	e0c4      	b.n	800567c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054fa:	d167      	bne.n	80055cc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80054fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005500:	2b08      	cmp	r3, #8
 8005502:	d828      	bhi.n	8005556 <UART_SetConfig+0x43e>
 8005504:	a201      	add	r2, pc, #4	@ (adr r2, 800550c <UART_SetConfig+0x3f4>)
 8005506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550a:	bf00      	nop
 800550c:	08005531 	.word	0x08005531
 8005510:	08005539 	.word	0x08005539
 8005514:	08005541 	.word	0x08005541
 8005518:	08005557 	.word	0x08005557
 800551c:	08005547 	.word	0x08005547
 8005520:	08005557 	.word	0x08005557
 8005524:	08005557 	.word	0x08005557
 8005528:	08005557 	.word	0x08005557
 800552c:	0800554f 	.word	0x0800554f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005530:	f7ff f856 	bl	80045e0 <HAL_RCC_GetPCLK1Freq>
 8005534:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005536:	e014      	b.n	8005562 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005538:	f7ff f868 	bl	800460c <HAL_RCC_GetPCLK2Freq>
 800553c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800553e:	e010      	b.n	8005562 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005540:	4b5a      	ldr	r3, [pc, #360]	@ (80056ac <UART_SetConfig+0x594>)
 8005542:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005544:	e00d      	b.n	8005562 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005546:	f7fe ffdd 	bl	8004504 <HAL_RCC_GetSysClockFreq>
 800554a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800554c:	e009      	b.n	8005562 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800554e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005552:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005554:	e005      	b.n	8005562 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005556:	2300      	movs	r3, #0
 8005558:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005560:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005564:	2b00      	cmp	r3, #0
 8005566:	f000 8089 	beq.w	800567c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800556e:	4a4e      	ldr	r2, [pc, #312]	@ (80056a8 <UART_SetConfig+0x590>)
 8005570:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005574:	461a      	mov	r2, r3
 8005576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005578:	fbb3 f3f2 	udiv	r3, r3, r2
 800557c:	005a      	lsls	r2, r3, #1
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	085b      	lsrs	r3, r3, #1
 8005584:	441a      	add	r2, r3
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	fbb2 f3f3 	udiv	r3, r2, r3
 800558e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	2b0f      	cmp	r3, #15
 8005594:	d916      	bls.n	80055c4 <UART_SetConfig+0x4ac>
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800559c:	d212      	bcs.n	80055c4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800559e:	6a3b      	ldr	r3, [r7, #32]
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	f023 030f 	bic.w	r3, r3, #15
 80055a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055a8:	6a3b      	ldr	r3, [r7, #32]
 80055aa:	085b      	lsrs	r3, r3, #1
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	f003 0307 	and.w	r3, r3, #7
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	8bfb      	ldrh	r3, [r7, #30]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	8bfa      	ldrh	r2, [r7, #30]
 80055c0:	60da      	str	r2, [r3, #12]
 80055c2:	e05b      	b.n	800567c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80055ca:	e057      	b.n	800567c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055cc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80055d0:	2b08      	cmp	r3, #8
 80055d2:	d828      	bhi.n	8005626 <UART_SetConfig+0x50e>
 80055d4:	a201      	add	r2, pc, #4	@ (adr r2, 80055dc <UART_SetConfig+0x4c4>)
 80055d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055da:	bf00      	nop
 80055dc:	08005601 	.word	0x08005601
 80055e0:	08005609 	.word	0x08005609
 80055e4:	08005611 	.word	0x08005611
 80055e8:	08005627 	.word	0x08005627
 80055ec:	08005617 	.word	0x08005617
 80055f0:	08005627 	.word	0x08005627
 80055f4:	08005627 	.word	0x08005627
 80055f8:	08005627 	.word	0x08005627
 80055fc:	0800561f 	.word	0x0800561f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005600:	f7fe ffee 	bl	80045e0 <HAL_RCC_GetPCLK1Freq>
 8005604:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005606:	e014      	b.n	8005632 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005608:	f7ff f800 	bl	800460c <HAL_RCC_GetPCLK2Freq>
 800560c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800560e:	e010      	b.n	8005632 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005610:	4b26      	ldr	r3, [pc, #152]	@ (80056ac <UART_SetConfig+0x594>)
 8005612:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005614:	e00d      	b.n	8005632 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005616:	f7fe ff75 	bl	8004504 <HAL_RCC_GetSysClockFreq>
 800561a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800561c:	e009      	b.n	8005632 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800561e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005622:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005624:	e005      	b.n	8005632 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005626:	2300      	movs	r3, #0
 8005628:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005630:	bf00      	nop
    }

    if (pclk != 0U)
 8005632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005634:	2b00      	cmp	r3, #0
 8005636:	d021      	beq.n	800567c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563c:	4a1a      	ldr	r2, [pc, #104]	@ (80056a8 <UART_SetConfig+0x590>)
 800563e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005642:	461a      	mov	r2, r3
 8005644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005646:	fbb3 f2f2 	udiv	r2, r3, r2
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	085b      	lsrs	r3, r3, #1
 8005650:	441a      	add	r2, r3
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	fbb2 f3f3 	udiv	r3, r2, r3
 800565a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800565c:	6a3b      	ldr	r3, [r7, #32]
 800565e:	2b0f      	cmp	r3, #15
 8005660:	d909      	bls.n	8005676 <UART_SetConfig+0x55e>
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005668:	d205      	bcs.n	8005676 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800566a:	6a3b      	ldr	r3, [r7, #32]
 800566c:	b29a      	uxth	r2, r3
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	60da      	str	r2, [r3, #12]
 8005674:	e002      	b.n	800567c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	2201      	movs	r2, #1
 8005680:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	2201      	movs	r2, #1
 8005688:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	2200      	movs	r2, #0
 8005690:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2200      	movs	r2, #0
 8005696:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005698:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800569c:	4618      	mov	r0, r3
 800569e:	3730      	adds	r7, #48	@ 0x30
 80056a0:	46bd      	mov	sp, r7
 80056a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056a6:	bf00      	nop
 80056a8:	08006194 	.word	0x08006194
 80056ac:	00f42400 	.word	0x00f42400

080056b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056bc:	f003 0308 	and.w	r3, r3, #8
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00a      	beq.n	80056da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	430a      	orrs	r2, r1
 80056d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	430a      	orrs	r2, r1
 80056fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00a      	beq.n	800571e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005722:	f003 0304 	and.w	r3, r3, #4
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00a      	beq.n	8005740 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005744:	f003 0310 	and.w	r3, r3, #16
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00a      	beq.n	8005762 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	430a      	orrs	r2, r1
 8005760:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005766:	f003 0320 	and.w	r3, r3, #32
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00a      	beq.n	8005784 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800578c:	2b00      	cmp	r3, #0
 800578e:	d01a      	beq.n	80057c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057ae:	d10a      	bne.n	80057c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	605a      	str	r2, [r3, #4]
  }
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b098      	sub	sp, #96	@ 0x60
 80057f8:	af02      	add	r7, sp, #8
 80057fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005804:	f7fc fc9a 	bl	800213c <HAL_GetTick>
 8005808:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0308 	and.w	r3, r3, #8
 8005814:	2b08      	cmp	r3, #8
 8005816:	d12f      	bne.n	8005878 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005818:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005820:	2200      	movs	r2, #0
 8005822:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f88e 	bl	8005948 <UART_WaitOnFlagUntilTimeout>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d022      	beq.n	8005878 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800583a:	e853 3f00 	ldrex	r3, [r3]
 800583e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005842:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005846:	653b      	str	r3, [r7, #80]	@ 0x50
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	461a      	mov	r2, r3
 800584e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005850:	647b      	str	r3, [r7, #68]	@ 0x44
 8005852:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005854:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005856:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005858:	e841 2300 	strex	r3, r2, [r1]
 800585c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800585e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1e6      	bne.n	8005832 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2220      	movs	r2, #32
 8005868:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e063      	b.n	8005940 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0304 	and.w	r3, r3, #4
 8005882:	2b04      	cmp	r3, #4
 8005884:	d149      	bne.n	800591a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005886:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800588e:	2200      	movs	r2, #0
 8005890:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 f857 	bl	8005948 <UART_WaitOnFlagUntilTimeout>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d03c      	beq.n	800591a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a8:	e853 3f00 	ldrex	r3, [r3]
 80058ac:	623b      	str	r3, [r7, #32]
   return(result);
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	461a      	mov	r2, r3
 80058bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058be:	633b      	str	r3, [r7, #48]	@ 0x30
 80058c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058c6:	e841 2300 	strex	r3, r2, [r1]
 80058ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1e6      	bne.n	80058a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3308      	adds	r3, #8
 80058d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	e853 3f00 	ldrex	r3, [r3]
 80058e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f023 0301 	bic.w	r3, r3, #1
 80058e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3308      	adds	r3, #8
 80058f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058f2:	61fa      	str	r2, [r7, #28]
 80058f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f6:	69b9      	ldr	r1, [r7, #24]
 80058f8:	69fa      	ldr	r2, [r7, #28]
 80058fa:	e841 2300 	strex	r3, r2, [r1]
 80058fe:	617b      	str	r3, [r7, #20]
   return(result);
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1e5      	bne.n	80058d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2220      	movs	r2, #32
 800590a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e012      	b.n	8005940 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2220      	movs	r2, #32
 800591e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2220      	movs	r2, #32
 8005926:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3758      	adds	r7, #88	@ 0x58
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	603b      	str	r3, [r7, #0]
 8005954:	4613      	mov	r3, r2
 8005956:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005958:	e04f      	b.n	80059fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005960:	d04b      	beq.n	80059fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005962:	f7fc fbeb 	bl	800213c <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	69ba      	ldr	r2, [r7, #24]
 800596e:	429a      	cmp	r2, r3
 8005970:	d302      	bcc.n	8005978 <UART_WaitOnFlagUntilTimeout+0x30>
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e04e      	b.n	8005a1a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0304 	and.w	r3, r3, #4
 8005986:	2b00      	cmp	r3, #0
 8005988:	d037      	beq.n	80059fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	2b80      	cmp	r3, #128	@ 0x80
 800598e:	d034      	beq.n	80059fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	2b40      	cmp	r3, #64	@ 0x40
 8005994:	d031      	beq.n	80059fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	69db      	ldr	r3, [r3, #28]
 800599c:	f003 0308 	and.w	r3, r3, #8
 80059a0:	2b08      	cmp	r3, #8
 80059a2:	d110      	bne.n	80059c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2208      	movs	r2, #8
 80059aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f000 f920 	bl	8005bf2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2208      	movs	r2, #8
 80059b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e029      	b.n	8005a1a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	69db      	ldr	r3, [r3, #28]
 80059cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059d4:	d111      	bne.n	80059fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80059de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 f906 	bl	8005bf2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2220      	movs	r2, #32
 80059ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e00f      	b.n	8005a1a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	69da      	ldr	r2, [r3, #28]
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	4013      	ands	r3, r2
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	bf0c      	ite	eq
 8005a0a:	2301      	moveq	r3, #1
 8005a0c:	2300      	movne	r3, #0
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	461a      	mov	r2, r3
 8005a12:	79fb      	ldrb	r3, [r7, #7]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d0a0      	beq.n	800595a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
	...

08005a24 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b096      	sub	sp, #88	@ 0x58
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	88fa      	ldrh	r2, [r7, #6]
 8005a3c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2222      	movs	r2, #34	@ 0x22
 8005a4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d02d      	beq.n	8005ab6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a60:	4a40      	ldr	r2, [pc, #256]	@ (8005b64 <UART_Start_Receive_DMA+0x140>)
 8005a62:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a6a:	4a3f      	ldr	r2, [pc, #252]	@ (8005b68 <UART_Start_Receive_DMA+0x144>)
 8005a6c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a74:	4a3d      	ldr	r2, [pc, #244]	@ (8005b6c <UART_Start_Receive_DMA+0x148>)
 8005a76:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a7e:	2200      	movs	r2, #0
 8005a80:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	3324      	adds	r3, #36	@ 0x24
 8005a8e:	4619      	mov	r1, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a94:	461a      	mov	r2, r3
 8005a96:	88fb      	ldrh	r3, [r7, #6]
 8005a98:	f7fc fe46 	bl	8002728 <HAL_DMA_Start_IT>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d009      	beq.n	8005ab6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2210      	movs	r2, #16
 8005aa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2220      	movs	r2, #32
 8005aae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e051      	b.n	8005b5a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d018      	beq.n	8005af0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ac6:	e853 3f00 	ldrex	r3, [r3]
 8005aca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ace:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ad2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	461a      	mov	r2, r3
 8005ada:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005adc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ade:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005ae2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ae4:	e841 2300 	strex	r3, r2, [r1]
 8005ae8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005aea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1e6      	bne.n	8005abe <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3308      	adds	r3, #8
 8005af6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005afa:	e853 3f00 	ldrex	r3, [r3]
 8005afe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b02:	f043 0301 	orr.w	r3, r3, #1
 8005b06:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	3308      	adds	r3, #8
 8005b0e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005b10:	637a      	str	r2, [r7, #52]	@ 0x34
 8005b12:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b14:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005b16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b18:	e841 2300 	strex	r3, r2, [r1]
 8005b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1e5      	bne.n	8005af0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	3308      	adds	r3, #8
 8005b2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	e853 3f00 	ldrex	r3, [r3]
 8005b32:	613b      	str	r3, [r7, #16]
   return(result);
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	3308      	adds	r3, #8
 8005b42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b44:	623a      	str	r2, [r7, #32]
 8005b46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b48:	69f9      	ldr	r1, [r7, #28]
 8005b4a:	6a3a      	ldr	r2, [r7, #32]
 8005b4c:	e841 2300 	strex	r3, r2, [r1]
 8005b50:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1e5      	bne.n	8005b24 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3758      	adds	r7, #88	@ 0x58
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	08005cbf 	.word	0x08005cbf
 8005b68:	08005deb 	.word	0x08005deb
 8005b6c:	08005e29 	.word	0x08005e29

08005b70 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b08f      	sub	sp, #60	@ 0x3c
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	e853 3f00 	ldrex	r3, [r3]
 8005b84:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005b8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	461a      	mov	r2, r3
 8005b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b98:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b9e:	e841 2300 	strex	r3, r2, [r1]
 8005ba2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1e6      	bne.n	8005b78 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3308      	adds	r3, #8
 8005bb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	e853 3f00 	ldrex	r3, [r3]
 8005bb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005bc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	3308      	adds	r3, #8
 8005bc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bca:	61ba      	str	r2, [r7, #24]
 8005bcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bce:	6979      	ldr	r1, [r7, #20]
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	e841 2300 	strex	r3, r2, [r1]
 8005bd6:	613b      	str	r3, [r7, #16]
   return(result);
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1e5      	bne.n	8005baa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2220      	movs	r2, #32
 8005be2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8005be6:	bf00      	nop
 8005be8:	373c      	adds	r7, #60	@ 0x3c
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr

08005bf2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b095      	sub	sp, #84	@ 0x54
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c02:	e853 3f00 	ldrex	r3, [r3]
 8005c06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	461a      	mov	r2, r3
 8005c16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c18:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c1a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c20:	e841 2300 	strex	r3, r2, [r1]
 8005c24:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1e6      	bne.n	8005bfa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	3308      	adds	r3, #8
 8005c32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c34:	6a3b      	ldr	r3, [r7, #32]
 8005c36:	e853 3f00 	ldrex	r3, [r3]
 8005c3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c42:	f023 0301 	bic.w	r3, r3, #1
 8005c46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3308      	adds	r3, #8
 8005c4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c50:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c52:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c58:	e841 2300 	strex	r3, r2, [r1]
 8005c5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1e3      	bne.n	8005c2c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d118      	bne.n	8005c9e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	e853 3f00 	ldrex	r3, [r3]
 8005c78:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	f023 0310 	bic.w	r3, r3, #16
 8005c80:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	461a      	mov	r2, r3
 8005c88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c8a:	61bb      	str	r3, [r7, #24]
 8005c8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8e:	6979      	ldr	r1, [r7, #20]
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	e841 2300 	strex	r3, r2, [r1]
 8005c96:	613b      	str	r3, [r7, #16]
   return(result);
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1e6      	bne.n	8005c6c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005cb2:	bf00      	nop
 8005cb4:	3754      	adds	r7, #84	@ 0x54
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b09c      	sub	sp, #112	@ 0x70
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cca:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0320 	and.w	r3, r3, #32
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d171      	bne.n	8005dbe <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005cda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ce2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cea:	e853 3f00 	ldrex	r3, [r3]
 8005cee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005cf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cf2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cf6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d02:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d04:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d08:	e841 2300 	strex	r3, r2, [r1]
 8005d0c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005d0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1e6      	bne.n	8005ce2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3308      	adds	r3, #8
 8005d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d1e:	e853 3f00 	ldrex	r3, [r3]
 8005d22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d26:	f023 0301 	bic.w	r3, r3, #1
 8005d2a:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3308      	adds	r3, #8
 8005d32:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005d34:	647a      	str	r2, [r7, #68]	@ 0x44
 8005d36:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d3c:	e841 2300 	strex	r3, r2, [r1]
 8005d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1e5      	bne.n	8005d14 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3308      	adds	r3, #8
 8005d4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d52:	e853 3f00 	ldrex	r3, [r3]
 8005d56:	623b      	str	r3, [r7, #32]
   return(result);
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	3308      	adds	r3, #8
 8005d66:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005d68:	633a      	str	r2, [r7, #48]	@ 0x30
 8005d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d70:	e841 2300 	strex	r3, r2, [r1]
 8005d74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1e5      	bne.n	8005d48 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d7e:	2220      	movs	r2, #32
 8005d80:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d118      	bne.n	8005dbe <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	e853 3f00 	ldrex	r3, [r3]
 8005d98:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f023 0310 	bic.w	r3, r3, #16
 8005da0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005da2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	461a      	mov	r2, r3
 8005da8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005daa:	61fb      	str	r3, [r7, #28]
 8005dac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dae:	69b9      	ldr	r1, [r7, #24]
 8005db0:	69fa      	ldr	r2, [r7, #28]
 8005db2:	e841 2300 	strex	r3, r2, [r1]
 8005db6:	617b      	str	r3, [r7, #20]
   return(result);
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1e6      	bne.n	8005d8c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005dc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d107      	bne.n	8005ddc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005dce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005dd6:	f7ff f993 	bl	8005100 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005dda:	e002      	b.n	8005de2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005ddc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005dde:	f7ff f971 	bl	80050c4 <HAL_UART_RxCpltCallback>
}
 8005de2:	bf00      	nop
 8005de4:	3770      	adds	r7, #112	@ 0x70
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b084      	sub	sp, #16
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d109      	bne.n	8005e1a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005e0c:	085b      	lsrs	r3, r3, #1
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	4619      	mov	r1, r3
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f7ff f974 	bl	8005100 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e18:	e002      	b.n	8005e20 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f7ff f95c 	bl	80050d8 <HAL_UART_RxHalfCpltCallback>
}
 8005e20:	bf00      	nop
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e34:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e3c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e44:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e50:	2b80      	cmp	r3, #128	@ 0x80
 8005e52:	d109      	bne.n	8005e68 <UART_DMAError+0x40>
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	2b21      	cmp	r3, #33	@ 0x21
 8005e58:	d106      	bne.n	8005e68 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8005e62:	6978      	ldr	r0, [r7, #20]
 8005e64:	f7ff fe84 	bl	8005b70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e72:	2b40      	cmp	r3, #64	@ 0x40
 8005e74:	d109      	bne.n	8005e8a <UART_DMAError+0x62>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2b22      	cmp	r3, #34	@ 0x22
 8005e7a:	d106      	bne.n	8005e8a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8005e84:	6978      	ldr	r0, [r7, #20]
 8005e86:	f7ff feb4 	bl	8005bf2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e90:	f043 0210 	orr.w	r2, r3, #16
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e9a:	6978      	ldr	r0, [r7, #20]
 8005e9c:	f7ff f926 	bl	80050ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ea0:	bf00      	nop
 8005ea2:	3718      	adds	r7, #24
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d101      	bne.n	8005ebe <HAL_UARTEx_DisableFifoMode+0x16>
 8005eba:	2302      	movs	r3, #2
 8005ebc:	e027      	b.n	8005f0e <HAL_UARTEx_DisableFifoMode+0x66>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2224      	movs	r2, #36	@ 0x24
 8005eca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f022 0201 	bic.w	r2, r2, #1
 8005ee4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005eec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2220      	movs	r2, #32
 8005f00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b084      	sub	sp, #16
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d101      	bne.n	8005f32 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005f2e:	2302      	movs	r3, #2
 8005f30:	e02d      	b.n	8005f8e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2224      	movs	r2, #36	@ 0x24
 8005f3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f022 0201 	bic.w	r2, r2, #1
 8005f58:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	683a      	ldr	r2, [r7, #0]
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f850 	bl	8006014 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b084      	sub	sp, #16
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
 8005f9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d101      	bne.n	8005fae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005faa:	2302      	movs	r3, #2
 8005fac:	e02d      	b.n	800600a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2224      	movs	r2, #36	@ 0x24
 8005fba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f022 0201 	bic.w	r2, r2, #1
 8005fd4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f812 	bl	8006014 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
	...

08006014 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006020:	2b00      	cmp	r3, #0
 8006022:	d108      	bne.n	8006036 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006034:	e031      	b.n	800609a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006036:	2308      	movs	r3, #8
 8006038:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800603a:	2308      	movs	r3, #8
 800603c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	0e5b      	lsrs	r3, r3, #25
 8006046:	b2db      	uxtb	r3, r3
 8006048:	f003 0307 	and.w	r3, r3, #7
 800604c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	0f5b      	lsrs	r3, r3, #29
 8006056:	b2db      	uxtb	r3, r3
 8006058:	f003 0307 	and.w	r3, r3, #7
 800605c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800605e:	7bbb      	ldrb	r3, [r7, #14]
 8006060:	7b3a      	ldrb	r2, [r7, #12]
 8006062:	4911      	ldr	r1, [pc, #68]	@ (80060a8 <UARTEx_SetNbDataToProcess+0x94>)
 8006064:	5c8a      	ldrb	r2, [r1, r2]
 8006066:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800606a:	7b3a      	ldrb	r2, [r7, #12]
 800606c:	490f      	ldr	r1, [pc, #60]	@ (80060ac <UARTEx_SetNbDataToProcess+0x98>)
 800606e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006070:	fb93 f3f2 	sdiv	r3, r3, r2
 8006074:	b29a      	uxth	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800607c:	7bfb      	ldrb	r3, [r7, #15]
 800607e:	7b7a      	ldrb	r2, [r7, #13]
 8006080:	4909      	ldr	r1, [pc, #36]	@ (80060a8 <UARTEx_SetNbDataToProcess+0x94>)
 8006082:	5c8a      	ldrb	r2, [r1, r2]
 8006084:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006088:	7b7a      	ldrb	r2, [r7, #13]
 800608a:	4908      	ldr	r1, [pc, #32]	@ (80060ac <UARTEx_SetNbDataToProcess+0x98>)
 800608c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800608e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006092:	b29a      	uxth	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800609a:	bf00      	nop
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	080061ac 	.word	0x080061ac
 80060ac:	080061b4 	.word	0x080061b4

080060b0 <memset>:
 80060b0:	4402      	add	r2, r0
 80060b2:	4603      	mov	r3, r0
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d100      	bne.n	80060ba <memset+0xa>
 80060b8:	4770      	bx	lr
 80060ba:	f803 1b01 	strb.w	r1, [r3], #1
 80060be:	e7f9      	b.n	80060b4 <memset+0x4>

080060c0 <__libc_init_array>:
 80060c0:	b570      	push	{r4, r5, r6, lr}
 80060c2:	4d0d      	ldr	r5, [pc, #52]	@ (80060f8 <__libc_init_array+0x38>)
 80060c4:	4c0d      	ldr	r4, [pc, #52]	@ (80060fc <__libc_init_array+0x3c>)
 80060c6:	1b64      	subs	r4, r4, r5
 80060c8:	10a4      	asrs	r4, r4, #2
 80060ca:	2600      	movs	r6, #0
 80060cc:	42a6      	cmp	r6, r4
 80060ce:	d109      	bne.n	80060e4 <__libc_init_array+0x24>
 80060d0:	4d0b      	ldr	r5, [pc, #44]	@ (8006100 <__libc_init_array+0x40>)
 80060d2:	4c0c      	ldr	r4, [pc, #48]	@ (8006104 <__libc_init_array+0x44>)
 80060d4:	f000 f818 	bl	8006108 <_init>
 80060d8:	1b64      	subs	r4, r4, r5
 80060da:	10a4      	asrs	r4, r4, #2
 80060dc:	2600      	movs	r6, #0
 80060de:	42a6      	cmp	r6, r4
 80060e0:	d105      	bne.n	80060ee <__libc_init_array+0x2e>
 80060e2:	bd70      	pop	{r4, r5, r6, pc}
 80060e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80060e8:	4798      	blx	r3
 80060ea:	3601      	adds	r6, #1
 80060ec:	e7ee      	b.n	80060cc <__libc_init_array+0xc>
 80060ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80060f2:	4798      	blx	r3
 80060f4:	3601      	adds	r6, #1
 80060f6:	e7f2      	b.n	80060de <__libc_init_array+0x1e>
 80060f8:	080061c4 	.word	0x080061c4
 80060fc:	080061c4 	.word	0x080061c4
 8006100:	080061c4 	.word	0x080061c4
 8006104:	080061c8 	.word	0x080061c8

08006108 <_init>:
 8006108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800610a:	bf00      	nop
 800610c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800610e:	bc08      	pop	{r3}
 8006110:	469e      	mov	lr, r3
 8006112:	4770      	bx	lr

08006114 <_fini>:
 8006114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006116:	bf00      	nop
 8006118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800611a:	bc08      	pop	{r3}
 800611c:	469e      	mov	lr, r3
 800611e:	4770      	bx	lr
